high:
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 3
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 3
            end: 3
            column:
                start: 1
                end: 26
        content: res.send(req.params.oops)
      sink:
        location:
            start: 3
            end: 3
            column:
                start: 1
                end: 26
      parent_line_number: 3
      snippet: res.send(req.params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_0
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_0
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 9
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 9
            end: 9
            column:
                start: 1
                end: 22
        content: res.send(params.oops)
      sink:
        location:
            start: 9
            end: 9
            column:
                start: 1
                end: 22
      parent_line_number: 9
      snippet: res.send(params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_1
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_1
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 10
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 10
            end: 10
            column:
                start: 1
                end: 15
        content: res.send(oops)
      sink:
        location:
            start: 10
            end: 10
            column:
                start: 1
                end: 15
      parent_line_number: 10
      snippet: res.send(oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_2
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_2
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 13
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 13
            end: 13
            column:
                start: 1
                end: 26
        content: res.send(foo.params.oops)
      sink:
        location:
            start: 13
            end: 13
            column:
                start: 1
                end: 26
      parent_line_number: 13
      snippet: res.send(foo.params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_3
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_3
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 16
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 16
            end: 16
            column:
                start: 3
                end: 29
        content: res.send(foo2.params.oops)
      sink:
        location:
            start: 16
            end: 16
            column:
                start: 3
                end: 29
      parent_line_number: 16
      snippet: res.send(foo2.params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_4
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_4
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 17
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 17
            end: 17
            column:
                start: 3
                end: 24
        content: res.send(params.oops)
      sink:
        location:
            start: 17
            end: 17
            column:
                start: 3
                end: 24
      parent_line_number: 17
      snippet: res.send(params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_5
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_5
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 21
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 21
            end: 21
            column:
                start: 3
                end: 29
        content: res.send(foo3.params.oops)
      sink:
        location:
            start: 21
            end: 21
            column:
                start: 3
                end: 29
      parent_line_number: 21
      snippet: res.send(foo3.params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_6
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_6
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 22
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 22
            end: 22
            column:
                start: 3
                end: 24
        content: res.send(params.oops)
      sink:
        location:
            start: 22
            end: 22
            column:
                start: 3
                end: 24
      parent_line_number: 22
      snippet: res.send(params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_7
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_7
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 26
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 26
            end: 26
            column:
                start: 3
                end: 29
        content: res.send(foo4.params.oops)
      sink:
        location:
            start: 26
            end: 26
            column:
                start: 3
                end: 29
      parent_line_number: 26
      snippet: res.send(foo4.params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_8
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_8
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 27
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 27
            end: 27
            column:
                start: 3
                end: 24
        content: res.send(params.oops)
      sink:
        location:
            start: 27
            end: 27
            column:
                start: 3
                end: 24
      parent_line_number: 27
      snippet: res.send(params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_9
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_9
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 33
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 33
            end: 33
            column:
                start: 5
                end: 31
        content: res.send(foo5.params.oops)
      sink:
        location:
            start: 33
            end: 33
            column:
                start: 5
                end: 31
      parent_line_number: 33
      snippet: res.send(foo5.params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_10
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_10
    - rule:
        cwe_ids:
            - "79"
        id: javascript_express_cross_site_scripting
        title: Cross-site scripting (XSS) vulnerability detected.
        description: |
            ## Description
            Sending unsanitized user input in a response puts your application at risk of cross-site scripting attacks.


            ## Remediations
            ❌ Avoid including user input directly in a response:

            ```javascript
            res.send(req.body.data)
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
      line_number: 34
      full_filename: /tmp/scan/user_input_types.ts
      filename: .
      source:
        location:
            start: 34
            end: 34
            column:
                start: 5
                end: 26
        content: res.send(params.oops)
      sink:
        location:
            start: 34
            end: 34
            column:
                start: 5
                end: 26
      parent_line_number: 34
      snippet: res.send(params.oops)
      fingerprint: df7c00dff42ea03e2153d41a4dc2fc8e_11
      old_fingerprint: 3789048ec3cbec4977711a1eaad87381_11

