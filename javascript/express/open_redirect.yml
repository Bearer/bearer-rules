patterns:
  - pattern: |
      res.redirect($<DATA>$<...>)
    filters:
      - variable: DATA
        detection: javascript_express_open_redirect_data
auxiliary:
  - id: javascript_express_open_redirect_data
    sanitizer: javascript_express_open_redirect_sanitized
    patterns:
      - pattern: $<USER_INPUT>
        filters:
          - variable: USER_INPUT
            detection: javascript_express_open_redirect_user_input
            contains: false
      - pattern: const { $<!>$<_> } = $<USER_INPUT>
        filters:
          - variable: USER_INPUT
            detection: javascript_express_open_redirect_user_input
  - id: javascript_express_open_redirect_user_input
    patterns:
      - req.params
      - req.query
      - req.body
      - req.cookies
      - req.headers
  - id: javascript_express_open_redirect_sanitized
    patterns:
      - pattern: |
          !$<!>$<_>
languages:
  - javascript
severity: medium
metadata:
  description: "Open redirect detected."
  remediation_message: |
    ## Description
    A redirect using unsanitized user input is bad practice and puts your application at greater risk of phishing attacks.

    ## Remediations
    ❌ Do not use unsanitized user input when constructing URLs

    ✅ Instead, ensure the input is validated by using a safe list or a mapping when constructing URLs

    ```javascript
      var map = {
        "1": "/planes",
        "2": "/trains",
        "3": "/automobiles",
      }

      res.redirect(map[req.body.transport])
    ```
    ## Resources
    - [OWASP open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
  cwe_id:
    - 601
  id: "javascript_express_open_redirect"
  documentation_url: https://docs.bearer.com/reference/rules/javascript_express_open_redirect
