high:
    - rule:
        cwe_ids:
            - "89"
        id: javascript_aws_lambda_sql_injection
        title: SQL injection vulnerability detected.
        description: |
            ## Description
            Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.


            ## Remediations

            Use safe sql libraries methods which sanitze user input

            Sequelize example
            ```javascript
              const { Op } = require("sequelize");

              module.exports= async function(event, context) {
                await Post.findAll({
                  where: {
                    [Op.or]: [
                      { authorId: event.authorID },
                      { authorId: 13 }
                    ]
                  }
                });
              };
            ```

            ## Resources
            - [OWASP sql injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_aws_lambda_sql_injection
      line_number: 8
      filename: /tmp/scan/pg_sql_injection.js
      parent_line_number: 8
      snippet: client.query('SELECT * FROM users WHERE user.name = ' + event.user.name)
      fingerprint: 9db0522a2a235293ac87df9b53b5dbdb_0

