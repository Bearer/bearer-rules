patterns:
  - pattern: |
      $<ARGON2>.hash($<PASSWORD>, $<INSECURE_ARGON2_TYPE>)
    filters:
      - variable: ARGON2
        detection: argon2_init
      - variable: INSECURE_ARGON2_TYPE
        detection: insecure_argon2_type
      - variable: PASSWORD
        detection: datatype
        scope: result
languages:
  - javascript
auxiliary:
  - id: argon2_init
    patterns:
      - import $<!>$<_>$<...> from "argon2"
      - pattern: |
          $<METHOD>($<NAME>)
        filters:
          - variable: METHOD
            values:
              - require
              - import
          - variable: NAME
            string_regex: \Aargon2\z
      # fallback
      - argon2
  - id: insecure_argon2_type
    patterns:
      - |
        {$<...>type: argon2.argon2i, $<...>}
      - |
        {$<...>type: argon2.argon2d, $<...>}
only_data_types:
  - "Passwords"
metadata:
  description: "insecure Argon2 type used for password hashing."
  remediation_message: |
    ## Description

    Out of the three variants of the Argon2 algorithm (Argon2i, Argon2d, Argon2id), Argon2id is the recommended choice because it offers the best protection.

    ## Recommendations

    ‚ùå Do not override the default type (Argon2id) when using the Argon2 library

    ```javascript
      const argon2 = require("argon2");

      const hash = await argon2.hash(req.params.password, { type: argon2.argon2i })
    ```

    ## Resources
    - [Argon2 type options](https://github.com/ranisalt/node-argon2/wiki/Options#type)
    - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
  cwe_id:
    - 327
    - 916
  id: javascript_lang_weak_password_hash_argon2
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_argon2
