high:
    - rule:
        cwe_ids:
            - "327"
            - "916"
        id: javascript_lang_weak_password_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Passwords should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            âœ… Use stronger encryption algorithms when storing passwords.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_encryption
      line_number: 4
      full_filename: /tmp/scan/argon2i.js
      filename: .
      data_type:
        category_uuid: dd88aee5-9d40-4ad2-8983-0c791ddec47c
        name: Passwords
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 4
            end: 4
            column:
                start: 34
                end: 54
      sink:
        location:
            start: 4
            end: 8
            column:
                start: 22
                end: 5
        content: |-
            argon2.hash(currentUser.password, {
                type: argon2.argon2i,
                memoryCost: 2 ** 16,
                hashLength: 50,
              })
      parent_line_number: 4
      snippet: |-
        argon2.hash(currentUser.password, {
            type: argon2.argon2i,
            memoryCost: 2 ** 16,
            hashLength: 50,
          })
      fingerprint: acda44fe7460e65bdf4544fa632de986_0
      old_fingerprint: 0f2a18f9c2d16025d11dfda506ac2868_0

