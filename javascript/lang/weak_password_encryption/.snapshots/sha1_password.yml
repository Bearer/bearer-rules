high:
    - rule:
        cwe_ids:
            - "327"
            - "916"
        id: javascript_lang_weak_password_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Passwords should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing passwords.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_encryption
      line_number: 4
      full_filename: /tmp/scan/sha1_password.js
      filename: .
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 4
            end: 4
            column:
                start: 17
                end: 69
        content: crypto.createHmac("sha1", key).update(user.password)
      sink:
        location:
            start: 4
            end: 4
            column:
                start: 55
                end: 68
      parent_line_number: 4
      snippet: crypto.createHmac("sha1", key).update(user.password)
      fingerprint: acda44fe7460e65bdf4544fa632de986_0
      old_fingerprint: 617361d31734ac8b27d312d1a4d38ee7_0
    - rule:
        cwe_ids:
            - "327"
            - "916"
        id: javascript_lang_weak_password_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Passwords should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing passwords.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_encryption
      line_number: 5
      full_filename: /tmp/scan/sha1_password.js
      filename: .
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 5
            end: 5
            column:
                start: 15
                end: 62
        content: crypto.createHash("sha1").update(user.password)
      sink:
        location:
            start: 5
            end: 5
            column:
                start: 48
                end: 61
      parent_line_number: 5
      snippet: crypto.createHash("sha1").update(user.password)
      fingerprint: acda44fe7460e65bdf4544fa632de986_1
      old_fingerprint: 617361d31734ac8b27d312d1a4d38ee7_1
    - rule:
        cwe_ids:
            - "327"
            - "916"
        id: javascript_lang_weak_password_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Passwords should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing passwords.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_encryption
      line_number: 7
      full_filename: /tmp/scan/sha1_password.js
      filename: .
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 7
            end: 7
            column:
                start: 1
                end: 40
        content: CryptoJS.HmacSHA1(user.password, "Key")
      sink:
        location:
            start: 7
            end: 7
            column:
                start: 19
                end: 32
      parent_line_number: 7
      snippet: CryptoJS.HmacSHA1(user.password, "Key")
      fingerprint: acda44fe7460e65bdf4544fa632de986_2
      old_fingerprint: 617361d31734ac8b27d312d1a4d38ee7_2
    - rule:
        cwe_ids:
            - "327"
            - "916"
        id: javascript_lang_weak_password_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Passwords should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing passwords.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_encryption
      line_number: 8
      full_filename: /tmp/scan/sha1_password.js
      filename: .
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 8
            end: 8
            column:
                start: 1
                end: 29
        content: CryptoJS.SHA1(user.password)
      sink:
        location:
            start: 8
            end: 8
            column:
                start: 15
                end: 28
      parent_line_number: 8
      snippet: CryptoJS.SHA1(user.password)
      fingerprint: acda44fe7460e65bdf4544fa632de986_3
      old_fingerprint: 617361d31734ac8b27d312d1a4d38ee7_3

