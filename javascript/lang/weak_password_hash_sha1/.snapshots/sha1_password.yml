high:
    - rule:
        cwe_ids:
            - "327"
            - "328"
        id: javascript_lang_weak_password_hash_sha1
        title: Weak hashing library (SHA1) used for password detected.
        description: |
            ## Description

            A weak hashing library can lead to data breaches and greater security risk.

            ## Remediations

            ✅ Use a recommended hashing library such as Argon2id for passwords

            ```javascript
              const argon2 = require("argon2");

              const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })
            ```

            ## Resources
            - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_sha1
      line_number: 4
      full_filename: /tmp/scan/sha1_password.js
      filename: .
      data_type:
        category_uuid: dd88aee5-9d40-4ad2-8983-0c791ddec47c
        name: Passwords
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 4
            end: 4
            column:
                start: 55
                end: 68
      sink:
        location:
            start: 4
            end: 4
            column:
                start: 17
                end: 69
        content: crypto.createHmac("sha1", key).update(user.password)
      parent_line_number: 4
      snippet: crypto.createHmac("sha1", key).update(user.password)
      fingerprint: 3d1a07c8b1dd26c04fc9b527f0319cd1_0
      old_fingerprint: 7274d4919c048c467c6f6c4fb38df749_0
    - rule:
        cwe_ids:
            - "327"
            - "328"
        id: javascript_lang_weak_password_hash_sha1
        title: Weak hashing library (SHA1) used for password detected.
        description: |
            ## Description

            A weak hashing library can lead to data breaches and greater security risk.

            ## Remediations

            ✅ Use a recommended hashing library such as Argon2id for passwords

            ```javascript
              const argon2 = require("argon2");

              const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })
            ```

            ## Resources
            - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_sha1
      line_number: 5
      full_filename: /tmp/scan/sha1_password.js
      filename: .
      data_type:
        category_uuid: dd88aee5-9d40-4ad2-8983-0c791ddec47c
        name: Passwords
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 5
            end: 5
            column:
                start: 48
                end: 61
      sink:
        location:
            start: 5
            end: 5
            column:
                start: 15
                end: 62
        content: crypto.createHash("sha1").update(user.password)
      parent_line_number: 5
      snippet: crypto.createHash("sha1").update(user.password)
      fingerprint: 3d1a07c8b1dd26c04fc9b527f0319cd1_1
      old_fingerprint: 7274d4919c048c467c6f6c4fb38df749_1
    - rule:
        cwe_ids:
            - "327"
            - "328"
        id: javascript_lang_weak_password_hash_sha1
        title: Weak hashing library (SHA1) used for password detected.
        description: |
            ## Description

            A weak hashing library can lead to data breaches and greater security risk.

            ## Remediations

            ✅ Use a recommended hashing library such as Argon2id for passwords

            ```javascript
              const argon2 = require("argon2");

              const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })
            ```

            ## Resources
            - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_sha1
      line_number: 7
      full_filename: /tmp/scan/sha1_password.js
      filename: .
      data_type:
        category_uuid: dd88aee5-9d40-4ad2-8983-0c791ddec47c
        name: Passwords
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 7
            end: 7
            column:
                start: 19
                end: 32
      sink:
        location:
            start: 7
            end: 7
            column:
                start: 1
                end: 40
        content: CryptoJS.HmacSHA1(user.password, "Key")
      parent_line_number: 7
      snippet: CryptoJS.HmacSHA1(user.password, "Key")
      fingerprint: 3d1a07c8b1dd26c04fc9b527f0319cd1_2
      old_fingerprint: 7274d4919c048c467c6f6c4fb38df749_2
    - rule:
        cwe_ids:
            - "327"
            - "328"
        id: javascript_lang_weak_password_hash_sha1
        title: Weak hashing library (SHA1) used for password detected.
        description: |
            ## Description

            A weak hashing library can lead to data breaches and greater security risk.

            ## Remediations

            ✅ Use a recommended hashing library such as Argon2id for passwords

            ```javascript
              const argon2 = require("argon2");

              const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })
            ```

            ## Resources
            - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_sha1
      line_number: 8
      full_filename: /tmp/scan/sha1_password.js
      filename: .
      data_type:
        category_uuid: dd88aee5-9d40-4ad2-8983-0c791ddec47c
        name: Passwords
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 8
            end: 8
            column:
                start: 15
                end: 28
      sink:
        location:
            start: 8
            end: 8
            column:
                start: 1
                end: 29
        content: CryptoJS.SHA1(user.password)
      parent_line_number: 8
      snippet: CryptoJS.SHA1(user.password)
      fingerprint: 3d1a07c8b1dd26c04fc9b527f0319cd1_3
      old_fingerprint: 7274d4919c048c467c6f6c4fb38df749_3

