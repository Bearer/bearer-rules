high:
    - rule:
        cwe_ids:
            - "327"
        id: javascript_lang_weak_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Sensitive data should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing data.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_encryption
      line_number: 5
      full_filename: /tmp/scan/sha1.js
      filename: .
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 5
            end: 5
            column:
                start: 55
                end: 65
      sink:
        location:
            start: 5
            end: 5
            column:
                start: 17
                end: 66
        content: crypto.createHmac("sha1", key).update(user.email)
      parent_line_number: 5
      snippet: crypto.createHmac("sha1", key).update(user.email)
      fingerprint: 05decf30fc70859705b7ca59c5dbe388_0
      old_fingerprint: f94e14db7fe2103eac84f3304d8ce40d_0
    - rule:
        cwe_ids:
            - "327"
        id: javascript_lang_weak_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Sensitive data should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing data.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_encryption
      line_number: 6
      full_filename: /tmp/scan/sha1.js
      filename: .
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 6
            end: 6
            column:
                start: 48
                end: 58
      sink:
        location:
            start: 6
            end: 6
            column:
                start: 15
                end: 59
        content: crypto.createHash("sha1").update(user.email)
      parent_line_number: 6
      snippet: crypto.createHash("sha1").update(user.email)
      fingerprint: 05decf30fc70859705b7ca59c5dbe388_1
      old_fingerprint: f94e14db7fe2103eac84f3304d8ce40d_1
    - rule:
        cwe_ids:
            - "327"
        id: javascript_lang_weak_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Sensitive data should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing data.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_encryption
      line_number: 8
      full_filename: /tmp/scan/sha1.js
      filename: .
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 8
            end: 8
            column:
                start: 19
                end: 29
      sink:
        location:
            start: 8
            end: 8
            column:
                start: 1
                end: 37
        content: CryptoJS.HmacSHA1(user.email, "Key")
      parent_line_number: 8
      snippet: CryptoJS.HmacSHA1(user.email, "Key")
      fingerprint: 05decf30fc70859705b7ca59c5dbe388_2
      old_fingerprint: f94e14db7fe2103eac84f3304d8ce40d_2
    - rule:
        cwe_ids:
            - "327"
        id: javascript_lang_weak_encryption
        title: Weak encryption library usage detected.
        description: |
            ## Description

            Sensitive data should be encrypted with strong encryption algorithms like aes-256-cbc

            ## Remediations

            According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefore shouldn't be used.

            ✅ Use stronger encryption algorithms when storing data.

            ```javascript
            const crypto = require("crypto");

            const key = "secret key";
            const encrypted = crypto.createHmac("es-256-cbc", key).update(user.password);
            ```

            ## Resources
            - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html#cryptocreatehmacalgorithm-key-options)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_encryption
      line_number: 9
      full_filename: /tmp/scan/sha1.js
      filename: .
      category_groups:
        - PII
        - Personal Data
      source:
        location:
            start: 9
            end: 9
            column:
                start: 15
                end: 25
      sink:
        location:
            start: 9
            end: 9
            column:
                start: 1
                end: 26
        content: CryptoJS.SHA1(user.email)
      parent_line_number: 9
      snippet: CryptoJS.SHA1(user.email)
      fingerprint: 05decf30fc70859705b7ca59c5dbe388_3
      old_fingerprint: f94e14db7fe2103eac84f3304d8ce40d_3

