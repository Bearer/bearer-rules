patterns:
  - pattern: |
      { $<KEY>: $<STRING_LITERAL> }
    filters:
      - variable: KEY
        values:
          - clientSecret
          - secretOrKey
          - consumerSecret
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
  - pattern: |
      $<_>.$<KEY> = $<STRING_LITERAL>
    filters:
      - variable: KEY
        values:
          - clientSecret
          - secretOrKey
          - consumerSecret
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
  - pattern: crypto.$<METHOD>($<_>, $<STRING_LITERAL>$<...>)
    filters:
      - variable: METHOD
        values:
          - createCipher
          - createDecipher
          - createCipheriv
          - createDecipheriv
          - createHmac
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
  - pattern: crypto.createSecretKey($<STRING_LITERAL>$<...>)
    filters:
      - variable: STRING_LITERAL
        detection: string_literal
        contains: false
  - pattern: crypto.$<METHOD>($<CRYPTO_PRIVATE_KEY>$<...>)
    filters:
      - variable: METHOD
        values:
          - createPrivateKey
          - privateDecrypt
          - privateEncrypt
      - variable: CRYPTO_PRIVATE_KEY
        detection: javascript_lang_hardcoded_secret_crypto_private_key
        contains: false
  - pattern: $<SIGN>.sign($<CRYPTO_PRIVATE_KEY>$<...>)
    filters:
      - variable: SIGN
        detection: javascript_lang_hardcoded_secret_crypto_sign
      - variable: CRYPTO_PRIVATE_KEY
        detection: javascript_lang_hardcoded_secret_crypto_private_key
        contains: false
auxiliary:
  - id: javascript_lang_hardcoded_secret_crypto_sign
    patterns:
      - pattern: crypto.createSign()
  - id: javascript_lang_hardcoded_secret_crypto_private_key
    patterns:
      - pattern: $<STRING_LITERAL>
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            contains: false
      - pattern: |
          { key: $<STRING_LITERAL>}
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            contains: false
      - pattern: |
          { passphrase: $<STRING_LITERAL>}
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            contains: false
languages:
  - javascript
severity: high
metadata:
  description: "Hardcoded secret detected"
  remediation_message: |
    ## Description

    Code is not a safe place to store secrets, use environment variables instead.

    ## Remediations
    ```javascript
      passport.use(new OAuth2Strategy({
          authorizationURL: 'https://www.example.com/oauth2/authorize',
          tokenURL: 'https://www.example.com/oauth2/token',
          clientID:  process.env.CLIENT_ID,
          clientSecret: process.env.CLIENT_SECRET,
          callbackURL: "http://localhost:3000/auth/example/callback"
        },
        function(accessToken, refreshToken, profile, cb) {
          User.findOrCreate({ exampleId: profile.id }, function (err, user) {
            return cb(err, user);
          });
        }
      ));
    ```

    ## Resources
    - [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)

  cwe_id:
    - 798
  id: javascript_lang_hardcoded_secret
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret
