languages:
  - javascript
patterns:
  - pattern: $<STRING>
    filters:
      - variable: STRING
        string_regex: <\w+(\s[^>]*)?>
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: $<LIB>.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: LIB
        regex: \A(?i)dot\z
      - variable: METHOD
        values:
          - compile
          - template
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: ejs.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: METHOD
        values:
          - compile
          - render
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: Handlebars.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: METHOD
        values:
          - compile
          - precompile
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: Hogan.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: METHOD
        values:
          - compile
          - parse
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: $<OBJECT>.templates($<STRING>$<...>)
    filters:
      - variable: OBJECT
        values:
          - $
          - jsrender
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  # lodash
  - pattern: template($<STRING>$<...>)
    filters:
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  # lodash or underscore
  - pattern: $<LIB>.template($<STRING>$<...>)
    filters:
      - variable: LIB
        values:
          - _
          - lodash
          - underscore
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  # marko
  - pattern: compiler.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: METHOD
        values:
          - compile
          - compileSync
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: Mustache.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: METHOD
        values:
          - parse
          - render
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: nunjucks.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: METHOD
        values:
          - renderString
          - compile
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: pug.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: METHOD
        values:
          - render
          - compile
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: Sqrl.$<METHOD>($<STRING>$<...>)
    filters:
      - variable: METHOD
        values:
          - render
          - compile
          - parse
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: Template7.compile($<STRING>$<...>)
    filters:
      - variable: STRING
        detection: javascript_lang_raw_html_using_user_input_user_input
  - pattern: webix.ui($<TEMPLATE>)
    filters:
      - variable: TEMPLATE
        detection: javascript_lang_raw_html_using_user_input_webix_template
auxiliary:
  - id: javascript_lang_raw_html_using_user_input_user_input
    sanitizer: javascript_lang_raw_html_using_user_input_sanitized
    patterns:
      # Express
      - req.params
      - req.query
      - req.body
      - req.cookies
      - req.headers
      # AWS
      - async function ($<!>event, $<_>) {}
      - async ($<!>event, $<_>) => {}
  - id: javascript_lang_raw_html_using_user_input_sanitized
    patterns:
      - pattern: sanitizeHtml($<!>$<_>$<...>)
  - id: javascript_lang_raw_html_using_user_input_webix_template
    patterns:
      - pattern: |
          { template: $<STRING> }
        filters:
          - variable: STRING
            detection: javascript_lang_raw_html_using_user_input_user_input
severity: high
metadata:
  description: "Unsanitized user input detected in raw HTML string."
  remediation_message: |
    ## Description

    Applications should not include unsanitized user input in HTML. This
    can allow cross-site scripting (XSS) attacks.

    ## Remediations

    ❌ Avoid including user input directly in HTML strings:

    ```javascript
    const html = `<h1>${req.params.title}</h1>`
    ```

    ✅ Use a framework or templating language to construct the HTML.

    ✅ When HTML strings must be used, sanitize user input:

    ```javascript
    import sanitizeHtml from 'sanitize-html'

    const sanitizedTitle = sanitizeHtml(req.params.title)
    const html = `<h1>${sanitizedTitle}</h1>`
    ```

    ## Resources
    - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 79
  id: javascript_lang_raw_html_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input
