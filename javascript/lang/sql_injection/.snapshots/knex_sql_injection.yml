high:
    - rule:
        cwe_ids:
            - "89"
        id: javascript_lang_sql_injection
        title: SQL injection vulnerability detected.
        description: |
            ## Description
            Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input

            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query("SELECT * FROM users WHERE ID = " + req.params.userId);
            ```

            Instead, consider the following approaches when writing SQL queries

            ✅ Validate query input wherever possible

            ```javascript
              var rawId = req.params.userId
              if !(/[0-9]+/.test(rawId)) {
                // input is unexpected; don't make the query
              }
            ```

            ✅ Use prepared (or parameterized) statements when querying

            Sequelize example -
            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query(
                "SELECT * FROM users WHERE ID = ?",
                { replacements: [req.params.userId] },
                type: sequelize.QueryTypes.SELECT
              )
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_sql_injection
      line_number: 6
      full_filename: /tmp/scan/knex_sql_injection.js
      filename: .
      source:
        location:
            start: 6
            end: 9
            column:
                start: 20
                end: 45
        content: |-
            knex
            		.select("user.cart_details")
            		.from("users")
            		.whereRaw("name = " + req.query.user.name)
      sink:
        location:
            start: 6
            end: 9
            column:
                start: 20
                end: 45
      parent_line_number: 6
      snippet: |-
        knex
        		.select("user.cart_details")
        		.from("users")
        		.whereRaw("name = " + req.query.user.name)
      fingerprint: e729d82176c9ebea695fa6b6a606960b_0
      old_fingerprint: 66f51c021a5dbacdc68f5848887e8518_0
    - rule:
        cwe_ids:
            - "89"
        id: javascript_lang_sql_injection
        title: SQL injection vulnerability detected.
        description: |
            ## Description
            Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input

            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query("SELECT * FROM users WHERE ID = " + req.params.userId);
            ```

            Instead, consider the following approaches when writing SQL queries

            ✅ Validate query input wherever possible

            ```javascript
              var rawId = req.params.userId
              if !(/[0-9]+/.test(rawId)) {
                // input is unexpected; don't make the query
              }
            ```

            ✅ Use prepared (or parameterized) statements when querying

            Sequelize example -
            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query(
                "SELECT * FROM users WHERE ID = ?",
                { replacements: [req.params.userId] },
                type: sequelize.QueryTypes.SELECT
              )
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_sql_injection
      line_number: 15
      full_filename: /tmp/scan/knex_sql_injection.js
      filename: .
      source:
        location:
            start: 15
            end: 17
            column:
                start: 20
                end: 41
        content: |-
            knex.select('user.cart_details')
            		.from('users')
            		.whereRaw('name = ' + event.user.name)
      sink:
        location:
            start: 15
            end: 17
            column:
                start: 20
                end: 41
      parent_line_number: 15
      snippet: |-
        knex.select('user.cart_details')
        		.from('users')
        		.whereRaw('name = ' + event.user.name)
      fingerprint: e729d82176c9ebea695fa6b6a606960b_1
      old_fingerprint: 66f51c021a5dbacdc68f5848887e8518_1

