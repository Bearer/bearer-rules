high:
    - rule:
        cwe_ids:
            - "89"
        id: javascript_lang_sql_injection
        title: SQL injection vulnerability detected.
        description: |
            ## Description
            Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input

            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query("SELECT * FROM users WHERE ID = " + req.params.userId);
            ```

            Instead, consider the following approaches when writing SQL queries

            ✅ Validate query input wherever possible

            ```javascript
              var rawId = req.params.userId
              if !(/[0-9]+/.test(rawId)) {
                // input is unexpected; don't make the query
              }
            ```

            ✅ Use prepared (or parameterized) statements when querying

            Sequelize example -
            ```javascript
              var sqlite = new Sequelize("sqlite::memory:");
              sqlite.query(
                "SELECT * FROM users WHERE ID = ?",
                { replacements: [req.params.userId] },
                type: sequelize.QueryTypes.SELECT
              )
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_sql_injection
      line_number: 4
      full_filename: /tmp/scan/sql_injection_juice.js
      filename: .
      source:
        location:
            start: 4
            end: 12
            column:
                start: 7
                end: 10
        content: |-
            models.sequelize
                    .query(
                      `SELECT * FROM Users WHERE email = '${
                        req.body.email || ""
                      }' AND password = '${security.hash(
                        req.body.password || ""
                      )}' AND deletedAt IS NULL`,
                      { model: UserModel, plain: true }
                    )
      sink:
        location:
            start: 4
            end: 12
            column:
                start: 7
                end: 10
      parent_line_number: 4
      snippet: |-
        models.sequelize
                .query(
                  `SELECT * FROM Users WHERE email = '${
                    req.body.email || ""
                  }' AND password = '${security.hash(
                    req.body.password || ""
                  )}' AND deletedAt IS NULL`,
                  { model: UserModel, plain: true }
                )
      fingerprint: e729d82176c9ebea695fa6b6a606960b_0
      old_fingerprint: 57106912d3163c7f7645355f3acf8615_0

