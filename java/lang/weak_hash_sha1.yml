imports:
  - java_shared_lang_message_digest_sha1_init
patterns:
  - pattern: |
      $<MESSAGE_DIGEST_SHA1_INIT>.update($<DATA_TYPE>)
    filters:
      - variable: MESSAGE_DIGEST_SHA1_INIT
        detection: java_shared_lang_message_digest_sha1_init
      - variable: DATA_TYPE
        detection: datatype
        scope: result
  - pattern: |
      $<MESSAGE_DIGEST_SHA1_INIT>.update()
    filters:
      - variable: MESSAGE_DIGEST_SHA1_INIT
        detection: java_shared_lang_message_digest_sha1_init
languages:
  - java
skip_data_types:
  - "Unique Identifier"
  - Passwords # see java_lang_weak_password_hash_sha1
metadata:
  description: "Weak hashing library (SHA-1) detected"
  remediation_message: |
    ## Description

    A weak hashing library can lead to data breaches and greater security risk.

    ## Remediations

    According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.

    ❌ Avoid libraries and algorithms with known weaknesses:

    ```java
      MessageDigest md = MessageDigest.getInstance("SHA-1");
    ```

    ✅ Use stronger encryption algorithms when storing data.

    ```java
      MessageDigest md = MessageDigest.getInstance("SHA-256");
    ```

    ## Resources
    - [Java MessageDigest class](https://docs.oracle.com/javase/8/docs/api/java/security/MessageDigest.html)
  cwe_id:
    - 327
  id: java_lang_weak_hash_sha1
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1
