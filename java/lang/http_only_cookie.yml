imports:
  - java_shared_lang_instance
patterns:
  - pattern: $<COOKIE>.setHttpOnly()
    filters:
      - variable: COOKIE
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(javax\.servlet\.http\.)?Cookie\z
trigger:
  match_on: absence
  required_detection: java_lang_http_only_cookie_init
auxiliary:
  - id: java_lang_http_only_cookie_init
    patterns:
      - pattern: new $<JAVA_LANG_HTTP_ONLY_COOKIE_TYPE>();
        filters:
          - variable: JAVA_LANG_HTTP_ONLY_COOKIE_TYPE
            regex: \A(javax\.servlet\.http\.)?Cookie\z
      - pattern: $<...>$<JAVA_LANG_HTTP_ONLY_COOKIE_TYPE> $<_> = $<_>;
        filters:
          - variable: JAVA_LANG_HTTP_ONLY_COOKIE_TYPE
            regex: \A(javax\.servlet\.http\.)?Cookie\z
languages:
  - java
metadata:
  description: "Missing secure options for cookie detected."
  remediation_message: |
    ## Description

    The `HttpOnly` attribute when set to `true` protects the cookie value from being accessed by client side JavaScript such as reading the `document.cookie` values. By enabling this protection, a website that is
    vulnerable to Cross-Site Scripting (XSS) will be able to block malicious scripts from accessing the cookie value from JavaScript.

    ## Remediations

    âœ… Set `setHttpOnly` to `true`

    ```java
    cookie.setHttpOnly(true);
    ```
  cwe_id:
    - 614
  id: java_lang_http_only_cookie
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_http_only_cookie
