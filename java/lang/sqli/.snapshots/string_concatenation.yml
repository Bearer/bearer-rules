low:
    - rule:
        cwe_ids:
            - "89"
        id: java_lang_sqli
        title: Unsanitized user input in SQL query detected.
        description: |
            ## Description

            Including unsanitized data, such as user input or request data, in raw SQL
            queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input:

            ```java
              Statement stmt = conn.createStatement();
              ResultSet rs = stmt.executeQuery("select name from users where id='"+ uri.getQueryParameter("user_id") "'")) {
            ```

            ✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead

            ```java
            myStmt = myCon.prepareStatement("select * from students where age > ? and name = ?");
            myStmt.setInt(1, uri.getQueryParameter("age"));
            myStmt.setString(2, uri.getQueryParameter("name"));
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_sqli
      line_number: 16
      full_filename: /tmp/scan/string_concatenation.java
      filename: .
      source:
        location:
            start: 16
            end: 16
            column:
                start: 25
                end: 52
      sink:
        location:
            start: 16
            end: 16
            column:
                start: 25
                end: 52
        content: stmt.executeQuery(sqlQuery)
      parent_line_number: 16
      snippet: stmt.executeQuery(sqlQuery)
      fingerprint: 79d5d495c5c408c582b32582f1ae9171_0
      old_fingerprint: 8561d23bebc1cce1822c6a6f141f54cc_0
    - rule:
        cwe_ids:
            - "89"
        id: java_lang_sqli
        title: Unsanitized user input in SQL query detected.
        description: |
            ## Description

            Including unsanitized data, such as user input or request data, in raw SQL
            queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input:

            ```java
              Statement stmt = conn.createStatement();
              ResultSet rs = stmt.executeQuery("select name from users where id='"+ uri.getQueryParameter("user_id") "'")) {
            ```

            ✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead

            ```java
            myStmt = myCon.prepareStatement("select * from students where age > ? and name = ?");
            myStmt.setInt(1, uri.getQueryParameter("age"));
            myStmt.setString(2, uri.getQueryParameter("name"));
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_sqli
      line_number: 23
      full_filename: /tmp/scan/string_concatenation.java
      filename: .
      source:
        location:
            start: 23
            end: 23
            column:
                start: 10
                end: 45
      sink:
        location:
            start: 23
            end: 23
            column:
                start: 10
                end: 45
        content: conn.prepareStatement(sqlQuery, 42)
      parent_line_number: 23
      snippet: conn.prepareStatement(sqlQuery, 42)
      fingerprint: 79d5d495c5c408c582b32582f1ae9171_1
      old_fingerprint: 8561d23bebc1cce1822c6a6f141f54cc_1
    - rule:
        cwe_ids:
            - "89"
        id: java_lang_sqli
        title: Unsanitized user input in SQL query detected.
        description: |
            ## Description

            Including unsanitized data, such as user input or request data, in raw SQL
            queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input:

            ```java
              Statement stmt = conn.createStatement();
              ResultSet rs = stmt.executeQuery("select name from users where id='"+ uri.getQueryParameter("user_id") "'")) {
            ```

            ✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead

            ```java
            myStmt = myCon.prepareStatement("select * from students where age > ? and name = ?");
            myStmt.setInt(1, uri.getQueryParameter("age"));
            myStmt.setString(2, uri.getQueryParameter("name"));
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_sqli
      line_number: 29
      full_filename: /tmp/scan/string_concatenation.java
      filename: .
      source:
        location:
            start: 29
            end: 29
            column:
                start: 7
                end: 54
      sink:
        location:
            start: 29
            end: 29
            column:
                start: 7
                end: 54
        content: emf.createEntityManager().createQuery(sqlQuery)
      parent_line_number: 29
      snippet: emf.createEntityManager().createQuery(sqlQuery)
      fingerprint: 79d5d495c5c408c582b32582f1ae9171_2
      old_fingerprint: 8561d23bebc1cce1822c6a6f141f54cc_2
    - rule:
        cwe_ids:
            - "89"
        id: java_lang_sqli
        title: Unsanitized user input in SQL query detected.
        description: |
            ## Description

            Including unsanitized data, such as user input or request data, in raw SQL
            queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input:

            ```java
              Statement stmt = conn.createStatement();
              ResultSet rs = stmt.executeQuery("select name from users where id='"+ uri.getQueryParameter("user_id") "'")) {
            ```

            ✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead

            ```java
            myStmt = myCon.prepareStatement("select * from students where age > ? and name = ?");
            myStmt.setInt(1, uri.getQueryParameter("age"));
            myStmt.setString(2, uri.getQueryParameter("name"));
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_sqli
      line_number: 33
      full_filename: /tmp/scan/string_concatenation.java
      filename: .
      source:
        location:
            start: 33
            end: 33
            column:
                start: 7
                end: 40
      sink:
        location:
            start: 33
            end: 33
            column:
                start: 7
                end: 40
        content: x.prepareStatement("select " + y)
      parent_line_number: 33
      snippet: x.prepareStatement("select " + y)
      fingerprint: 79d5d495c5c408c582b32582f1ae9171_3
      old_fingerprint: 8561d23bebc1cce1822c6a6f141f54cc_3
    - rule:
        cwe_ids:
            - "89"
        id: java_lang_sqli
        title: Unsanitized user input in SQL query detected.
        description: |
            ## Description

            Including unsanitized data, such as user input or request data, in raw SQL
            queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input:

            ```java
              Statement stmt = conn.createStatement();
              ResultSet rs = stmt.executeQuery("select name from users where id='"+ uri.getQueryParameter("user_id") "'")) {
            ```

            ✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead

            ```java
            myStmt = myCon.prepareStatement("select * from students where age > ? and name = ?");
            myStmt.setInt(1, uri.getQueryParameter("age"));
            myStmt.setString(2, uri.getQueryParameter("name"));
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_sqli
      line_number: 37
      full_filename: /tmp/scan/string_concatenation.java
      filename: .
      source:
        location:
            start: 37
            end: 37
            column:
                start: 7
                end: 36
      sink:
        location:
            start: 37
            end: 37
            column:
                start: 7
                end: 36
        content: x.executeQuery("select " + y)
      parent_line_number: 37
      snippet: x.executeQuery("select " + y)
      fingerprint: 79d5d495c5c408c582b32582f1ae9171_4
      old_fingerprint: 8561d23bebc1cce1822c6a6f141f54cc_4
    - rule:
        cwe_ids:
            - "89"
        id: java_lang_sqli
        title: Unsanitized user input in SQL query detected.
        description: |
            ## Description

            Including unsanitized data, such as user input or request data, in raw SQL
            queries makes your application vulnerable to SQL injection attacks.

            ## Remediations

            ❌ Avoid raw queries, especially those that contain unsanitized user input:

            ```java
              Statement stmt = conn.createStatement();
              ResultSet rs = stmt.executeQuery("select name from users where id='"+ uri.getQueryParameter("user_id") "'")) {
            ```

            ✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead

            ```java
            myStmt = myCon.prepareStatement("select * from students where age > ? and name = ?");
            myStmt.setInt(1, uri.getQueryParameter("age"));
            myStmt.setString(2, uri.getQueryParameter("name"));
            ```

            ## Resources
            - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
            - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_sqli
      line_number: 41
      full_filename: /tmp/scan/string_concatenation.java
      filename: .
      source:
        location:
            start: 41
            end: 41
            column:
                start: 7
                end: 35
      sink:
        location:
            start: 41
            end: 41
            column:
                start: 7
                end: 35
        content: x.createQuery("select " + y)
      parent_line_number: 41
      snippet: x.createQuery("select " + y)
      fingerprint: 79d5d495c5c408c582b32582f1ae9171_5
      old_fingerprint: 8561d23bebc1cce1822c6a6f141f54cc_5

