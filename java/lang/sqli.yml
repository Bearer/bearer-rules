imports:
  - java_shared_lang_instance
patterns:
  - pattern: |
      $<CONNECTION>.$<METHOD>($<DYNAMIC_INPUT_LITERAL>$<...>);
    filters:
      - variable: CONNECTION
        detection: java_lang_sqli_connection
        scope: cursor
      - variable: METHOD
        values:
          - nativeSQL
          - prepareCall
          - prepareStatement
      - variable: DYNAMIC_INPUT_LITERAL
        detection: java_lang_sqli_dynamic_input
        scope: result
  - pattern: |
      $<STATEMENT>.$<METHOD>($<DYNAMIC_INPUT_LITERAL>$<...>);
    filters:
      - variable: STATEMENT
        detection: java_lang_sqli_statement
        scope: cursor
      - variable: METHOD
        values:
          - addBatch
          - execute
          - executeLargeUpdate
          - executeQuery
          - executeUpdate
      - variable: DYNAMIC_INPUT_LITERAL
        detection: java_lang_sqli_dynamic_input
        scope: result
  - pattern: |
      $<ENTITY_MANAGER>.$<METHOD>($<DYNAMIC_INPUT_LITERAL>$<...>);
    filters:
      - variable: ENTITY_MANAGER
        detection: java_lang_sqli_entity_manager
        scope: cursor
      - variable: METHOD
        values:
          - createNativeQuery
          - createQuery
      - variable: DYNAMIC_INPUT_LITERAL
        detection: java_lang_sqli_dynamic_input
        scope: result
auxiliary:
  - id: java_lang_sqli_connection
    patterns:
      - pattern: $<CONNECTION_INSTANCE>;
        filters:
          - variable: CONNECTION_INSTANCE
            detection: java_shared_lang_instance
            scope: cursor
            filters:
              - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
                regex: \A(java\.sql\.)?Connection\z
      - $<_>.getConnection();
      # fallback
      - con;
      - conn;
      - connection;
  - id: java_lang_sqli_statement
    patterns:
      - pattern: $<STATEMENT_INSTANCE>;
        filters:
          - variable: STATEMENT_INSTANCE
            detection: java_shared_lang_instance
            scope: cursor
            filters:
              - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
                regex: \A(java\.sql\.)?Statement\z
      - $<_>.createStatement();
      # fallback
      - stmt;
      - statement;
  - id: java_lang_sqli_entity_manager
    patterns:
      - pattern: $<ENTITY_INSTANCE>;
        filters:
          - variable: ENTITY_INSTANCE
            detection: java_shared_lang_instance
            scope: cursor
            filters:
              - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
                regex: \A(javax\.persistence\.)?EntityManager\z
      - $<_>.createEntityManager();
      # fallback
      - em;
      - entityManager;
  - id: java_lang_sqli_dynamic_input
    patterns:
      - pattern: |
          $<STRING_LITERAL> + $<DYNAMIC_INPUT>
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            scope: cursor
          - not:
              variable: DYNAMIC_INPUT
              detection: string_literal
              scope: cursor
languages:
  - java
trigger:
  match_on: presence
metadata:
  description: "Unsanitized user input in SQL query detected."
  remediation_message: |
    ## Description

    Including unsanitized data, such as user input or request data, in raw SQL
    queries makes your application vulnerable to SQL injection attacks.

    ## Remediations

    ❌ Avoid raw queries, especially those that contain unsanitized user input:

    ```java
      Statement stmt = conn.createStatement();
      ResultSet rs = stmt.executeQuery("select name from users where id='"+ uri.getQueryParameter("user_id") "'")) {
    ```

    ✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead

    ```java
    myStmt = myCon.prepareStatement("select * from students where age > ? and name = ?");
    myStmt.setInt(1, uri.getQueryParameter("age"));
    myStmt.setString(2, uri.getQueryParameter("name"));
    ```

    ## Resources
    - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
    - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 89
  id: "java_lang_sqli"
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_sqli
