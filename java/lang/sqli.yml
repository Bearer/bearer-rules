patterns:
  - pattern: |
      $<_>.$<METHOD>($<DYNAMIC_INPUT_LITERAL>)
    filters:
      - variable: METHOD
        values:
          - execute
          - executeQuery
          - prepareStatement
      - variable: DYNAMIC_INPUT_LITERAL
        detection: java_lang_sqli_dynamic_input
auxiliary:
  - id: java_lang_sqli_dynamic_input
    patterns:
      - pattern: |
          $<STRING_LITERAL> + $<DYNAMIC_INPUT>
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            contains: false
          - not:
              variable: DYNAMIC_INPUT
              detection: string_literal
              contains: false
languages:
  - java
trigger:
  match_on: presence
metadata:
  description: "Unsanitized user input in SQL query detected."
  remediation_message: |
    ## Description

    Including unsanitized data, such as user input or request data, in raw SQL
    queries makes your application vulnerable to SQL injection attacks.

    ## Remediations

    ❌ Avoid raw queries, especially those that contain unsanitized user input:

    ```java
      Statement stmt = conn.createStatement();
      ResultSet rs = stmt.executeQuery("select name from users where id='"+ uri.getQueryParameter("user_id") "'")) {
    ```


    ✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead

    ```java
    myStmt = myCon.prepareStatement("select * from students where age > ? and name = ?");
    myStmt.setInt(1, uri.getQueryParameter("age"));     
    myStmt.setString(2, uri.getQueryParameter("name"));  
    ```

    ## Resources
    - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
    - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 89
  id: "java_lang_sqli"
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_sqli
