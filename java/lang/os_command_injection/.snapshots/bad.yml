high:
    - rule:
        cwe_ids:
            - "78"
        id: java_lang_os_command_injection
        title: Command injection vulnerability detected.
        description: |
            ## Description

            Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

            ## Remediations

            ❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.

            ✅ For dynamic input, rely on hardcoded values wherever possible

            ```java
              String filePattern = "*.json";
              if request.getParameter("format") == "xml" {
                filePattern = "*.xml"
              }

              Process process = Runtime.getRuntime().exec("ls /myDir/" + extension);
            ```

            ## Resources
            - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_os_command_injection
      line_number: 10
      full_filename: /tmp/scan/bad.java
      filename: .
      source:
        location:
            start: 10
            end: 10
            column:
                start: 9
                end: 37
      sink:
        location:
            start: 10
            end: 10
            column:
                start: 9
                end: 37
        content: r.exec("sh -c echo " + name)
      parent_line_number: 10
      snippet: r.exec("sh -c echo " + name)
      fingerprint: 5665fcfd14328e5c667ee31b32dffafd_0
      old_fingerprint: 7e4b1ce7b805b5c1a2f3ef718e484741_0
    - rule:
        cwe_ids:
            - "78"
        id: java_lang_os_command_injection
        title: Command injection vulnerability detected.
        description: |
            ## Description

            Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

            ## Remediations

            ❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.

            ✅ For dynamic input, rely on hardcoded values wherever possible

            ```java
              String filePattern = "*.json";
              if request.getParameter("format") == "xml" {
                filePattern = "*.xml"
              }

              Process process = Runtime.getRuntime().exec("ls /myDir/" + extension);
            ```

            ## Resources
            - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_os_command_injection
      line_number: 12
      full_filename: /tmp/scan/bad.java
      filename: .
      source:
        location:
            start: 12
            end: 12
            column:
                start: 9
                end: 56
      sink:
        location:
            start: 12
            end: 12
            column:
                start: 9
                end: 56
        content: Runtime.getRuntime().exec("sh -c echo " + name)
      parent_line_number: 12
      snippet: Runtime.getRuntime().exec("sh -c echo " + name)
      fingerprint: 5665fcfd14328e5c667ee31b32dffafd_1
      old_fingerprint: 7e4b1ce7b805b5c1a2f3ef718e484741_1
    - rule:
        cwe_ids:
            - "78"
        id: java_lang_os_command_injection
        title: Command injection vulnerability detected.
        description: |
            ## Description

            Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

            ## Remediations

            ❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.

            ✅ For dynamic input, rely on hardcoded values wherever possible

            ```java
              String filePattern = "*.json";
              if request.getParameter("format") == "xml" {
                filePattern = "*.xml"
              }

              Process process = Runtime.getRuntime().exec("ls /myDir/" + extension);
            ```

            ## Resources
            - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_os_command_injection
      line_number: 18
      full_filename: /tmp/scan/bad.java
      filename: .
      source:
        location:
            start: 18
            end: 18
            column:
                start: 29
                end: 69
      sink:
        location:
            start: 18
            end: 18
            column:
                start: 29
                end: 69
        content: new ProcessBuilder("sh -c echo " + name)
      parent_line_number: 18
      snippet: new ProcessBuilder("sh -c echo " + name)
      fingerprint: 5665fcfd14328e5c667ee31b32dffafd_2
      old_fingerprint: 7e4b1ce7b805b5c1a2f3ef718e484741_2

