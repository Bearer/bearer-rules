patterns:
  - pattern: |
      try {
        $<...>
      } catch($<EXCEPTION> $<EXCEPTION_VAR:identifier>) {
        $<!>$<EXCEPTION_VAR>.printStackTrace();
      }
    filters:
      - either:
          - variable: EXCEPTION
            values:
              - Throwable
              - Exception
              - Error
              - OutOfMemoryError
              - StackOverflowError
          - variable: EXCEPTION
            regex: \A(java\.io\.)?FileNotFoundException\z
          - variable: EXCEPTION
            regex: \A(java\.sql\.)?SQLException\z
          - variable: EXCEPTION
            regex: \A(java\.net\.)?BindException\z
          - variable: EXCEPTION
            regex: \A(java\.util\.)?ConcurrentModificationException\z
          - variable: EXCEPTION
            regex: \A(javax\.naming\.)?InsufficientResourcesException\z
          - variable: EXCEPTION
            regex: \A(java\.util\.)?MissingResourceException\z
          - variable: EXCEPTION
            regex: \A(java\.util\.jar\.)?JarException\z
          - variable: EXCEPTION
            regex: \A(java\.security\.acl\.)?NotOwnerException\z
languages:
  - java
severity: warning
metadata:
  description: Possible information leakage detected.
  remediation_message: |
    ## Description

    Printing a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.

    ## Remediations

    ❌ Avoid printing the full stack trace

    ✅ Less is more! Only log the minimum required details in error messages

    ## Resources

    - [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)
  cwe_id:
    - 209
  id: java_lang_information_leakage
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_information_leakage
