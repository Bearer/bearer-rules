low:
    - rule:
        cwe_ids:
            - "90"
        id: java_lang_ldap_injection
        title: LDAP injection threat detected
        description: |
            ## Description
              Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.

            ## Remediations

            âœ… Sanitize LDAP query data

            ```java
              public class Cls extends HttpServlet
              {

                  public void handleRequest(HttpServletRequest request, HttpServletResponse response)
                  {
                      String userID = request.getParameter("userID");
                      String sanitizedUserID = sanitize(userID);

                      String filter = "(&(objectclass=person))(|(uid=" + sanitizedUserID + ")(street={0}))";
                      String base = "ou=users,ou=system";
                      Object[] filters = new Object[] {"First avenue"};
                      javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();

                      dirContext.search(base, filter, filters, sc);
                  }
              }
            ```

            ## References
            - [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/java_lang_ldap_injection
      line_number: 13
      filename: /Users/vjeranfistric/go/src/github.com/bearer/bearer-rules/java/lang/ldap_injection/testdata/ldap_injection.java
      parent_line_number: 13
      snippet: dirContext.search(base, filter, filters, sc)
      fingerprint: e14dfd92794d12b3d5c92e112960164b_0

