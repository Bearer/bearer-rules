imports:
  - java_shared_lang_instance
patterns:
  - pattern: |
      $<RANDOM>.$<METHOD>();
    filters:
      - variable: RANDOM
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(java\.util\.)?Random\z
      - not:
          variable: METHOD
          values:
            - setSeed
  - pattern: |
      $<CLASS>.$<_>();
    filters:
      - either:
          - variable: CLASS
            regex: \A(org\.apache\.commons\.lang\.)?RandomStringUtils\z
          - variable: CLASS
            regex: \A(org\.apache\.commons\.lang\.math\.)?RandomUtils\z
languages:
  - java
metadata:
  description: "Insufficiently random value detected."
  remediation_message: |
    ## Description

    Using predictable random values makes our application vulnerable to attacks,
    especially if these values are used for security purposes.

    ## Remediations

    âœ… Use a stronger library when generating random values

    ```java
    SecureRandom random = new SecureRandom();
    ```

    ## Resources
    - [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)
  cwe_id:
    - 330
  id: java_lang_insufficiently_random_values
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values
