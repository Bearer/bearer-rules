// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`java_lang_http_response_splitting bad 1`] = `
"{
  "warning": [
    {
      "cwe_ids": [
        "79",
        "113"
      ],
      "id": "java_lang_http_response_splitting",
      "title": "HTTP response splitting vulnerability detected.",
      "description": "## Description\\n\\nIncluding unsanitized user input in a HTTP response allows an attacker to\\nsplit the response by injecting CRLF characters. An entirely\\nattacker-controlled response can then be returned, creating a cross-site\\nscripting (XSS) vulnerability.\\n\\n## Remediations\\n\\n✅ Avoid using user input in cookies or other headers\\n\\n✅ Remove CRLF sequences from user input:\\n\\n\`\`\`java\\nvar input = request.getParameter(\\"data\\");\\nvar sanitized = input.replaceAll(\\"\\\\r\\\\n\\", \\"\\");\\ncookie.setValue(sanitized);\\n\`\`\`\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_http_response_splitting",
      "line_number": 4,
      "full_filename": "/tmp/bearer-scan/bad.java",
      "filename": ".",
      "source": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 5,
          "end": 28
        }
      },
      "sink": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 5,
          "end": 28
        },
        "content": "new Cookie(\\"oops\\", foo)"
      },
      "parent_line_number": 4,
      "snippet": "new Cookie(\\"oops\\", foo)",
      "fingerprint": "e717435722185b758fde0b9e5e989023_0",
      "old_fingerprint": "e877612fdf26a2fdb5bff3098e9989db_0"
    },
    {
      "cwe_ids": [
        "79",
        "113"
      ],
      "id": "java_lang_http_response_splitting",
      "title": "HTTP response splitting vulnerability detected.",
      "description": "## Description\\n\\nIncluding unsanitized user input in a HTTP response allows an attacker to\\nsplit the response by injecting CRLF characters. An entirely\\nattacker-controlled response can then be returned, creating a cross-site\\nscripting (XSS) vulnerability.\\n\\n## Remediations\\n\\n✅ Avoid using user input in cookies or other headers\\n\\n✅ Remove CRLF sequences from user input:\\n\\n\`\`\`java\\nvar input = request.getParameter(\\"data\\");\\nvar sanitized = input.replaceAll(\\"\\\\r\\\\n\\", \\"\\");\\ncookie.setValue(sanitized);\\n\`\`\`\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_http_response_splitting",
      "line_number": 8,
      "full_filename": "/tmp/bearer-scan/bad.java",
      "filename": ".",
      "source": {
        "start": 8,
        "end": 8,
        "column": {
          "start": 5,
          "end": 20
        }
      },
      "sink": {
        "start": 8,
        "end": 8,
        "column": {
          "start": 5,
          "end": 20
        },
        "content": "c.setValue(bar)"
      },
      "parent_line_number": 8,
      "snippet": "c.setValue(bar)",
      "fingerprint": "e717435722185b758fde0b9e5e989023_1",
      "old_fingerprint": "e877612fdf26a2fdb5bff3098e9989db_1"
    },
    {
      "cwe_ids": [
        "79",
        "113"
      ],
      "id": "java_lang_http_response_splitting",
      "title": "HTTP response splitting vulnerability detected.",
      "description": "## Description\\n\\nIncluding unsanitized user input in a HTTP response allows an attacker to\\nsplit the response by injecting CRLF characters. An entirely\\nattacker-controlled response can then be returned, creating a cross-site\\nscripting (XSS) vulnerability.\\n\\n## Remediations\\n\\n✅ Avoid using user input in cookies or other headers\\n\\n✅ Remove CRLF sequences from user input:\\n\\n\`\`\`java\\nvar input = request.getParameter(\\"data\\");\\nvar sanitized = input.replaceAll(\\"\\\\r\\\\n\\", \\"\\");\\ncookie.setValue(sanitized);\\n\`\`\`\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_http_response_splitting",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/bad.java",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 5,
          "end": 60
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 5,
          "end": 60
        },
        "content": "new Cookie(\\"oops3\\", foo.replaceAll(\\"\\\\r\\\\n\\", \\"oops\\\\r\\\\n\\"))"
      },
      "parent_line_number": 10,
      "snippet": "new Cookie(\\"oops3\\", foo.replaceAll(\\"\\\\r\\\\n\\", \\"oops\\\\r\\\\n\\"))",
      "fingerprint": "e717435722185b758fde0b9e5e989023_2",
      "old_fingerprint": "e877612fdf26a2fdb5bff3098e9989db_2"
    }
  ]
}"
`;

exports[`java_lang_http_response_splitting ok 1`] = `"{}"`;
