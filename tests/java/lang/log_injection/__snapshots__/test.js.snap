// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`java_lang_log_injection log_injection 1`] = `
"{
  "low": [
    {
      "cwe_ids": [
        "117"
      ],
      "id": "java_lang_log_injection",
      "title": "Log injection detected.",
      "description": "## Description\\nWriting invalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs. This rule looks for instances of user input sent to loggers.\\n## Remediations\\n❌ Avoid using unsanitized user input in logger messages:\\n\`\`\`java\\n String username = request.getParameter(\\"username\\");\\n log.warn(\\"Username is\\" + username);\\n\`\`\`\\n✅ If you need to identify a user, use their unique identifier instead of their personal identifiable information:\\n\`\`\`java\\n String username = sanitized(request.getParameter(\\"username\\"));\\n log.warn(\\"Username is\\" + username);\\n\`\`\`\\n## Resources\\n- [OWASP Log Injection] (https://owasp.org/www-community/attacks/Log_Injection)\\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger",
      "line_number": 17,
      "full_filename": "/tmp/bearer-scan/log_injection.java",
      "filename": ".",
      "source": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 13,
          "end": 71
        }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 13,
          "end": 71
        },
        "content": "log.info(\\"Username is\\" + request.getParameter(\\"username\\"))"
      },
      "parent_line_number": 17,
      "snippet": "log.info(\\"Username is\\" + request.getParameter(\\"username\\"))",
      "fingerprint": "729129102c16042b19d35640a9d9b661_0",
      "old_fingerprint": "a45c0a68b3af767b3565879508913c0d_0"
    },
    {
      "cwe_ids": [
        "117"
      ],
      "id": "java_lang_log_injection",
      "title": "Log injection detected.",
      "description": "## Description\\nWriting invalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs. This rule looks for instances of user input sent to loggers.\\n## Remediations\\n❌ Avoid using unsanitized user input in logger messages:\\n\`\`\`java\\n String username = request.getParameter(\\"username\\");\\n log.warn(\\"Username is\\" + username);\\n\`\`\`\\n✅ If you need to identify a user, use their unique identifier instead of their personal identifiable information:\\n\`\`\`java\\n String username = sanitized(request.getParameter(\\"username\\"));\\n log.warn(\\"Username is\\" + username);\\n\`\`\`\\n## Resources\\n- [OWASP Log Injection] (https://owasp.org/www-community/attacks/Log_Injection)\\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger",
      "line_number": 18,
      "full_filename": "/tmp/bearer-scan/log_injection.java",
      "filename": ".",
      "source": {
        "start": 18,
        "end": 18,
        "column": {
          "start": 13,
          "end": 47
        }
      },
      "sink": {
        "start": 18,
        "end": 18,
        "column": {
          "start": 13,
          "end": 47
        },
        "content": "log.warn(\\"Username is\\" + username)"
      },
      "parent_line_number": 18,
      "snippet": "log.warn(\\"Username is\\" + username)",
      "fingerprint": "729129102c16042b19d35640a9d9b661_1",
      "old_fingerprint": "a45c0a68b3af767b3565879508913c0d_1"
    },
    {
      "cwe_ids": [
        "117"
      ],
      "id": "java_lang_log_injection",
      "title": "Log injection detected.",
      "description": "## Description\\nWriting invalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs. This rule looks for instances of user input sent to loggers.\\n## Remediations\\n❌ Avoid using unsanitized user input in logger messages:\\n\`\`\`java\\n String username = request.getParameter(\\"username\\");\\n log.warn(\\"Username is\\" + username);\\n\`\`\`\\n✅ If you need to identify a user, use their unique identifier instead of their personal identifiable information:\\n\`\`\`java\\n String username = sanitized(request.getParameter(\\"username\\"));\\n log.warn(\\"Username is\\" + username);\\n\`\`\`\\n## Resources\\n- [OWASP Log Injection] (https://owasp.org/www-community/attacks/Log_Injection)\\n- [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_logger",
      "line_number": 19,
      "full_filename": "/tmp/bearer-scan/log_injection.java",
      "filename": ".",
      "source": {
        "start": 19,
        "end": 19,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 19,
        "end": 19,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "log.error(username)"
      },
      "parent_line_number": 19,
      "snippet": "log.error(username)",
      "fingerprint": "729129102c16042b19d35640a9d9b661_2",
      "old_fingerprint": "a45c0a68b3af767b3565879508913c0d_2"
    }
  ]
}"
`;
