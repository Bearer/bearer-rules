// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`java_spring_sqli bad 1`] = `
"{
  "low": [
    {
      "cwe_ids": [
        "89"
      ],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`java\\n  String query = \\"update user set name='\\"+uri.getQueryParameter(\\"name\\")+\\"' where id='\\"+uri.getQueryParameter(\\"userId\\")+\\"'\\";\\n  return jdbcTemplate.update(query);\\n\`\`\`\\n\\n✅ Use \`PreparedStatement\` creators and setters to construct SQL queries\\n\\n\`\`\`java\\nnew PreparedStatementCreator() {\\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\\n    String updateString = \\"update user set name = ? where id = ?\\";\\n    return conn.prepareStatement(updateString);\\n  }\\n}\\n\\nnew PreparedStatementSetter() {\\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\\n    preparedStatement.setString(1, uri.getQueryParameter(\\"name\\"))\\n    preparedStatement.setInt(2, uri.getQueryParameter(\\"userId\\"))\\n  }\\n}\\n\`\`\`\\n\\n## Resources\\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 14,
      "full_filename": "/tmp/bearer-scan/bad.java",
      "filename": ".",
      "source": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 21,
          "end": 83
        }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 21,
          "end": 83
        },
        "content": "new PreparedStatementCreatorFactory(myQueryStr, Types.VARCHAR)"
      },
      "parent_line_number": 14,
      "snippet": "new PreparedStatementCreatorFactory(myQueryStr, Types.VARCHAR)",
      "fingerprint": "ebf8b9a53c73eabed841989514b90054_0",
      "old_fingerprint": "9ea5f5b3d1131ed66c9e6fe7484aa506_0",
      "code_extract": "      var factory = new PreparedStatementCreatorFactory(myQueryStr, Types.VARCHAR);"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`java\\n  String query = \\"update user set name='\\"+uri.getQueryParameter(\\"name\\")+\\"' where id='\\"+uri.getQueryParameter(\\"userId\\")+\\"'\\";\\n  return jdbcTemplate.update(query);\\n\`\`\`\\n\\n✅ Use \`PreparedStatement\` creators and setters to construct SQL queries\\n\\n\`\`\`java\\nnew PreparedStatementCreator() {\\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\\n    String updateString = \\"update user set name = ? where id = ?\\";\\n    return conn.prepareStatement(updateString);\\n  }\\n}\\n\\nnew PreparedStatementSetter() {\\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\\n    preparedStatement.setString(1, uri.getQueryParameter(\\"name\\"))\\n    preparedStatement.setInt(2, uri.getQueryParameter(\\"userId\\"))\\n  }\\n}\\n\`\`\`\\n\\n## Resources\\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 15,
      "full_filename": "/tmp/bearer-scan/bad.java",
      "filename": ".",
      "source": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 7,
          "end": 58
        }
      },
      "sink": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 7,
          "end": 58
        },
        "content": "factory.newPreparedStatementCreator(myQueryStr, [])"
      },
      "parent_line_number": 15,
      "snippet": "factory.newPreparedStatementCreator(myQueryStr, [])",
      "fingerprint": "ebf8b9a53c73eabed841989514b90054_1",
      "old_fingerprint": "9ea5f5b3d1131ed66c9e6fe7484aa506_1",
      "code_extract": "      factory.newPreparedStatementCreator(myQueryStr, []);"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`java\\n  String query = \\"update user set name='\\"+uri.getQueryParameter(\\"name\\")+\\"' where id='\\"+uri.getQueryParameter(\\"userId\\")+\\"'\\";\\n  return jdbcTemplate.update(query);\\n\`\`\`\\n\\n✅ Use \`PreparedStatement\` creators and setters to construct SQL queries\\n\\n\`\`\`java\\nnew PreparedStatementCreator() {\\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\\n    String updateString = \\"update user set name = ? where id = ?\\";\\n    return conn.prepareStatement(updateString);\\n  }\\n}\\n\\nnew PreparedStatementSetter() {\\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\\n    preparedStatement.setString(1, uri.getQueryParameter(\\"name\\"))\\n    preparedStatement.setInt(2, uri.getQueryParameter(\\"userId\\"))\\n  }\\n}\\n\`\`\`\\n\\n## Resources\\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 17,
      "full_filename": "/tmp/bearer-scan/bad.java",
      "filename": ".",
      "source": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 7,
          "end": 38
        }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 7,
          "end": 38
        },
        "content": "t.batchUpdate(\\"ok\\", myQueryStr)"
      },
      "parent_line_number": 17,
      "snippet": "t.batchUpdate(\\"ok\\", myQueryStr)",
      "fingerprint": "ebf8b9a53c73eabed841989514b90054_2",
      "old_fingerprint": "9ea5f5b3d1131ed66c9e6fe7484aa506_2",
      "code_extract": "      t.batchUpdate(\\"ok\\", myQueryStr);"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`java\\n  String query = \\"update user set name='\\"+uri.getQueryParameter(\\"name\\")+\\"' where id='\\"+uri.getQueryParameter(\\"userId\\")+\\"'\\";\\n  return jdbcTemplate.update(query);\\n\`\`\`\\n\\n✅ Use \`PreparedStatement\` creators and setters to construct SQL queries\\n\\n\`\`\`java\\nnew PreparedStatementCreator() {\\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\\n    String updateString = \\"update user set name = ? where id = ?\\";\\n    return conn.prepareStatement(updateString);\\n  }\\n}\\n\\nnew PreparedStatementSetter() {\\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\\n    preparedStatement.setString(1, uri.getQueryParameter(\\"name\\"))\\n    preparedStatement.setInt(2, uri.getQueryParameter(\\"userId\\"))\\n  }\\n}\\n\`\`\`\\n\\n## Resources\\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 18,
      "full_filename": "/tmp/bearer-scan/bad.java",
      "filename": ".",
      "source": {
        "start": 18,
        "end": 18,
        "column": {
          "start": 7,
          "end": 28
        }
      },
      "sink": {
        "start": 18,
        "end": 18,
        "column": {
          "start": 7,
          "end": 28
        },
        "content": "t.execute(myQueryStr)"
      },
      "parent_line_number": 18,
      "snippet": "t.execute(myQueryStr)",
      "fingerprint": "ebf8b9a53c73eabed841989514b90054_3",
      "old_fingerprint": "9ea5f5b3d1131ed66c9e6fe7484aa506_3",
      "code_extract": "      t.execute(myQueryStr);"
    }
  ]
}"
`;

exports[`java_spring_sqli safe 1`] = `"{}"`;
