// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`go_gosec_memory_math_big_rat test 1`] = `
"{
  "low": [
    {
      "cwe_ids": [
        "190"
      ],
      "id": "go_gosec_memory_math_big_rat",
      "title": "Integer Overflow or Wraparound",
      "description": "## Description\\n\\nWhen converting strings to integers using \`strconv.Atoi\` in Go, there's a risk of integer overflow if the result is assigned to a smaller integer type such as \`int16\` or \`int32\`. The size of the default \`int\` type in Go is platform-dependent—64 bits on a 64-bit system and 32 bits on a 32-bit system. Overflow can occur when the value returned from \`strconv.Atoi\` exceeds the range of the target integer type.\\n\\n## Remediations\\n\\n✅ Check Before Conversion\\n\\nAlways verify that the value returned from \`strconv.Atoi\` is within the range of the target type before conversion.\\n\\n\`\`\`go\\nif intValue, err := strconv.Atoi(stringValue); err == nil {\\n    if intValue >= math.MinInt16 && intValue <= math.MaxInt16 {\\n        int16Value := int16(intValue)\\n        // Use int16Value safely\\n    }\\n}\\n\`\`\`\\n\\n✅ Use Specific Type Conversion Functions\\n\\nUse type-specific parsing functions such as \`strconv.ParseInt\` with the appropriate bit size to directly obtain the desired type.\\n\\n\`\`\`go\\nif int64Value, err := strconv.ParseInt(stringValue, 10, 16); err == nil {\\n    int16Value := int16(int64Value)\\n    // Use int16Value safely\\n}\\n\`\`\`\\n\\n❌ Avoid Blind Type Casting\\n\\nDo not cast the result of \`strconv.Atoi\` to a smaller integer type without validating that the value fits within the smaller type's range.\\n\\n❌ Don't Ignore Errors\\n\\nNever ignore the error returned by \`strconv.Atoi\`. Always handle it to catch conversion issues, including potential overflows.\\n\\n## Resources\\n\\n- [Go strconv package](https://pkg.go.dev/strconv)\\n- [Go math package for min/max constants](https://pkg.go.dev/math#pkg-constants)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_memory_math_big_rat",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 2,
          "end": 40
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 2,
          "end": 40
        },
        "content": "r.SetString(\\"13e-9223372036854775808\\")"
      },
      "parent_line_number": 10,
      "snippet": "r.SetString(\\"13e-9223372036854775808\\")",
      "fingerprint": "c052fe4b2e2d5b3e93126e805db0f49b_0",
      "old_fingerprint": "9eef1553c0a08adba87fa4949d1507b3_0",
      "code_extract": "\\tr.SetString(\\"13e-9223372036854775808\\")"
    },
    {
      "cwe_ids": [
        "190"
      ],
      "id": "go_gosec_memory_math_big_rat",
      "title": "Integer Overflow or Wraparound",
      "description": "## Description\\n\\nWhen converting strings to integers using \`strconv.Atoi\` in Go, there's a risk of integer overflow if the result is assigned to a smaller integer type such as \`int16\` or \`int32\`. The size of the default \`int\` type in Go is platform-dependent—64 bits on a 64-bit system and 32 bits on a 32-bit system. Overflow can occur when the value returned from \`strconv.Atoi\` exceeds the range of the target integer type.\\n\\n## Remediations\\n\\n✅ Check Before Conversion\\n\\nAlways verify that the value returned from \`strconv.Atoi\` is within the range of the target type before conversion.\\n\\n\`\`\`go\\nif intValue, err := strconv.Atoi(stringValue); err == nil {\\n    if intValue >= math.MinInt16 && intValue <= math.MaxInt16 {\\n        int16Value := int16(intValue)\\n        // Use int16Value safely\\n    }\\n}\\n\`\`\`\\n\\n✅ Use Specific Type Conversion Functions\\n\\nUse type-specific parsing functions such as \`strconv.ParseInt\` with the appropriate bit size to directly obtain the desired type.\\n\\n\`\`\`go\\nif int64Value, err := strconv.ParseInt(stringValue, 10, 16); err == nil {\\n    int16Value := int16(int64Value)\\n    // Use int16Value safely\\n}\\n\`\`\`\\n\\n❌ Avoid Blind Type Casting\\n\\nDo not cast the result of \`strconv.Atoi\` to a smaller integer type without validating that the value fits within the smaller type's range.\\n\\n❌ Don't Ignore Errors\\n\\nNever ignore the error returned by \`strconv.Atoi\`. Always handle it to catch conversion issues, including potential overflows.\\n\\n## Resources\\n\\n- [Go strconv package](https://pkg.go.dev/strconv)\\n- [Go math package for min/max constants](https://pkg.go.dev/math#pkg-constants)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_memory_math_big_rat",
      "line_number": 16,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 16,
        "end": 16,
        "column": {
          "start": 2,
          "end": 20
        }
      },
      "sink": {
        "start": 16,
        "end": 16,
        "column": {
          "start": 2,
          "end": 20
        },
        "content": "r.SetString(input)"
      },
      "parent_line_number": 16,
      "snippet": "r.SetString(input)",
      "fingerprint": "c052fe4b2e2d5b3e93126e805db0f49b_1",
      "old_fingerprint": "9eef1553c0a08adba87fa4949d1507b3_1",
      "code_extract": "\\tr.SetString(input)"
    }
  ]
}"
`;
