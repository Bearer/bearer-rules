// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`go_gosec_secrets_secrets test 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "798"
      ],
      "id": "go_gosec_secrets_secrets",
      "title": "Use of hard-coded password",
      "description": "## Description\\n\\nStoring sensitive information such as secret keys, passwords, or API tokens directly in source code can lead to security vulnerabilities. This practice makes it easy for malicious actors to access these secrets if the codebase is exposed or improperly accessed.\\n\\n## Remediations\\n\\nTo protect sensitive information:\\n\\n✅ Dynamic Secret Retrieval\\n\\nImplement mechanisms to retrieve secrets dynamically at runtime from a secure source rather than hardcoding them in the source files.\\n\\n✅ Environment Variables\\n\\nUse environment variables to inject secrets into the application at runtime, keeping them out of the codebase.\\n\\n✅ Secrets Management Systems\\n\\nUtilize dedicated secrets management tools and services that securely store and manage sensitive information.\\n\\n✅ Encrypted Configuration Files\\n\\nStore secrets in configuration files that are encrypted and decrypt them at runtime within the application.\\n\\n✅ Access Control\\n\\nEnsure that the storage location for secrets has strict access controls to prevent unauthorized access.\\n\\n✅ Audit and Rotate Secrets\\n\\nRegularly audit access to secrets and rotate them to minimize the risk if they are compromised.\\n\\n## Resources\\n\\n- [OWASP: Use of Hard-coded Passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [OWASP: Secrets Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_secrets_secrets",
      "line_number": 7,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 2,
          "end": 59
        }
      },
      "sink": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 2,
          "end": 59
        },
        "content": "var password = \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\""
      },
      "parent_line_number": 7,
      "snippet": "var password = \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\"",
      "fingerprint": "9e734ddc60109624107631b0392de18d_0",
      "old_fingerprint": "ed5cd88d67a7df70d3590175a0307c35_0",
      "code_extract": "\\tvar password = \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\""
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "go_gosec_secrets_secrets",
      "title": "Use of hard-coded password",
      "description": "## Description\\n\\nStoring sensitive information such as secret keys, passwords, or API tokens directly in source code can lead to security vulnerabilities. This practice makes it easy for malicious actors to access these secrets if the codebase is exposed or improperly accessed.\\n\\n## Remediations\\n\\nTo protect sensitive information:\\n\\n✅ Dynamic Secret Retrieval\\n\\nImplement mechanisms to retrieve secrets dynamically at runtime from a secure source rather than hardcoding them in the source files.\\n\\n✅ Environment Variables\\n\\nUse environment variables to inject secrets into the application at runtime, keeping them out of the codebase.\\n\\n✅ Secrets Management Systems\\n\\nUtilize dedicated secrets management tools and services that securely store and manage sensitive information.\\n\\n✅ Encrypted Configuration Files\\n\\nStore secrets in configuration files that are encrypted and decrypt them at runtime within the application.\\n\\n✅ Access Control\\n\\nEnsure that the storage location for secrets has strict access controls to prevent unauthorized access.\\n\\n✅ Audit and Rotate Secrets\\n\\nRegularly audit access to secrets and rotate them to minimize the risk if they are compromised.\\n\\n## Resources\\n\\n- [OWASP: Use of Hard-coded Passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [OWASP: Secrets Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_secrets_secrets",
      "line_number": 15,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 2,
          "end": 55
        }
      },
      "sink": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 2,
          "end": 55
        },
        "content": "password = \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\""
      },
      "parent_line_number": 15,
      "snippet": "password = \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\"",
      "fingerprint": "9e734ddc60109624107631b0392de18d_1",
      "old_fingerprint": "ed5cd88d67a7df70d3590175a0307c35_1",
      "code_extract": "\\tpassword = \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\""
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "go_gosec_secrets_secrets",
      "title": "Use of hard-coded password",
      "description": "## Description\\n\\nStoring sensitive information such as secret keys, passwords, or API tokens directly in source code can lead to security vulnerabilities. This practice makes it easy for malicious actors to access these secrets if the codebase is exposed or improperly accessed.\\n\\n## Remediations\\n\\nTo protect sensitive information:\\n\\n✅ Dynamic Secret Retrieval\\n\\nImplement mechanisms to retrieve secrets dynamically at runtime from a secure source rather than hardcoding them in the source files.\\n\\n✅ Environment Variables\\n\\nUse environment variables to inject secrets into the application at runtime, keeping them out of the codebase.\\n\\n✅ Secrets Management Systems\\n\\nUtilize dedicated secrets management tools and services that securely store and manage sensitive information.\\n\\n✅ Encrypted Configuration Files\\n\\nStore secrets in configuration files that are encrypted and decrypt them at runtime within the application.\\n\\n✅ Access Control\\n\\nEnsure that the storage location for secrets has strict access controls to prevent unauthorized access.\\n\\n✅ Audit and Rotate Secrets\\n\\nRegularly audit access to secrets and rotate them to minimize the risk if they are compromised.\\n\\n## Resources\\n\\n- [OWASP: Use of Hard-coded Passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [OWASP: Secrets Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_secrets_secrets",
      "line_number": 22,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 22,
        "end": 22,
        "column": {
          "start": 2,
          "end": 56
        }
      },
      "sink": {
        "start": 22,
        "end": 22,
        "column": {
          "start": 2,
          "end": 56
        },
        "content": "password := \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\""
      },
      "parent_line_number": 22,
      "snippet": "password := \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\"",
      "fingerprint": "9e734ddc60109624107631b0392de18d_2",
      "old_fingerprint": "ed5cd88d67a7df70d3590175a0307c35_2",
      "code_extract": "\\tpassword := \\"f62e5bcda4fae4f82370da0c6f20697b8f8447ef\\""
    }
  ]
}"
`;
