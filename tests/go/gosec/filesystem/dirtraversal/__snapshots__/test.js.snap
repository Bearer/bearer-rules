// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`go_gosec_filesystem_dirtraversal test 1`] = `
"{
  "low": [
    {
      "cwe_ids": [
        "22"
      ],
      "id": "go_gosec_filesystem_dirtraversal",
      "title": "Usage of Root directory mounting",
      "description": "## Description\\n\\nMounting the root directory (\`/\`) in an HTTP server is a significant security risk. It potentially allows anyone with access to the HTTP service to browse and access system files, which can lead to information disclosure, data breaches, or further exploitation of the system.\\n\\n## Remediations\\n\\nImplement the following measures to prevent exposing the entire filesystem through your web server:\\n\\n✅ Serve Specific Directory\\n\\nChange the \`http.Dir\` to serve files from a specific, safe directory intended for public access rather than the root directory. Ensure this directory contains only the files that are meant to be publicly accessible.\\n\\n✅ Access Control\\n\\nApply appropriate permissions to the directory being served to ensure that the server process can only access the files that it's supposed to serve.\\n\\n✅ Use of Configuration Files\\n\\nIf supported, use configuration files like \`.htaccess\` (for Apache HTTP Server) or equivalent server configuration to control access to directories.\\n\\n✅ Isolate Environment\\n\\nConsider running your server in a containerized or virtualized environment with strict access controls to limit the potential damage in case of a security breach.\\n\\n✅ Regular Audits\\n\\nPerform regular audits of the filesystem and the files being served to ensure that no sensitive information is being unintentionally exposed.\\n\\n\`\`\`go\\nimport (\\n    \\"net/http\\"\\n    \\"log\\"\\n)\\n\\nfunc main() {\\n    // Define the specific path to a directory to be served\\n    const safePath = \\"/var/www/html/public\\"\\n\\n    // Create a new file server handler that serves files from the safePath\\n    fs := http.FileServer(http.Dir(safePath))\\n\\n    // Configure the server to handle requests to the root with the file server handler\\n    http.Handle(\\"/\\", http.StripPrefix(\\"/\\", fs))\\n\\n    // Start the server\\n    log.Fatal(http.ListenAndServe(\\":9000\\", nil))\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [Go Documentation: http package](https://pkg.go.dev/net/http)\\n- [OWASP: Securing File Uploads](https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload)\\n- [NIST Guidelines on Securing Public Web Servers](https://csrc.nist.gov/publications/detail/sp/800-44/version-2/final)\\n- [Docker Documentation: Use containers for isolation](https://docs.docker.com/get-started/overview/#use-containers-for-isolation)\\n- [Linux man page for chmod (file permissions)](https://linux.die.net/man/1/chmod)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_filesystem_dirtraversal",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 7,
          "end": 20
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 7,
          "end": 20
        },
        "content": "net2.Dir(\\"/\\")"
      },
      "parent_line_number": 10,
      "snippet": "net2.Dir(\\"/\\")",
      "fingerprint": "3a1c1dd6de643ca21a3d5b17af97729a_0",
      "old_fingerprint": "bb634df7af20e27aa8f7123da072efdc_0",
      "code_extract": "\\td := net2.Dir(\\"/\\")"
    }
  ]
}"
`;
