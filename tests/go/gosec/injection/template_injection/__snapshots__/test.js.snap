// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`go_gosec_injection_template_injection test 1`] = `
"{
  "low": [
    {
      "cwe_ids": [
        "79"
      ],
      "id": "go_gosec_injection_template_injection",
      "title": "Improper neutralization of input during web page generation ('Cross-site Scripting')",
      "description": "## Description\\n\\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\\n\\n## Remediations\\n\\nTo defend against XSS attacks, consider the following measures:\\n\\n✅ Encode Based on Context\\n\\nWhen user input is reflected back in HTML, ensure it is encoded based on the context in which it is used (e.g., HTML content, HTML attributes, JavaScript context, CSS context, etc.).\\n\\n✅ Template Safely\\n\\nUtilize templating engines that automatically encode data based on context, and be cautious not to override these safeguards.\\n\\n✅ Sanitize Data\\n\\nUse libraries or functions designed to sanitize user input, particularly when inserting content into a web page.\\n\\n✅ Separate Data from Code\\n\\nAvoid inline scripting and event handlers, and instead use separate JavaScript files to handle events. This reduces the risk of script injection through event attributes.\\n\\n✅ Avoid Mixing Templating Systems\\n\\nDo not mix server-side and client-side templating systems, as server-side systems may not escape output in a way that is safe for client-side use.\\n\\n❌ Do Not Encode Before Storing\\n\\nAvoid encoding user input before storing it in a database. The encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\\n\\nHere's an example of using Go’s \`html/template\` package to safely render HTML content:\\n\\n\`\`\`go\\nimport (\\n    \\"html/template\\"\\n    \\"os\\"\\n    \\"log\\"\\n)\\n\\nfunc main() {\\n    // Define a template with a function to safely render HTML\\n    testTemplate, err := template.New(\\"testTemplate\\").Funcs(template.FuncMap{\\n        \\"SafeHTML\\": func() template.HTML {\\n            const safeHTML = \\"<div>hardcoded, safe html</div>\\"\\n            return template.HTML(safeHTML)\\n        },\\n    }).Parse(\`<html><body>{{ SafeHTML }}</body></html>\`)\\n\\n    if err != nil {\\n        log.Fatal(err)\\n    }\\n\\n    // Execute the template and ensure proper encoding\\n    if err := testTemplate.Execute(os.Stdout, nil); err != nil {\\n        log.Fatal(err)\\n    }\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\\n- [Go html/template Documentation](https://pkg.go.dev/html/template)\\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_template_injection",
      "line_number": 23,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 23,
        "end": 23,
        "column": {
          "start": 12,
          "end": 28
        }
      },
      "sink": {
        "start": 23,
        "end": 23,
        "column": {
          "start": 12,
          "end": 28
        },
        "content": "template.HTML(a)"
      },
      "parent_line_number": 23,
      "snippet": "template.HTML(a)",
      "fingerprint": "681dfcec8a0252d95ac5e3fdfd0130f4_0",
      "old_fingerprint": "264c42ced6ea2219364b42acf3794d16_0",
      "code_extract": "\\t\\t\\"Body\\":  template.HTML(a),"
    },
    {
      "cwe_ids": [
        "79"
      ],
      "id": "go_gosec_injection_template_injection",
      "title": "Improper neutralization of input during web page generation ('Cross-site Scripting')",
      "description": "## Description\\n\\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\\n\\n## Remediations\\n\\nTo defend against XSS attacks, consider the following measures:\\n\\n✅ Encode Based on Context\\n\\nWhen user input is reflected back in HTML, ensure it is encoded based on the context in which it is used (e.g., HTML content, HTML attributes, JavaScript context, CSS context, etc.).\\n\\n✅ Template Safely\\n\\nUtilize templating engines that automatically encode data based on context, and be cautious not to override these safeguards.\\n\\n✅ Sanitize Data\\n\\nUse libraries or functions designed to sanitize user input, particularly when inserting content into a web page.\\n\\n✅ Separate Data from Code\\n\\nAvoid inline scripting and event handlers, and instead use separate JavaScript files to handle events. This reduces the risk of script injection through event attributes.\\n\\n✅ Avoid Mixing Templating Systems\\n\\nDo not mix server-side and client-side templating systems, as server-side systems may not escape output in a way that is safe for client-side use.\\n\\n❌ Do Not Encode Before Storing\\n\\nAvoid encoding user input before storing it in a database. The encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\\n\\nHere's an example of using Go’s \`html/template\` package to safely render HTML content:\\n\\n\`\`\`go\\nimport (\\n    \\"html/template\\"\\n    \\"os\\"\\n    \\"log\\"\\n)\\n\\nfunc main() {\\n    // Define a template with a function to safely render HTML\\n    testTemplate, err := template.New(\\"testTemplate\\").Funcs(template.FuncMap{\\n        \\"SafeHTML\\": func() template.HTML {\\n            const safeHTML = \\"<div>hardcoded, safe html</div>\\"\\n            return template.HTML(safeHTML)\\n        },\\n    }).Parse(\`<html><body>{{ SafeHTML }}</body></html>\`)\\n\\n    if err != nil {\\n        log.Fatal(err)\\n    }\\n\\n    // Execute the template and ensure proper encoding\\n    if err := testTemplate.Execute(os.Stdout, nil); err != nil {\\n        log.Fatal(err)\\n    }\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\\n- [Go html/template Documentation](https://pkg.go.dev/html/template)\\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_template_injection",
      "line_number": 32,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 32,
        "end": 32,
        "column": {
          "start": 12,
          "end": 26
        }
      },
      "sink": {
        "start": 32,
        "end": 32,
        "column": {
          "start": 12,
          "end": 26
        },
        "content": "template.JS(a)"
      },
      "parent_line_number": 32,
      "snippet": "template.JS(a)",
      "fingerprint": "681dfcec8a0252d95ac5e3fdfd0130f4_1",
      "old_fingerprint": "264c42ced6ea2219364b42acf3794d16_1",
      "code_extract": "\\t\\t\\"Body\\":  template.JS(a),"
    },
    {
      "cwe_ids": [
        "79"
      ],
      "id": "go_gosec_injection_template_injection",
      "title": "Improper neutralization of input during web page generation ('Cross-site Scripting')",
      "description": "## Description\\n\\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\\n\\n## Remediations\\n\\nTo defend against XSS attacks, consider the following measures:\\n\\n✅ Encode Based on Context\\n\\nWhen user input is reflected back in HTML, ensure it is encoded based on the context in which it is used (e.g., HTML content, HTML attributes, JavaScript context, CSS context, etc.).\\n\\n✅ Template Safely\\n\\nUtilize templating engines that automatically encode data based on context, and be cautious not to override these safeguards.\\n\\n✅ Sanitize Data\\n\\nUse libraries or functions designed to sanitize user input, particularly when inserting content into a web page.\\n\\n✅ Separate Data from Code\\n\\nAvoid inline scripting and event handlers, and instead use separate JavaScript files to handle events. This reduces the risk of script injection through event attributes.\\n\\n✅ Avoid Mixing Templating Systems\\n\\nDo not mix server-side and client-side templating systems, as server-side systems may not escape output in a way that is safe for client-side use.\\n\\n❌ Do Not Encode Before Storing\\n\\nAvoid encoding user input before storing it in a database. The encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\\n\\nHere's an example of using Go’s \`html/template\` package to safely render HTML content:\\n\\n\`\`\`go\\nimport (\\n    \\"html/template\\"\\n    \\"os\\"\\n    \\"log\\"\\n)\\n\\nfunc main() {\\n    // Define a template with a function to safely render HTML\\n    testTemplate, err := template.New(\\"testTemplate\\").Funcs(template.FuncMap{\\n        \\"SafeHTML\\": func() template.HTML {\\n            const safeHTML = \\"<div>hardcoded, safe html</div>\\"\\n            return template.HTML(safeHTML)\\n        },\\n    }).Parse(\`<html><body>{{ SafeHTML }}</body></html>\`)\\n\\n    if err != nil {\\n        log.Fatal(err)\\n    }\\n\\n    // Execute the template and ensure proper encoding\\n    if err := testTemplate.Execute(os.Stdout, nil); err != nil {\\n        log.Fatal(err)\\n    }\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\\n- [Go html/template Documentation](https://pkg.go.dev/html/template)\\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_template_injection",
      "line_number": 41,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 41,
        "end": 41,
        "column": {
          "start": 12,
          "end": 27
        }
      },
      "sink": {
        "start": 41,
        "end": 41,
        "column": {
          "start": 12,
          "end": 27
        },
        "content": "template.URL(a)"
      },
      "parent_line_number": 41,
      "snippet": "template.URL(a)",
      "fingerprint": "681dfcec8a0252d95ac5e3fdfd0130f4_2",
      "old_fingerprint": "264c42ced6ea2219364b42acf3794d16_2",
      "code_extract": "\\t\\t\\"Body\\":  template.URL(a),"
    }
  ]
}"
`;
