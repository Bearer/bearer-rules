// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`go_gosec_injection_subproc_injection test 1`] = `
"{
  "low": [
    {
      "cwe_ids": [
        "94"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Unsanitized user input in code generation",
      "description": "## Description\\n\\nProcessing unsanitized user-controlled input as code puts your application at risk of Code Injection\\nattacks, whereby attackers execute arbitrary commands or manipulate application behaviour,\\npotentially leading to security breaches or data manipulation.\\n\\n## Remediations\\n\\n✅ Avoid User Input in Commands\\n\\nAlways steer clear of incorporating user input when formulating commands or their arguments.\\n\\n✅ Hardcoded Argument Set\\n\\nEnsure your application exclusively uses a hardcoded set of arguments when executing code.\\n\\n## Resources\\n\\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 23,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 23,
        "end": 23,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 23,
        "end": 23,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "exec.CommandContext(context.Background(), os.Args[0], \\"5\\")"
      },
      "parent_line_number": 23,
      "snippet": "exec.CommandContext(context.Background(), os.Args[0], \\"5\\")",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_0",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_0",
      "code_extract": "\\terr := exec.CommandContext(context.Background(), os.Args[0], \\"5\\").Run() // detected"
    },
    {
      "cwe_ids": [
        "94"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Unsanitized user input in code generation",
      "description": "## Description\\n\\nProcessing unsanitized user-controlled input as code puts your application at risk of Code Injection\\nattacks, whereby attackers execute arbitrary commands or manipulate application behaviour,\\npotentially leading to security breaches or data manipulation.\\n\\n## Remediations\\n\\n✅ Avoid User Input in Commands\\n\\nAlways steer clear of incorporating user input when formulating commands or their arguments.\\n\\n✅ Hardcoded Argument Set\\n\\nEnsure your application exclusively uses a hardcoded set of arguments when executing code.\\n\\n## Resources\\n\\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 33,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 33,
        "end": 33,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 33,
        "end": 33,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "exec.Command(run, \\"5\\")"
      },
      "parent_line_number": 33,
      "snippet": "exec.Command(run, \\"5\\")",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_1",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_1",
      "code_extract": "\\tcmd := exec.Command(run, \\"5\\") // detected"
    },
    {
      "cwe_ids": [
        "94"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Unsanitized user input in code generation",
      "description": "## Description\\n\\nProcessing unsanitized user-controlled input as code puts your application at risk of Code Injection\\nattacks, whereby attackers execute arbitrary commands or manipulate application behaviour,\\npotentially leading to security breaches or data manipulation.\\n\\n## Remediations\\n\\n✅ Avoid User Input in Commands\\n\\nAlways steer clear of incorporating user input when formulating commands or their arguments.\\n\\n✅ Hardcoded Argument Set\\n\\nEnsure your application exclusively uses a hardcoded set of arguments when executing code.\\n\\n## Resources\\n\\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 45,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 45,
        "end": 45,
        "column": {
          "start": 9,
          "end": 35
        }
      },
      "sink": {
        "start": 45,
        "end": 45,
        "column": {
          "start": 9,
          "end": 35
        },
        "content": "exec.Command(command, \\"5\\")"
      },
      "parent_line_number": 45,
      "snippet": "exec.Command(command, \\"5\\")",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_2",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_2",
      "code_extract": "\\tcmd := exec.Command(command, \\"5\\")"
    },
    {
      "cwe_ids": [
        "94"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Unsanitized user input in code generation",
      "description": "## Description\\n\\nProcessing unsanitized user-controlled input as code puts your application at risk of Code Injection\\nattacks, whereby attackers execute arbitrary commands or manipulate application behaviour,\\npotentially leading to security breaches or data manipulation.\\n\\n## Remediations\\n\\n✅ Avoid User Input in Commands\\n\\nAlways steer clear of incorporating user input when formulating commands or their arguments.\\n\\n✅ Hardcoded Argument Set\\n\\nEnsure your application exclusively uses a hardcoded set of arguments when executing code.\\n\\n## Resources\\n\\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 60,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 9,
          "end": 24
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 9,
          "end": 24
        },
        "content": "exec.Command(c)"
      },
      "parent_line_number": 60,
      "snippet": "exec.Command(c)",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_3",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_3",
      "code_extract": "\\tcmd := exec.Command(c)"
    },
    {
      "cwe_ids": [
        "94"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Unsanitized user input in code generation",
      "description": "## Description\\n\\nProcessing unsanitized user-controlled input as code puts your application at risk of Code Injection\\nattacks, whereby attackers execute arbitrary commands or manipulate application behaviour,\\npotentially leading to security breaches or data manipulation.\\n\\n## Remediations\\n\\n✅ Avoid User Input in Commands\\n\\nAlways steer clear of incorporating user input when formulating commands or their arguments.\\n\\n✅ Hardcoded Argument Set\\n\\nEnsure your application exclusively uses a hardcoded set of arguments when executing code.\\n\\n## Resources\\n\\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 68,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 8,
          "end": 23
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 8,
          "end": 23
        },
        "content": "exec.Command(a)"
      },
      "parent_line_number": 68,
      "snippet": "exec.Command(a)",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_4",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_4",
      "code_extract": "\\tcmd = exec.Command(a)"
    },
    {
      "cwe_ids": [
        "94"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Unsanitized user input in code generation",
      "description": "## Description\\n\\nProcessing unsanitized user-controlled input as code puts your application at risk of Code Injection\\nattacks, whereby attackers execute arbitrary commands or manipulate application behaviour,\\npotentially leading to security breaches or data manipulation.\\n\\n## Remediations\\n\\n✅ Avoid User Input in Commands\\n\\nAlways steer clear of incorporating user input when formulating commands or their arguments.\\n\\n✅ Hardcoded Argument Set\\n\\nEnsure your application exclusively uses a hardcoded set of arguments when executing code.\\n\\n## Resources\\n\\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 90,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 12,
          "end": 54
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 12,
          "end": 54
        },
        "content": "syscall.ForkExec(command, []string{}, nil)"
      },
      "parent_line_number": 90,
      "snippet": "syscall.ForkExec(command, []string{}, nil)",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_5",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_5",
      "code_extract": "\\t_, err := syscall.ForkExec(command, []string{}, nil)"
    },
    {
      "cwe_ids": [
        "94"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Unsanitized user input in code generation",
      "description": "## Description\\n\\nProcessing unsanitized user-controlled input as code puts your application at risk of Code Injection\\nattacks, whereby attackers execute arbitrary commands or manipulate application behaviour,\\npotentially leading to security breaches or data manipulation.\\n\\n## Remediations\\n\\n✅ Avoid User Input in Commands\\n\\nAlways steer clear of incorporating user input when formulating commands or their arguments.\\n\\n✅ Hardcoded Argument Set\\n\\nEnsure your application exclusively uses a hardcoded set of arguments when executing code.\\n\\n## Resources\\n\\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 102,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 15,
          "end": 61
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 15,
          "end": 61
        },
        "content": "syscall.StartProcess(command, []string{}, nil)"
      },
      "parent_line_number": 102,
      "snippet": "syscall.StartProcess(command, []string{}, nil)",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_6",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_6",
      "code_extract": "\\t_, _, err := syscall.StartProcess(command, []string{}, nil)"
    },
    {
      "cwe_ids": [
        "94"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Unsanitized user input in code generation",
      "description": "## Description\\n\\nProcessing unsanitized user-controlled input as code puts your application at risk of Code Injection\\nattacks, whereby attackers execute arbitrary commands or manipulate application behaviour,\\npotentially leading to security breaches or data manipulation.\\n\\n## Remediations\\n\\n✅ Avoid User Input in Commands\\n\\nAlways steer clear of incorporating user input when formulating commands or their arguments.\\n\\n✅ Hardcoded Argument Set\\n\\nEnsure your application exclusively uses a hardcoded set of arguments when executing code.\\n\\n## Resources\\n\\n- [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 126,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 126,
        "end": 126,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 126,
        "end": 126,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "exec.CommandContext(context.Background(), os.Args[0], \\"5\\")"
      },
      "parent_line_number": 126,
      "snippet": "exec.CommandContext(context.Background(), os.Args[0], \\"5\\")",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_7",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_7",
      "code_extract": "\\terr := exec.CommandContext(context.Background(), os.Args[0], \\"5\\").Run() // detected"
    }
  ]
}"
`;
