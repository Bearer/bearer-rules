// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`go_gosec_injection_subproc_injection test 1`] = `
"{
  "low": [
    {
      "cwe_ids": [
        "95"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "## Description\\n\\nOS command injection is a critical vulnerability that can lead to a full system compromise as it may allow an adversary to pass in arbitrary commands or arguments to be executed.\\n\\n## Remediations\\n\\n❌ User input should never be used in constructing commands or command arguments to functions which execute OS commands. This includes filenames supplied by user uploads or downloads.\\n\\n✅ Ensure your application does not:\\n\\n- Use user-supplied information in the process name to execute.\\n- Use user-supplied information in an OS command execution function which does not escape shell meta-characters.\\n- Use user-supplied information in arguments to OS commands.\\n\\nThe application should have a hardcoded set of arguments that are to be passed to OS commands. If filenames are being passed to these functions, it is recommended that a hash of the filename be used instead, or some other unique identifier. It is strongly recommended that a native library that implements the same functionality be used instead of using OS system commands, due to the risk of unknown attacks against third party commands.\\n\\n\`\`\`go\\nuserData := []byte(\\"user data\\")\\n// create a temporary file in the application specific directory\\nf, err := ioutil.TempFile(\\"/var/app/restricted\\", \\"temp-*.dat\\")\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\\nif _, err := f.Write(userData); err != nil {\\n  log.Fatal(err)\\n}\\n\\nif err := f.Close(); err != nil {\\n  log.Fatal(err)\\n}\\n\\n// pass the full path to the binary and the name of the temporary file\\n// instead of any user supplied filename\\nout, err := exec.Command(\\"/bin/cat\\", f.Name()).Output()\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP OS Command Injection](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 27,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 27,
        "end": 27,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 27,
        "end": 27,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "exec.CommandContext(context.Background(), os.Args[0], \\"5\\")"
      },
      "parent_line_number": 27,
      "snippet": "exec.CommandContext(context.Background(), os.Args[0], \\"5\\")",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_0",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_0",
      "code_extract": "\\terr := exec.CommandContext(context.Background(), os.Args[0], \\"5\\").Run() // detected"
    },
    {
      "cwe_ids": [
        "95"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "## Description\\n\\nOS command injection is a critical vulnerability that can lead to a full system compromise as it may allow an adversary to pass in arbitrary commands or arguments to be executed.\\n\\n## Remediations\\n\\n❌ User input should never be used in constructing commands or command arguments to functions which execute OS commands. This includes filenames supplied by user uploads or downloads.\\n\\n✅ Ensure your application does not:\\n\\n- Use user-supplied information in the process name to execute.\\n- Use user-supplied information in an OS command execution function which does not escape shell meta-characters.\\n- Use user-supplied information in arguments to OS commands.\\n\\nThe application should have a hardcoded set of arguments that are to be passed to OS commands. If filenames are being passed to these functions, it is recommended that a hash of the filename be used instead, or some other unique identifier. It is strongly recommended that a native library that implements the same functionality be used instead of using OS system commands, due to the risk of unknown attacks against third party commands.\\n\\n\`\`\`go\\nuserData := []byte(\\"user data\\")\\n// create a temporary file in the application specific directory\\nf, err := ioutil.TempFile(\\"/var/app/restricted\\", \\"temp-*.dat\\")\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\\nif _, err := f.Write(userData); err != nil {\\n  log.Fatal(err)\\n}\\n\\nif err := f.Close(); err != nil {\\n  log.Fatal(err)\\n}\\n\\n// pass the full path to the binary and the name of the temporary file\\n// instead of any user supplied filename\\nout, err := exec.Command(\\"/bin/cat\\", f.Name()).Output()\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP OS Command Injection](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 37,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "exec.Command(run, \\"5\\")"
      },
      "parent_line_number": 37,
      "snippet": "exec.Command(run, \\"5\\")",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_1",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_1",
      "code_extract": "\\tcmd := exec.Command(run, \\"5\\") // detected"
    },
    {
      "cwe_ids": [
        "95"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "## Description\\n\\nOS command injection is a critical vulnerability that can lead to a full system compromise as it may allow an adversary to pass in arbitrary commands or arguments to be executed.\\n\\n## Remediations\\n\\n❌ User input should never be used in constructing commands or command arguments to functions which execute OS commands. This includes filenames supplied by user uploads or downloads.\\n\\n✅ Ensure your application does not:\\n\\n- Use user-supplied information in the process name to execute.\\n- Use user-supplied information in an OS command execution function which does not escape shell meta-characters.\\n- Use user-supplied information in arguments to OS commands.\\n\\nThe application should have a hardcoded set of arguments that are to be passed to OS commands. If filenames are being passed to these functions, it is recommended that a hash of the filename be used instead, or some other unique identifier. It is strongly recommended that a native library that implements the same functionality be used instead of using OS system commands, due to the risk of unknown attacks against third party commands.\\n\\n\`\`\`go\\nuserData := []byte(\\"user data\\")\\n// create a temporary file in the application specific directory\\nf, err := ioutil.TempFile(\\"/var/app/restricted\\", \\"temp-*.dat\\")\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\\nif _, err := f.Write(userData); err != nil {\\n  log.Fatal(err)\\n}\\n\\nif err := f.Close(); err != nil {\\n  log.Fatal(err)\\n}\\n\\n// pass the full path to the binary and the name of the temporary file\\n// instead of any user supplied filename\\nout, err := exec.Command(\\"/bin/cat\\", f.Name()).Output()\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP OS Command Injection](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 49,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 35
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 35
        },
        "content": "exec.Command(command, \\"5\\")"
      },
      "parent_line_number": 49,
      "snippet": "exec.Command(command, \\"5\\")",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_2",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_2",
      "code_extract": "\\tcmd := exec.Command(command, \\"5\\")"
    },
    {
      "cwe_ids": [
        "95"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "## Description\\n\\nOS command injection is a critical vulnerability that can lead to a full system compromise as it may allow an adversary to pass in arbitrary commands or arguments to be executed.\\n\\n## Remediations\\n\\n❌ User input should never be used in constructing commands or command arguments to functions which execute OS commands. This includes filenames supplied by user uploads or downloads.\\n\\n✅ Ensure your application does not:\\n\\n- Use user-supplied information in the process name to execute.\\n- Use user-supplied information in an OS command execution function which does not escape shell meta-characters.\\n- Use user-supplied information in arguments to OS commands.\\n\\nThe application should have a hardcoded set of arguments that are to be passed to OS commands. If filenames are being passed to these functions, it is recommended that a hash of the filename be used instead, or some other unique identifier. It is strongly recommended that a native library that implements the same functionality be used instead of using OS system commands, due to the risk of unknown attacks against third party commands.\\n\\n\`\`\`go\\nuserData := []byte(\\"user data\\")\\n// create a temporary file in the application specific directory\\nf, err := ioutil.TempFile(\\"/var/app/restricted\\", \\"temp-*.dat\\")\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\\nif _, err := f.Write(userData); err != nil {\\n  log.Fatal(err)\\n}\\n\\nif err := f.Close(); err != nil {\\n  log.Fatal(err)\\n}\\n\\n// pass the full path to the binary and the name of the temporary file\\n// instead of any user supplied filename\\nout, err := exec.Command(\\"/bin/cat\\", f.Name()).Output()\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP OS Command Injection](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 64,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 24
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 24
        },
        "content": "exec.Command(c)"
      },
      "parent_line_number": 64,
      "snippet": "exec.Command(c)",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_3",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_3",
      "code_extract": "\\tcmd := exec.Command(c)"
    },
    {
      "cwe_ids": [
        "95"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "## Description\\n\\nOS command injection is a critical vulnerability that can lead to a full system compromise as it may allow an adversary to pass in arbitrary commands or arguments to be executed.\\n\\n## Remediations\\n\\n❌ User input should never be used in constructing commands or command arguments to functions which execute OS commands. This includes filenames supplied by user uploads or downloads.\\n\\n✅ Ensure your application does not:\\n\\n- Use user-supplied information in the process name to execute.\\n- Use user-supplied information in an OS command execution function which does not escape shell meta-characters.\\n- Use user-supplied information in arguments to OS commands.\\n\\nThe application should have a hardcoded set of arguments that are to be passed to OS commands. If filenames are being passed to these functions, it is recommended that a hash of the filename be used instead, or some other unique identifier. It is strongly recommended that a native library that implements the same functionality be used instead of using OS system commands, due to the risk of unknown attacks against third party commands.\\n\\n\`\`\`go\\nuserData := []byte(\\"user data\\")\\n// create a temporary file in the application specific directory\\nf, err := ioutil.TempFile(\\"/var/app/restricted\\", \\"temp-*.dat\\")\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\\nif _, err := f.Write(userData); err != nil {\\n  log.Fatal(err)\\n}\\n\\nif err := f.Close(); err != nil {\\n  log.Fatal(err)\\n}\\n\\n// pass the full path to the binary and the name of the temporary file\\n// instead of any user supplied filename\\nout, err := exec.Command(\\"/bin/cat\\", f.Name()).Output()\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP OS Command Injection](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 72,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 8,
          "end": 23
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 8,
          "end": 23
        },
        "content": "exec.Command(a)"
      },
      "parent_line_number": 72,
      "snippet": "exec.Command(a)",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_4",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_4",
      "code_extract": "\\tcmd = exec.Command(a)"
    },
    {
      "cwe_ids": [
        "95"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "## Description\\n\\nOS command injection is a critical vulnerability that can lead to a full system compromise as it may allow an adversary to pass in arbitrary commands or arguments to be executed.\\n\\n## Remediations\\n\\n❌ User input should never be used in constructing commands or command arguments to functions which execute OS commands. This includes filenames supplied by user uploads or downloads.\\n\\n✅ Ensure your application does not:\\n\\n- Use user-supplied information in the process name to execute.\\n- Use user-supplied information in an OS command execution function which does not escape shell meta-characters.\\n- Use user-supplied information in arguments to OS commands.\\n\\nThe application should have a hardcoded set of arguments that are to be passed to OS commands. If filenames are being passed to these functions, it is recommended that a hash of the filename be used instead, or some other unique identifier. It is strongly recommended that a native library that implements the same functionality be used instead of using OS system commands, due to the risk of unknown attacks against third party commands.\\n\\n\`\`\`go\\nuserData := []byte(\\"user data\\")\\n// create a temporary file in the application specific directory\\nf, err := ioutil.TempFile(\\"/var/app/restricted\\", \\"temp-*.dat\\")\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\\nif _, err := f.Write(userData); err != nil {\\n  log.Fatal(err)\\n}\\n\\nif err := f.Close(); err != nil {\\n  log.Fatal(err)\\n}\\n\\n// pass the full path to the binary and the name of the temporary file\\n// instead of any user supplied filename\\nout, err := exec.Command(\\"/bin/cat\\", f.Name()).Output()\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP OS Command Injection](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 94,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 12,
          "end": 54
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 12,
          "end": 54
        },
        "content": "syscall.ForkExec(command, []string{}, nil)"
      },
      "parent_line_number": 94,
      "snippet": "syscall.ForkExec(command, []string{}, nil)",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_5",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_5",
      "code_extract": "\\t_, err := syscall.ForkExec(command, []string{}, nil)"
    },
    {
      "cwe_ids": [
        "95"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "## Description\\n\\nOS command injection is a critical vulnerability that can lead to a full system compromise as it may allow an adversary to pass in arbitrary commands or arguments to be executed.\\n\\n## Remediations\\n\\n❌ User input should never be used in constructing commands or command arguments to functions which execute OS commands. This includes filenames supplied by user uploads or downloads.\\n\\n✅ Ensure your application does not:\\n\\n- Use user-supplied information in the process name to execute.\\n- Use user-supplied information in an OS command execution function which does not escape shell meta-characters.\\n- Use user-supplied information in arguments to OS commands.\\n\\nThe application should have a hardcoded set of arguments that are to be passed to OS commands. If filenames are being passed to these functions, it is recommended that a hash of the filename be used instead, or some other unique identifier. It is strongly recommended that a native library that implements the same functionality be used instead of using OS system commands, due to the risk of unknown attacks against third party commands.\\n\\n\`\`\`go\\nuserData := []byte(\\"user data\\")\\n// create a temporary file in the application specific directory\\nf, err := ioutil.TempFile(\\"/var/app/restricted\\", \\"temp-*.dat\\")\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\\nif _, err := f.Write(userData); err != nil {\\n  log.Fatal(err)\\n}\\n\\nif err := f.Close(); err != nil {\\n  log.Fatal(err)\\n}\\n\\n// pass the full path to the binary and the name of the temporary file\\n// instead of any user supplied filename\\nout, err := exec.Command(\\"/bin/cat\\", f.Name()).Output()\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP OS Command Injection](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 106,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 15,
          "end": 61
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 15,
          "end": 61
        },
        "content": "syscall.StartProcess(command, []string{}, nil)"
      },
      "parent_line_number": 106,
      "snippet": "syscall.StartProcess(command, []string{}, nil)",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_6",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_6",
      "code_extract": "\\t_, _, err := syscall.StartProcess(command, []string{}, nil)"
    },
    {
      "cwe_ids": [
        "95"
      ],
      "id": "go_gosec_injection_subproc_injection",
      "title": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "description": "## Description\\n\\nOS command injection is a critical vulnerability that can lead to a full system compromise as it may allow an adversary to pass in arbitrary commands or arguments to be executed.\\n\\n## Remediations\\n\\n❌ User input should never be used in constructing commands or command arguments to functions which execute OS commands. This includes filenames supplied by user uploads or downloads.\\n\\n✅ Ensure your application does not:\\n\\n- Use user-supplied information in the process name to execute.\\n- Use user-supplied information in an OS command execution function which does not escape shell meta-characters.\\n- Use user-supplied information in arguments to OS commands.\\n\\nThe application should have a hardcoded set of arguments that are to be passed to OS commands. If filenames are being passed to these functions, it is recommended that a hash of the filename be used instead, or some other unique identifier. It is strongly recommended that a native library that implements the same functionality be used instead of using OS system commands, due to the risk of unknown attacks against third party commands.\\n\\n\`\`\`go\\nuserData := []byte(\\"user data\\")\\n// create a temporary file in the application specific directory\\nf, err := ioutil.TempFile(\\"/var/app/restricted\\", \\"temp-*.dat\\")\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\\nif _, err := f.Write(userData); err != nil {\\n  log.Fatal(err)\\n}\\n\\nif err := f.Close(); err != nil {\\n  log.Fatal(err)\\n}\\n\\n// pass the full path to the binary and the name of the temporary file\\n// instead of any user supplied filename\\nout, err := exec.Command(\\"/bin/cat\\", f.Name()).Output()\\nif err != nil {\\n  log.Fatal(err)\\n}\\n\`\`\`\\n\\n## Resources\\n\\n- [OWASP OS Command Injection](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection",
      "line_number": 130,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 130,
        "end": 130,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 130,
        "end": 130,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "exec.CommandContext(context.Background(), os.Args[0], \\"5\\")"
      },
      "parent_line_number": 130,
      "snippet": "exec.CommandContext(context.Background(), os.Args[0], \\"5\\")",
      "fingerprint": "e873320a35cd659369a6c8d2ac40f9cd_7",
      "old_fingerprint": "f4ac6999992abf88d09564e3aebce4fb_7",
      "code_extract": "\\terr := exec.CommandContext(context.Background(), os.Args[0], \\"5\\").Run() // detected"
    }
  ]
}"
`;
