// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`go_gosec_http_http_serve test 1`] = `
"{
  "low": [
    {
      "cwe_ids": [
        "400"
      ],
      "id": "go_gosec_http_http_serve",
      "title": "Usage of vulnerable 'serve' function",
      "description": "## Description\\n\\nThe \`net/http\` serve functions in Go, when used with default settings, are vulnerable to resource consumption attacks. Attackers can exploit this by creating numerous connections to the server, intentionally not completing data transfers or leaving connections open, which can exhaust the server's resources and prevent it from accepting new legitimate connections.\\n\\n## Remediations\\n\\nTo mitigate such attacks, specific server configurations are necessary:\\n\\n❌ Avoid Default Serve Functions for Production\\n\\nFunctions like \`http.ListenAndServe\` and \`http.Serve\` should not be used in a production setting as they do not allow for timeout configurations.\\n\\n✅ Configure Timeouts on Custom \`http.Server\` Object\\n\\nCreate a custom \`http.Server\` object and set appropriate timeouts to prevent resource exhaustion.\\n\\n\`\`\`go\\nimport (\\n    \\"net/http\\"\\n    \\"time\\"\\n    \\"log\\"\\n)\\n\\nfunc main() {\\n    srv := &http.Server{\\n        Addr:             \\"localhost:8000\\",\\n        ReadHeaderTimeout: 15 * time.Second,\\n        ReadTimeout:      15 * time.Second,\\n        WriteTimeout:     10 * time.Second,\\n        IdleTimeout:      30 * time.Second,\\n    }\\n\\n    if err := srv.ListenAndServe(); err != nil {\\n        log.Fatal(err)\\n    }\\n}\\n\`\`\`\\n\\n✅ Use \`http.TimeoutHandler\` for Per Request Timeouts\\n\\nTo set timeouts for individual requests, use the \`http.TimeoutHandler\` wrapper on your handlers. This ensures that the server does not wait indefinitely for a request to complete.\\n\\n## Resources\\n\\n- [http.Server Timeouts Documentation](https://pkg.go.dev/net/http#Server)\\n- [Guide to Setting Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\\n- [Understanding the Slowloris Attack](https://en.wikipedia.org/wiki/Slowloris_(computer_security))\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_http_http_serve",
      "line_number": 12,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "http.ListenAndServe(\\":8443\\", nil)"
      },
      "parent_line_number": 12,
      "snippet": "http.ListenAndServe(\\":8443\\", nil)",
      "fingerprint": "6f179bc162124459b0090fb499c31d43_0",
      "old_fingerprint": "719e09cb6b2922d8ae44e9968c9c756f_0",
      "code_extract": "\\terr := http.ListenAndServe(\\":8443\\", nil)"
    },
    {
      "cwe_ids": [
        "400"
      ],
      "id": "go_gosec_http_http_serve",
      "title": "Usage of vulnerable 'serve' function",
      "description": "## Description\\n\\nThe \`net/http\` serve functions in Go, when used with default settings, are vulnerable to resource consumption attacks. Attackers can exploit this by creating numerous connections to the server, intentionally not completing data transfers or leaving connections open, which can exhaust the server's resources and prevent it from accepting new legitimate connections.\\n\\n## Remediations\\n\\nTo mitigate such attacks, specific server configurations are necessary:\\n\\n❌ Avoid Default Serve Functions for Production\\n\\nFunctions like \`http.ListenAndServe\` and \`http.Serve\` should not be used in a production setting as they do not allow for timeout configurations.\\n\\n✅ Configure Timeouts on Custom \`http.Server\` Object\\n\\nCreate a custom \`http.Server\` object and set appropriate timeouts to prevent resource exhaustion.\\n\\n\`\`\`go\\nimport (\\n    \\"net/http\\"\\n    \\"time\\"\\n    \\"log\\"\\n)\\n\\nfunc main() {\\n    srv := &http.Server{\\n        Addr:             \\"localhost:8000\\",\\n        ReadHeaderTimeout: 15 * time.Second,\\n        ReadTimeout:      15 * time.Second,\\n        WriteTimeout:     10 * time.Second,\\n        IdleTimeout:      30 * time.Second,\\n    }\\n\\n    if err := srv.ListenAndServe(); err != nil {\\n        log.Fatal(err)\\n    }\\n}\\n\`\`\`\\n\\n✅ Use \`http.TimeoutHandler\` for Per Request Timeouts\\n\\nTo set timeouts for individual requests, use the \`http.TimeoutHandler\` wrapper on your handlers. This ensures that the server does not wait indefinitely for a request to complete.\\n\\n## Resources\\n\\n- [http.Server Timeouts Documentation](https://pkg.go.dev/net/http#Server)\\n- [Guide to Setting Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\\n- [Understanding the Slowloris Attack](https://en.wikipedia.org/wiki/Slowloris_(computer_security))\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_http_http_serve",
      "line_number": 17,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 9,
          "end": 68
        }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 9,
          "end": 68
        },
        "content": "http.ListenAndServeTLS(\\":8443\\", \\"cert.pem\\", \\"key.pem\\", nil)"
      },
      "parent_line_number": 17,
      "snippet": "http.ListenAndServeTLS(\\":8443\\", \\"cert.pem\\", \\"key.pem\\", nil)",
      "fingerprint": "6f179bc162124459b0090fb499c31d43_1",
      "old_fingerprint": "719e09cb6b2922d8ae44e9968c9c756f_1",
      "code_extract": "\\terr := http.ListenAndServeTLS(\\":8443\\", \\"cert.pem\\", \\"key.pem\\", nil)"
    },
    {
      "cwe_ids": [
        "400"
      ],
      "id": "go_gosec_http_http_serve",
      "title": "Usage of vulnerable 'serve' function",
      "description": "## Description\\n\\nThe \`net/http\` serve functions in Go, when used with default settings, are vulnerable to resource consumption attacks. Attackers can exploit this by creating numerous connections to the server, intentionally not completing data transfers or leaving connections open, which can exhaust the server's resources and prevent it from accepting new legitimate connections.\\n\\n## Remediations\\n\\nTo mitigate such attacks, specific server configurations are necessary:\\n\\n❌ Avoid Default Serve Functions for Production\\n\\nFunctions like \`http.ListenAndServe\` and \`http.Serve\` should not be used in a production setting as they do not allow for timeout configurations.\\n\\n✅ Configure Timeouts on Custom \`http.Server\` Object\\n\\nCreate a custom \`http.Server\` object and set appropriate timeouts to prevent resource exhaustion.\\n\\n\`\`\`go\\nimport (\\n    \\"net/http\\"\\n    \\"time\\"\\n    \\"log\\"\\n)\\n\\nfunc main() {\\n    srv := &http.Server{\\n        Addr:             \\"localhost:8000\\",\\n        ReadHeaderTimeout: 15 * time.Second,\\n        ReadTimeout:      15 * time.Second,\\n        WriteTimeout:     10 * time.Second,\\n        IdleTimeout:      30 * time.Second,\\n    }\\n\\n    if err := srv.ListenAndServe(); err != nil {\\n        log.Fatal(err)\\n    }\\n}\\n\`\`\`\\n\\n✅ Use \`http.TimeoutHandler\` for Per Request Timeouts\\n\\nTo set timeouts for individual requests, use the \`http.TimeoutHandler\` wrapper on your handlers. This ensures that the server does not wait indefinitely for a request to complete.\\n\\n## Resources\\n\\n- [http.Server Timeouts Documentation](https://pkg.go.dev/net/http#Server)\\n- [Guide to Setting Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\\n- [Understanding the Slowloris Attack](https://en.wikipedia.org/wiki/Slowloris_(computer_security))\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_http_http_serve",
      "line_number": 27,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 27,
        "end": 27,
        "column": {
          "start": 8,
          "end": 26
        }
      },
      "sink": {
        "start": 27,
        "end": 27,
        "column": {
          "start": 8,
          "end": 26
        },
        "content": "http.Serve(l, nil)"
      },
      "parent_line_number": 27,
      "snippet": "http.Serve(l, nil)",
      "fingerprint": "6f179bc162124459b0090fb499c31d43_2",
      "old_fingerprint": "719e09cb6b2922d8ae44e9968c9c756f_2",
      "code_extract": "\\terr = http.Serve(l, nil)"
    },
    {
      "cwe_ids": [
        "400"
      ],
      "id": "go_gosec_http_http_serve",
      "title": "Usage of vulnerable 'serve' function",
      "description": "## Description\\n\\nThe \`net/http\` serve functions in Go, when used with default settings, are vulnerable to resource consumption attacks. Attackers can exploit this by creating numerous connections to the server, intentionally not completing data transfers or leaving connections open, which can exhaust the server's resources and prevent it from accepting new legitimate connections.\\n\\n## Remediations\\n\\nTo mitigate such attacks, specific server configurations are necessary:\\n\\n❌ Avoid Default Serve Functions for Production\\n\\nFunctions like \`http.ListenAndServe\` and \`http.Serve\` should not be used in a production setting as they do not allow for timeout configurations.\\n\\n✅ Configure Timeouts on Custom \`http.Server\` Object\\n\\nCreate a custom \`http.Server\` object and set appropriate timeouts to prevent resource exhaustion.\\n\\n\`\`\`go\\nimport (\\n    \\"net/http\\"\\n    \\"time\\"\\n    \\"log\\"\\n)\\n\\nfunc main() {\\n    srv := &http.Server{\\n        Addr:             \\"localhost:8000\\",\\n        ReadHeaderTimeout: 15 * time.Second,\\n        ReadTimeout:      15 * time.Second,\\n        WriteTimeout:     10 * time.Second,\\n        IdleTimeout:      30 * time.Second,\\n    }\\n\\n    if err := srv.ListenAndServe(); err != nil {\\n        log.Fatal(err)\\n    }\\n}\\n\`\`\`\\n\\n✅ Use \`http.TimeoutHandler\` for Per Request Timeouts\\n\\nTo set timeouts for individual requests, use the \`http.TimeoutHandler\` wrapper on your handlers. This ensures that the server does not wait indefinitely for a request to complete.\\n\\n## Resources\\n\\n- [http.Server Timeouts Documentation](https://pkg.go.dev/net/http#Server)\\n- [Guide to Setting Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\\n- [Understanding the Slowloris Attack](https://en.wikipedia.org/wiki/Slowloris_(computer_security))\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/go_gosec_http_http_serve",
      "line_number": 37,
      "full_filename": "/tmp/bearer-scan/main.go",
      "filename": ".",
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 8,
          "end": 52
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 8,
          "end": 52
        },
        "content": "http.ServeTLS(l, nil, \\"cert.pem\\", \\"key.pem\\")"
      },
      "parent_line_number": 37,
      "snippet": "http.ServeTLS(l, nil, \\"cert.pem\\", \\"key.pem\\")",
      "fingerprint": "6f179bc162124459b0090fb499c31d43_3",
      "old_fingerprint": "719e09cb6b2922d8ae44e9968c9c756f_3",
      "code_extract": "\\terr = http.ServeTLS(l, nil, \\"cert.pem\\", \\"key.pem\\")"
    }
  ]
}"
`;
