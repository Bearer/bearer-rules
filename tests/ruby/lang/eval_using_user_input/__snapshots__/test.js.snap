// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ruby_lang_eval_using_user_input ok_not_unsafe 1`] = `"{}"`;

exports[`ruby_lang_eval_using_user_input unsafe_event 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 2,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 3,
          "end": 53
        }
      },
      "sink": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 3,
          "end": 53
        },
        "content": "RubyVM::InstructionSequence.compile(event[\\"oops\\"])"
      },
      "parent_line_number": 2,
      "snippet": "RubyVM::InstructionSequence.compile(event[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_0",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_0",
      "code_extract": "  RubyVM::InstructionSequence.compile(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 4,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 3,
          "end": 32
        }
      },
      "sink": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 3,
          "end": 32
        },
        "content": "a.eval(event[\\"oops\\"], \\"test\\")"
      },
      "parent_line_number": 4,
      "snippet": "a.eval(event[\\"oops\\"], \\"test\\")",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_1",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_1",
      "code_extract": "  a.eval(event[\\"oops\\"], \\"test\\")"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 6,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 6,
        "end": 6,
        "column": {
          "start": 3,
          "end": 33
        }
      },
      "sink": {
        "start": 6,
        "end": 6,
        "column": {
          "start": 3,
          "end": 33
        },
        "content": "a.instance_eval(event[\\"oops\\"])"
      },
      "parent_line_number": 6,
      "snippet": "a.instance_eval(event[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_2",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_2",
      "code_extract": "  a.instance_eval(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 8,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 8,
        "end": 8,
        "column": {
          "start": 3,
          "end": 30
        }
      },
      "sink": {
        "start": 8,
        "end": 8,
        "column": {
          "start": 3,
          "end": 30
        },
        "content": "a.class_eval(event[\\"oops\\"])"
      },
      "parent_line_number": 8,
      "snippet": "a.class_eval(event[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_3",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_3",
      "code_extract": "  a.class_eval(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 3,
          "end": 31
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 3,
          "end": 31
        },
        "content": "a.module_eval(event[\\"oops\\"])"
      },
      "parent_line_number": 10,
      "snippet": "a.module_eval(event[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_4",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_4",
      "code_extract": "  a.module_eval(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 12,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 3,
          "end": 22
        }
      },
      "sink": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 3,
          "end": 22
        },
        "content": "eval(event[\\"oops\\"])"
      },
      "parent_line_number": 12,
      "snippet": "eval(event[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_5",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_5",
      "code_extract": "  eval(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 14,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 3,
          "end": 39
        }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 3,
          "end": 39
        },
        "content": "instance_eval(event[\\"oops\\"], \\"test\\")"
      },
      "parent_line_number": 14,
      "snippet": "instance_eval(event[\\"oops\\"], \\"test\\")",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_6",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_6",
      "code_extract": "  instance_eval(event[\\"oops\\"], \\"test\\")"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 16,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 16,
        "end": 16,
        "column": {
          "start": 3,
          "end": 28
        }
      },
      "sink": {
        "start": 16,
        "end": 16,
        "column": {
          "start": 3,
          "end": 28
        },
        "content": "class_eval(event[\\"oops\\"])"
      },
      "parent_line_number": 16,
      "snippet": "class_eval(event[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_7",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_7",
      "code_extract": "  class_eval(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 18,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 18,
        "end": 18,
        "column": {
          "start": 3,
          "end": 29
        }
      },
      "sink": {
        "start": 18,
        "end": 18,
        "column": {
          "start": 3,
          "end": 29
        },
        "content": "module_eval(event[\\"oops\\"])"
      },
      "parent_line_number": 18,
      "snippet": "module_eval(event[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_8",
      "old_fingerprint": "6ed683ef427119396ac6fec2dd163b2d_8",
      "code_extract": "  module_eval(event[\\"oops\\"])"
    }
  ]
}"
`;

exports[`ruby_lang_eval_using_user_input unsafe_params 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 1,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 52
        }
      },
      "sink": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 52
        },
        "content": "RubyVM::InstructionSequence.compile(params[\\"oops\\"])"
      },
      "parent_line_number": 1,
      "snippet": "RubyVM::InstructionSequence.compile(params[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_0",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_0",
      "code_extract": "RubyVM::InstructionSequence.compile(params[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 3,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 31
        }
      },
      "sink": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 31
        },
        "content": "a.eval(params[\\"oops\\"], \\"test\\")"
      },
      "parent_line_number": 3,
      "snippet": "a.eval(params[\\"oops\\"], \\"test\\")",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_1",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_1",
      "code_extract": "a.eval(params[\\"oops\\"], \\"test\\")"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 5,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 32
        }
      },
      "sink": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 32
        },
        "content": "a.instance_eval(params[\\"oops\\"])"
      },
      "parent_line_number": 5,
      "snippet": "a.instance_eval(params[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_2",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_2",
      "code_extract": "a.instance_eval(params[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 7,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 29
        }
      },
      "sink": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 29
        },
        "content": "a.class_eval(params[\\"oops\\"])"
      },
      "parent_line_number": 7,
      "snippet": "a.class_eval(params[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_3",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_3",
      "code_extract": "a.class_eval(params[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 9,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 1,
          "end": 30
        }
      },
      "sink": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 1,
          "end": 30
        },
        "content": "a.module_eval(params[\\"oops\\"])"
      },
      "parent_line_number": 9,
      "snippet": "a.module_eval(params[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_4",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_4",
      "code_extract": "a.module_eval(params[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 11,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 1,
          "end": 21
        }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 1,
          "end": 21
        },
        "content": "eval(params[\\"oops\\"])"
      },
      "parent_line_number": 11,
      "snippet": "eval(params[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_5",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_5",
      "code_extract": "eval(params[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 13,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 38
        }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 38
        },
        "content": "instance_eval(params[\\"oops\\"], \\"test\\")"
      },
      "parent_line_number": 13,
      "snippet": "instance_eval(params[\\"oops\\"], \\"test\\")",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_6",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_6",
      "code_extract": "instance_eval(params[\\"oops\\"], \\"test\\")"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 15,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 1,
          "end": 27
        }
      },
      "sink": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 1,
          "end": 27
        },
        "content": "class_eval(params[\\"oops\\"])"
      },
      "parent_line_number": 15,
      "snippet": "class_eval(params[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_7",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_7",
      "code_extract": "class_eval(params[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 17,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 1,
          "end": 28
        }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 1,
          "end": 28
        },
        "content": "module_eval(params[\\"oops\\"])"
      },
      "parent_line_number": 17,
      "snippet": "module_eval(params[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_8",
      "old_fingerprint": "7170a471695a2cb206343b39cc5eb83f_8",
      "code_extract": "module_eval(params[\\"oops\\"])"
    }
  ]
}"
`;

exports[`ruby_lang_eval_using_user_input unsafe_request 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 1,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 57
        }
      },
      "sink": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 57
        },
        "content": "RubyVM::InstructionSequence.compile(request.env[\\"oops\\"])"
      },
      "parent_line_number": 1,
      "snippet": "RubyVM::InstructionSequence.compile(request.env[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_0",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_0",
      "code_extract": "RubyVM::InstructionSequence.compile(request.env[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 3,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 36
        }
      },
      "sink": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 36
        },
        "content": "a.eval(request.env[\\"oops\\"], \\"test\\")"
      },
      "parent_line_number": 3,
      "snippet": "a.eval(request.env[\\"oops\\"], \\"test\\")",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_1",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_1",
      "code_extract": "a.eval(request.env[\\"oops\\"], \\"test\\")"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 5,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 37
        }
      },
      "sink": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 37
        },
        "content": "a.instance_eval(request.env[\\"oops\\"])"
      },
      "parent_line_number": 5,
      "snippet": "a.instance_eval(request.env[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_2",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_2",
      "code_extract": "a.instance_eval(request.env[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 7,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 34
        }
      },
      "sink": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 34
        },
        "content": "a.class_eval(request.env[\\"oops\\"])"
      },
      "parent_line_number": 7,
      "snippet": "a.class_eval(request.env[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_3",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_3",
      "code_extract": "a.class_eval(request.env[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 9,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 1,
          "end": 35
        }
      },
      "sink": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 1,
          "end": 35
        },
        "content": "a.module_eval(request.env[\\"oops\\"])"
      },
      "parent_line_number": 9,
      "snippet": "a.module_eval(request.env[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_4",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_4",
      "code_extract": "a.module_eval(request.env[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 11,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 1,
          "end": 26
        }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 1,
          "end": 26
        },
        "content": "eval(request.env[\\"oops\\"])"
      },
      "parent_line_number": 11,
      "snippet": "eval(request.env[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_5",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_5",
      "code_extract": "eval(request.env[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 13,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 43
        }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 43
        },
        "content": "instance_eval(request.env[\\"oops\\"], \\"test\\")"
      },
      "parent_line_number": 13,
      "snippet": "instance_eval(request.env[\\"oops\\"], \\"test\\")",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_6",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_6",
      "code_extract": "instance_eval(request.env[\\"oops\\"], \\"test\\")"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 15,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 1,
          "end": 32
        }
      },
      "sink": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 1,
          "end": 32
        },
        "content": "class_eval(request.env[\\"oops\\"])"
      },
      "parent_line_number": 15,
      "snippet": "class_eval(request.env[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_7",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_7",
      "code_extract": "class_eval(request.env[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "94",
        "95"
      ],
      "id": "ruby_lang_eval_using_user_input",
      "title": "Potential command injection with user input detected.",
      "description": "## Description\\nIt is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.\\n\\n## Remediations\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nIt might be possible to use dynamic hardcoded values, instead of user input directly.\\n\\n\`\`\`ruby\\nget_total_str = if params[\\"include_vat\\"]\\n  \\"def get_total(a,b,c); a + b + c; end\\"\\nelse\\n  \\"def get_total(a,b); a + b; end\\"\\nend\\n\\ncart.instance_eval(get_total_str)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input",
      "line_number": 17,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 1,
          "end": 33
        }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": {
          "start": 1,
          "end": 33
        },
        "content": "module_eval(request.env[\\"oops\\"])"
      },
      "parent_line_number": 17,
      "snippet": "module_eval(request.env[\\"oops\\"])",
      "fingerprint": "c6c863e06a572d469f9d34897bd78ca4_8",
      "old_fingerprint": "a103c54ad162c91391ed72c32a4fe7b2_8",
      "code_extract": "module_eval(request.env[\\"oops\\"])"
    }
  ]
}"
`;
