// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ruby_lang_deserialization_of_user_input ok_not_unsafe 1`] = `"{}"`;

exports[`ruby_lang_deserialization_of_user_input unsafe_event 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 2,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 3,
          "end": 27
        }
      },
      "sink": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 3,
          "end": 27
        },
        "content": "YAML.load(event[\\"oops\\"])"
      },
      "parent_line_number": 2,
      "snippet": "YAML.load(event[\\"oops\\"])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_0",
      "old_fingerprint": "cd1cc9f0914dba6da8db1cd87ec0912a_0",
      "code_extract": "  YAML.load(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 4,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 3,
          "end": 28
        }
      },
      "sink": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 3,
          "end": 28
        },
        "content": "Psych.load(event[\\"oops\\"])"
      },
      "parent_line_number": 4,
      "snippet": "Psych.load(event[\\"oops\\"])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_1",
      "old_fingerprint": "cd1cc9f0914dba6da8db1cd87ec0912a_1",
      "code_extract": "  Psych.load(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 6,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 6,
        "end": 6,
        "column": {
          "start": 3,
          "end": 27
        }
      },
      "sink": {
        "start": 6,
        "end": 6,
        "column": {
          "start": 3,
          "end": 27
        },
        "content": "Syck.load(event[\\"oops\\"])"
      },
      "parent_line_number": 6,
      "snippet": "Syck.load(event[\\"oops\\"])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_2",
      "old_fingerprint": "cd1cc9f0914dba6da8db1cd87ec0912a_2",
      "code_extract": "  Syck.load(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 8,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 8,
        "end": 8,
        "column": {
          "start": 3,
          "end": 27
        }
      },
      "sink": {
        "start": 8,
        "end": 8,
        "column": {
          "start": 3,
          "end": 27
        },
        "content": "JSON.load(event[\\"oops\\"])"
      },
      "parent_line_number": 8,
      "snippet": "JSON.load(event[\\"oops\\"])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_3",
      "old_fingerprint": "cd1cc9f0914dba6da8db1cd87ec0912a_3",
      "code_extract": "  JSON.load(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 3,
          "end": 25
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 3,
          "end": 25
        },
        "content": "Oj.load(event[\\"oops\\"])"
      },
      "parent_line_number": 10,
      "snippet": "Oj.load(event[\\"oops\\"])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_4",
      "old_fingerprint": "cd1cc9f0914dba6da8db1cd87ec0912a_4",
      "code_extract": "  Oj.load(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 11,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 11,
        "end": 12,
        "column": {
          "start": 3,
          "end": 6
        }
      },
      "sink": {
        "start": 11,
        "end": 12,
        "column": {
          "start": 3,
          "end": 6
        },
        "content": "Oj.object_load(event[\\"oops\\"]) do |json|\\n  end"
      },
      "parent_line_number": 11,
      "snippet": "Oj.object_load(event[\\"oops\\"]) do |json|\\n  end",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_5",
      "old_fingerprint": "cd1cc9f0914dba6da8db1cd87ec0912a_5",
      "code_extract": "  Oj.object_load(event[\\"oops\\"]) do |json|\\n  end"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 14,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 3,
          "end": 30
        }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 3,
          "end": 30
        },
        "content": "Marshal.load(event[\\"oops\\"])"
      },
      "parent_line_number": 14,
      "snippet": "Marshal.load(event[\\"oops\\"])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_6",
      "old_fingerprint": "cd1cc9f0914dba6da8db1cd87ec0912a_6",
      "code_extract": "  Marshal.load(event[\\"oops\\"])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 15,
      "full_filename": "/tmp/bearer-scan/unsafe_event.rb",
      "filename": ".",
      "source": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 3,
          "end": 33
        }
      },
      "sink": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 3,
          "end": 33
        },
        "content": "Marshal.restore(event[\\"oops\\"])"
      },
      "parent_line_number": 15,
      "snippet": "Marshal.restore(event[\\"oops\\"])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_7",
      "old_fingerprint": "cd1cc9f0914dba6da8db1cd87ec0912a_7",
      "code_extract": "  Marshal.restore(event[\\"oops\\"])"
    }
  ]
}"
`;

exports[`ruby_lang_deserialization_of_user_input unsafe_params 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 1,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 25
        }
      },
      "sink": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 25
        },
        "content": "YAML.load(params[:oops])"
      },
      "parent_line_number": 1,
      "snippet": "YAML.load(params[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_0",
      "old_fingerprint": "55f5ba7de5388bd9d194ac766273fd0f_0",
      "code_extract": "YAML.load(params[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 3,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 26
        }
      },
      "sink": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 26
        },
        "content": "Psych.load(params[:oops])"
      },
      "parent_line_number": 3,
      "snippet": "Psych.load(params[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_1",
      "old_fingerprint": "55f5ba7de5388bd9d194ac766273fd0f_1",
      "code_extract": "Psych.load(params[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 5,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 25
        }
      },
      "sink": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 25
        },
        "content": "Syck.load(params[:oops])"
      },
      "parent_line_number": 5,
      "snippet": "Syck.load(params[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_2",
      "old_fingerprint": "55f5ba7de5388bd9d194ac766273fd0f_2",
      "code_extract": "Syck.load(params[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 7,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 25
        }
      },
      "sink": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 25
        },
        "content": "JSON.load(params[:oops])"
      },
      "parent_line_number": 7,
      "snippet": "JSON.load(params[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_3",
      "old_fingerprint": "55f5ba7de5388bd9d194ac766273fd0f_3",
      "code_extract": "JSON.load(params[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 9,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 9,
        "end": 10,
        "column": {
          "start": 1,
          "end": 4
        }
      },
      "sink": {
        "start": 9,
        "end": 10,
        "column": {
          "start": 1,
          "end": 4
        },
        "content": "Oj.load(params[:oops]) do |json|\\nend"
      },
      "parent_line_number": 9,
      "snippet": "Oj.load(params[:oops]) do |json|\\nend",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_4",
      "old_fingerprint": "55f5ba7de5388bd9d194ac766273fd0f_4",
      "code_extract": "Oj.load(params[:oops]) do |json|\\nend"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 11,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 1,
          "end": 30
        }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 1,
          "end": 30
        },
        "content": "Oj.object_load(params[:oops])"
      },
      "parent_line_number": 11,
      "snippet": "Oj.object_load(params[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_5",
      "old_fingerprint": "55f5ba7de5388bd9d194ac766273fd0f_5",
      "code_extract": "Oj.object_load(params[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 13,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 28
        }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 28
        },
        "content": "Marshal.load(params[:oops])"
      },
      "parent_line_number": 13,
      "snippet": "Marshal.load(params[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_6",
      "old_fingerprint": "55f5ba7de5388bd9d194ac766273fd0f_6",
      "code_extract": "Marshal.load(params[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 14,
      "full_filename": "/tmp/bearer-scan/unsafe_params.rb",
      "filename": ".",
      "source": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 1,
          "end": 31
        }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 1,
          "end": 31
        },
        "content": "Marshal.restore(params[:oops])"
      },
      "parent_line_number": 14,
      "snippet": "Marshal.restore(params[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_7",
      "old_fingerprint": "55f5ba7de5388bd9d194ac766273fd0f_7",
      "code_extract": "Marshal.restore(params[:oops])"
    }
  ]
}"
`;

exports[`ruby_lang_deserialization_of_user_input unsafe_request 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 1,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 30
        }
      },
      "sink": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 30
        },
        "content": "YAML.load(request.env[:oops])"
      },
      "parent_line_number": 1,
      "snippet": "YAML.load(request.env[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_0",
      "old_fingerprint": "1a016949d3db4c803f86792602d92bcc_0",
      "code_extract": "YAML.load(request.env[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 3,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 31
        }
      },
      "sink": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 31
        },
        "content": "Psych.load(request.env[:oops])"
      },
      "parent_line_number": 3,
      "snippet": "Psych.load(request.env[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_1",
      "old_fingerprint": "1a016949d3db4c803f86792602d92bcc_1",
      "code_extract": "Psych.load(request.env[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 5,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 30
        }
      },
      "sink": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 30
        },
        "content": "Syck.load(request.env[:oops])"
      },
      "parent_line_number": 5,
      "snippet": "Syck.load(request.env[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_2",
      "old_fingerprint": "1a016949d3db4c803f86792602d92bcc_2",
      "code_extract": "Syck.load(request.env[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 7,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 30
        }
      },
      "sink": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 30
        },
        "content": "JSON.load(request.env[:oops])"
      },
      "parent_line_number": 7,
      "snippet": "JSON.load(request.env[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_3",
      "old_fingerprint": "1a016949d3db4c803f86792602d92bcc_3",
      "code_extract": "JSON.load(request.env[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 9,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 1,
          "end": 28
        }
      },
      "sink": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 1,
          "end": 28
        },
        "content": "Oj.load(request.env[:oops])"
      },
      "parent_line_number": 9,
      "snippet": "Oj.load(request.env[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_4",
      "old_fingerprint": "1a016949d3db4c803f86792602d92bcc_4",
      "code_extract": "Oj.load(request.env[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 11,
        "column": {
          "start": 1,
          "end": 4
        }
      },
      "sink": {
        "start": 10,
        "end": 11,
        "column": {
          "start": 1,
          "end": 4
        },
        "content": "Oj.object_load(request.env[:oops]) do |json|\\nend"
      },
      "parent_line_number": 10,
      "snippet": "Oj.object_load(request.env[:oops]) do |json|\\nend",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_5",
      "old_fingerprint": "1a016949d3db4c803f86792602d92bcc_5",
      "code_extract": "Oj.object_load(request.env[:oops]) do |json|\\nend"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 13,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 33
        }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 33
        },
        "content": "Marshal.load(request.env[:oops])"
      },
      "parent_line_number": 13,
      "snippet": "Marshal.load(request.env[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_6",
      "old_fingerprint": "1a016949d3db4c803f86792602d92bcc_6",
      "code_extract": "Marshal.load(request.env[:oops])"
    },
    {
      "cwe_ids": [
        "502"
      ],
      "id": "ruby_lang_deserialization_of_user_input",
      "title": "User input detected in an unsafe deserialization method.",
      "description": "## Description\\nIt is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.\\nAttackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.\\n\\n## Remediations\\n❌ Do not deserialize untrusted data\\n\\n✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML\\n\\nAvoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.\\n\\n\`\`\`ruby\\n  user_data = JSON.parse(params[:user])\\n  # handle any parsing errors\\n\\n  JSON.load(user)\\n\`\`\`\\n\\n## Resources\\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input",
      "line_number": 14,
      "full_filename": "/tmp/bearer-scan/unsafe_request.rb",
      "filename": ".",
      "source": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 1,
          "end": 36
        }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": {
          "start": 1,
          "end": 36
        },
        "content": "Marshal.restore(request.env[:oops])"
      },
      "parent_line_number": 14,
      "snippet": "Marshal.restore(request.env[:oops])",
      "fingerprint": "73baed8cdf6590c9f10d9841a0709fd9_7",
      "old_fingerprint": "1a016949d3db4c803f86792602d92bcc_7",
      "code_extract": "Marshal.restore(request.env[:oops])"
    }
  ]
}"
`;
