// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ruby_lang_ssl_verification ok_verification_enabled 1`] = `"{}"`;

exports[`ruby_lang_ssl_verification verification_disabled 1`] = `
"{
  "medium": [
    {
      "cwe_ids": [
        "295"
      ],
      "id": "ruby_lang_ssl_verification",
      "title": "Missing SSL certificate verification",
      "description": "## Description\\n\\nApplications processing sensitive data should use valid SSL certificates. This rule checks if SSL verification is enabled.\\n\\n## Remediations\\n\\n❌ By default Ruby check for SSL certificate verification but this can be bypassed when setting Open SSL verification mode to \`VERIFY_NONE\`:\\n\\n\`\`\`clojure\\nrequire \\"net/https\\"\\nrequire \\"uri\\"\\n\\nuri = URI.parse(\\"https://ssl-site.com/\\")\\nhttp = Net::HTTP.new(uri.host, uri.port)\\nhttp.use_ssl = true\\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\\n\`\`\`\\n\\n✅ To ensure that SSL verification always happens, make sure to use the following mode:\\n\\n\`\`\`bash\\nhttp.verify_mode = OpenSSL::SSL::VERIFY_PEER\\n\`\`\`\\n\\n## Resources\\n- [Ruby OpenSSL module](https://ruby.github.io/openssl/OpenSSL.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_ssl_verification",
      "line_number": 1,
      "full_filename": "/tmp/bearer-scan/verification_disabled.rb",
      "filename": ".",
      "source": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 45
        }
      },
      "sink": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 45
        },
        "content": "http.verify_mode = OpenSSL::SSL::VERIFY_NONE"
      },
      "parent_line_number": 1,
      "snippet": "http.verify_mode = OpenSSL::SSL::VERIFY_NONE",
      "fingerprint": "a5365845bf89898b802308907f944ba0_0",
      "old_fingerprint": "8a89556d2d42470a9dd26a5ce39fc0f0_0",
      "code_extract": "http.verify_mode = OpenSSL::SSL::VERIFY_NONE"
    },
    {
      "cwe_ids": [
        "295"
      ],
      "id": "ruby_lang_ssl_verification",
      "title": "Missing SSL certificate verification",
      "description": "## Description\\n\\nApplications processing sensitive data should use valid SSL certificates. This rule checks if SSL verification is enabled.\\n\\n## Remediations\\n\\n❌ By default Ruby check for SSL certificate verification but this can be bypassed when setting Open SSL verification mode to \`VERIFY_NONE\`:\\n\\n\`\`\`clojure\\nrequire \\"net/https\\"\\nrequire \\"uri\\"\\n\\nuri = URI.parse(\\"https://ssl-site.com/\\")\\nhttp = Net::HTTP.new(uri.host, uri.port)\\nhttp.use_ssl = true\\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\\n\`\`\`\\n\\n✅ To ensure that SSL verification always happens, make sure to use the following mode:\\n\\n\`\`\`bash\\nhttp.verify_mode = OpenSSL::SSL::VERIFY_PEER\\n\`\`\`\\n\\n## Resources\\n- [Ruby OpenSSL module](https://ruby.github.io/openssl/OpenSSL.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_lang_ssl_verification",
      "line_number": 4,
      "full_filename": "/tmp/bearer-scan/verification_disabled.rb",
      "filename": ".",
      "source": {
        "start": 4,
        "end": 6,
        "column": {
          "start": 1,
          "end": 4
        }
      },
      "sink": {
        "start": 4,
        "end": 6,
        "column": {
          "start": 1,
          "end": 4
        },
        "content": "Net::HTTP.start(uri.host, uri.port, :use_ssl => true, :verify_mode => OpenSSL::SSL::VERIFY_NONE) do |http|\\n  Net::HTTP::Get.new uri\\nend"
      },
      "parent_line_number": 4,
      "snippet": "Net::HTTP.start(uri.host, uri.port, :use_ssl => true, :verify_mode => OpenSSL::SSL::VERIFY_NONE) do |http|\\n  Net::HTTP::Get.new uri\\nend",
      "fingerprint": "a5365845bf89898b802308907f944ba0_1",
      "old_fingerprint": "8a89556d2d42470a9dd26a5ce39fc0f0_1",
      "code_extract": "Net::HTTP.start(uri.host, uri.port, :use_ssl => true, :verify_mode => OpenSSL::SSL::VERIFY_NONE) do |http|\\n  Net::HTTP::Get.new uri\\nend"
    }
  ]
}"
`;
