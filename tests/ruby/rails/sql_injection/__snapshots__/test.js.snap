// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ruby_rails_sql_injection injected_params 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "89"
      ],
      "id": "ruby_rails_sql_injection",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = #{params[:email]}\\")\\n\`\`\`\\n\\n✅ Use the ActiveRecord API wherever possible:\\n\\n\`\`\`ruby\\nUser.where(email: params[:email])\\n\`\`\`\\n\\n✅ Use bind variables:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = ?\\", [params[:email]])\\n\`\`\`\\n\\n✅ Santize the value manually:\\n\\n\`\`\`ruby\\nUser.where(sanitize_sql([\\"user.email = ?\\", params[:email]]))\\n\`\`\`\\n\\n## Resources\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_rails_sql_injection",
      "line_number": 1,
      "full_filename": "/tmp/bearer-scan/injected_params.rb",
      "filename": ".",
      "source": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 28
        }
      },
      "sink": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 28
        },
        "content": "User.find_by(params[:oops])"
      },
      "parent_line_number": 1,
      "snippet": "User.find_by(params[:oops])",
      "fingerprint": "4375e8a33c7009e3ee375e18f3a797b1_0",
      "old_fingerprint": "a81302659c0d03a625eebd21fae512b5_0",
      "code_extract": "User.find_by(params[:oops])"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "ruby_rails_sql_injection",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = #{params[:email]}\\")\\n\`\`\`\\n\\n✅ Use the ActiveRecord API wherever possible:\\n\\n\`\`\`ruby\\nUser.where(email: params[:email])\\n\`\`\`\\n\\n✅ Use bind variables:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = ?\\", [params[:email]])\\n\`\`\`\\n\\n✅ Santize the value manually:\\n\\n\`\`\`ruby\\nUser.where(sanitize_sql([\\"user.email = ?\\", params[:email]]))\\n\`\`\`\\n\\n## Resources\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_rails_sql_injection",
      "line_number": 2,
      "full_filename": "/tmp/bearer-scan/injected_params.rb",
      "filename": ".",
      "source": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 1,
          "end": 34
        }
      },
      "sink": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 1,
          "end": 34
        },
        "content": "find_by!(\\"oops #{params[:oops]}\\")"
      },
      "parent_line_number": 2,
      "snippet": "find_by!(\\"oops #{params[:oops]}\\")",
      "fingerprint": "4375e8a33c7009e3ee375e18f3a797b1_1",
      "old_fingerprint": "a81302659c0d03a625eebd21fae512b5_1",
      "code_extract": "find_by!(\\"oops #{params[:oops]}\\")"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "ruby_rails_sql_injection",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = #{params[:email]}\\")\\n\`\`\`\\n\\n✅ Use the ActiveRecord API wherever possible:\\n\\n\`\`\`ruby\\nUser.where(email: params[:email])\\n\`\`\`\\n\\n✅ Use bind variables:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = ?\\", [params[:email]])\\n\`\`\`\\n\\n✅ Santize the value manually:\\n\\n\`\`\`ruby\\nUser.where(sanitize_sql([\\"user.email = ?\\", params[:email]]))\\n\`\`\`\\n\\n## Resources\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_rails_sql_injection",
      "line_number": 3,
      "full_filename": "/tmp/bearer-scan/injected_params.rb",
      "filename": ".",
      "source": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 42
        }
      },
      "sink": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 42
        },
        "content": "User.joins(\\"INNER JOIN #{params[:oops]}\\")"
      },
      "parent_line_number": 3,
      "snippet": "User.joins(\\"INNER JOIN #{params[:oops]}\\")",
      "fingerprint": "4375e8a33c7009e3ee375e18f3a797b1_2",
      "old_fingerprint": "a81302659c0d03a625eebd21fae512b5_2",
      "code_extract": "User.joins(\\"INNER JOIN #{params[:oops]}\\")"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "ruby_rails_sql_injection",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = #{params[:email]}\\")\\n\`\`\`\\n\\n✅ Use the ActiveRecord API wherever possible:\\n\\n\`\`\`ruby\\nUser.where(email: params[:email])\\n\`\`\`\\n\\n✅ Use bind variables:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = ?\\", [params[:email]])\\n\`\`\`\\n\\n✅ Santize the value manually:\\n\\n\`\`\`ruby\\nUser.where(sanitize_sql([\\"user.email = ?\\", params[:email]]))\\n\`\`\`\\n\\n## Resources\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_rails_sql_injection",
      "line_number": 4,
      "full_filename": "/tmp/bearer-scan/injected_params.rb",
      "filename": ".",
      "source": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 1,
          "end": 35
        }
      },
      "sink": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 1,
          "end": 35
        },
        "content": "select(\\"#{params[:oops]} AS oops\\")"
      },
      "parent_line_number": 4,
      "snippet": "select(\\"#{params[:oops]} AS oops\\")",
      "fingerprint": "4375e8a33c7009e3ee375e18f3a797b1_3",
      "old_fingerprint": "a81302659c0d03a625eebd21fae512b5_3",
      "code_extract": "select(\\"#{params[:oops]} AS oops\\")"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "ruby_rails_sql_injection",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = #{params[:email]}\\")\\n\`\`\`\\n\\n✅ Use the ActiveRecord API wherever possible:\\n\\n\`\`\`ruby\\nUser.where(email: params[:email])\\n\`\`\`\\n\\n✅ Use bind variables:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = ?\\", [params[:email]])\\n\`\`\`\\n\\n✅ Santize the value manually:\\n\\n\`\`\`ruby\\nUser.where(sanitize_sql([\\"user.email = ?\\", params[:email]]))\\n\`\`\`\\n\\n## Resources\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_rails_sql_injection",
      "line_number": 7,
      "full_filename": "/tmp/bearer-scan/injected_params.rb",
      "filename": ".",
      "source": {
        "start": 7,
        "end": 9,
        "column": {
          "start": 1,
          "end": 28
        }
      },
      "sink": {
        "start": 7,
        "end": 9,
        "column": {
          "start": 1,
          "end": 28
        },
        "content": "User\\n  .where(\\"oops #{params[:one]}\\")\\n  .count(\\"#{params[:two]}\\")"
      },
      "parent_line_number": 7,
      "snippet": "User\\n  .where(\\"oops #{params[:one]}\\")\\n  .count(\\"#{params[:two]}\\")",
      "fingerprint": "4375e8a33c7009e3ee375e18f3a797b1_4",
      "old_fingerprint": "a81302659c0d03a625eebd21fae512b5_4",
      "code_extract": "User\\n  .where(\\"oops #{params[:one]}\\")\\n  .count(\\"#{params[:two]}\\")"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "ruby_rails_sql_injection",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = #{params[:email]}\\")\\n\`\`\`\\n\\n✅ Use the ActiveRecord API wherever possible:\\n\\n\`\`\`ruby\\nUser.where(email: params[:email])\\n\`\`\`\\n\\n✅ Use bind variables:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = ?\\", [params[:email]])\\n\`\`\`\\n\\n✅ Santize the value manually:\\n\\n\`\`\`ruby\\nUser.where(sanitize_sql([\\"user.email = ?\\", params[:email]]))\\n\`\`\`\\n\\n## Resources\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_rails_sql_injection",
      "line_number": 11,
      "full_filename": "/tmp/bearer-scan/injected_params.rb",
      "filename": ".",
      "source": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 1,
          "end": 68
        }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 1,
          "end": 68
        },
        "content": "ActiveRecord::Base.connection.exec_query(\\"SELECT #{params[:oops]}\\")"
      },
      "parent_line_number": 11,
      "snippet": "ActiveRecord::Base.connection.exec_query(\\"SELECT #{params[:oops]}\\")",
      "fingerprint": "4375e8a33c7009e3ee375e18f3a797b1_6",
      "old_fingerprint": "a81302659c0d03a625eebd21fae512b5_6",
      "code_extract": "ActiveRecord::Base.connection.exec_query(\\"SELECT #{params[:oops]}\\")"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "ruby_rails_sql_injection",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\\n\\nIncluding unsanitized data, such as user input or request data, in raw SQL\\nqueries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = #{params[:email]}\\")\\n\`\`\`\\n\\n✅ Use the ActiveRecord API wherever possible:\\n\\n\`\`\`ruby\\nUser.where(email: params[:email])\\n\`\`\`\\n\\n✅ Use bind variables:\\n\\n\`\`\`ruby\\nUser.where(\\"user.email = ?\\", [params[:email]])\\n\`\`\`\\n\\n✅ Santize the value manually:\\n\\n\`\`\`ruby\\nUser.where(sanitize_sql([\\"user.email = ?\\", params[:email]]))\\n\`\`\`\\n\\n## Resources\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n- [Securing Rails applications - SQL injection](https://guides.rubyonrails.org/security.html#sql-injection)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/ruby_rails_sql_injection",
      "line_number": 13,
      "full_filename": "/tmp/bearer-scan/injected_params.rb",
      "filename": ".",
      "source": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 49
        }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": {
          "start": 1,
          "end": 49
        },
        "content": "connection.select_all(\\"SELECT #{params[:oops]}\\")"
      },
      "parent_line_number": 13,
      "snippet": "connection.select_all(\\"SELECT #{params[:oops]}\\")",
      "fingerprint": "4375e8a33c7009e3ee375e18f3a797b1_7",
      "old_fingerprint": "a81302659c0d03a625eebd21fae512b5_7",
      "code_extract": "connection.select_all(\\"SELECT #{params[:oops]}\\")"
    }
  ]
}"
`;

exports[`ruby_rails_sql_injection ok_sanitized 1`] = `"{}"`;

exports[`ruby_rails_sql_injection ok_using_bind 1`] = `"{}"`;
