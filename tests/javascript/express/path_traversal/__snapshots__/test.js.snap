// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`javascript_express_path_traversal ok_no_path_traversal_vulnerability 1`] = `"{}"`;

exports[`javascript_express_path_traversal path_traversal_vulnerability 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "22"
      ],
      "id": "javascript_express_path_traversal",
      "title": "Possible path traversal vulnerability detected.",
      "description": "## Description\\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\\n\\n## Remediations\\n❌ Avoid wherever possible\\n\\n✅ Sanitize user input when resolving paths, for example:\\n- Use \`replace()\` to mitigate against unwanted patterns in the path (such as \`\\\\..\\\\..\`)\\n- Actively guard against paths that end in \\"%00\\" (poison NULL byte attacks)\\n- Use path concatenation to ensure the intended scope is respected\\n\\n\`\`\`javascript\\nconst path = require(\\"path\\");\\n\\napp.get(\\"/\\", (req, res) => {\\n  if (req.params.path.indexOf('\\\\0')) !== -1 {\\n    // prevent access\\n  }\\n\\n  var folder = req.params.path.replace(/^(\\\\.\\\\.(\\\\/|\\\\\\\\|$))+/, '')\\n\\n  var pathname = path.join(\\"/public/\\", folder)\\n  if pathname.indexOf(\\"/public/\\") !== 0 {\\n    // prevent access\\n  }\\n\\n  path.resolve(pathname)\\n})\\n\`\`\`\\n\\n## Resources\\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 9,
      "full_filename": "/tmp/bearer-scan/path_traversal_vulnerability.js",
      "filename": ".",
      "source": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 3,
          "end": 40
        }
      },
      "sink": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 3,
          "end": 40
        },
        "content": "path.join(\\"/public/\\", req.query.path)"
      },
      "parent_line_number": 9,
      "snippet": "path.join(\\"/public/\\", req.query.path)",
      "fingerprint": "a3f884b314acd58987c8feb137c54328_0",
      "old_fingerprint": "41727c25af7e6cea2c383e214eff881f_0"
    },
    {
      "cwe_ids": [
        "22"
      ],
      "id": "javascript_express_path_traversal",
      "title": "Possible path traversal vulnerability detected.",
      "description": "## Description\\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\\n\\n## Remediations\\n❌ Avoid wherever possible\\n\\n✅ Sanitize user input when resolving paths, for example:\\n- Use \`replace()\` to mitigate against unwanted patterns in the path (such as \`\\\\..\\\\..\`)\\n- Actively guard against paths that end in \\"%00\\" (poison NULL byte attacks)\\n- Use path concatenation to ensure the intended scope is respected\\n\\n\`\`\`javascript\\nconst path = require(\\"path\\");\\n\\napp.get(\\"/\\", (req, res) => {\\n  if (req.params.path.indexOf('\\\\0')) !== -1 {\\n    // prevent access\\n  }\\n\\n  var folder = req.params.path.replace(/^(\\\\.\\\\.(\\\\/|\\\\\\\\|$))+/, '')\\n\\n  var pathname = path.join(\\"/public/\\", folder)\\n  if pathname.indexOf(\\"/public/\\") !== 0 {\\n    // prevent access\\n  }\\n\\n  path.resolve(pathname)\\n})\\n\`\`\`\\n\\n## Resources\\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/path_traversal_vulnerability.js",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 3,
          "end": 31
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 3,
          "end": 31
        },
        "content": "path.resolve(req.query.path)"
      },
      "parent_line_number": 10,
      "snippet": "path.resolve(req.query.path)",
      "fingerprint": "a3f884b314acd58987c8feb137c54328_1",
      "old_fingerprint": "41727c25af7e6cea2c383e214eff881f_1"
    }
  ]
}"
`;
