// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`javascript_express_server_side_request_forgery axios_ssrf_injection 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "918"
      ],
      "id": "javascript_express_server_side_request_forgery",
      "title": "Unsanitized user input in HTTP request (SSRF)",
      "description": "## Description\\nUsing unsanitized URLs from the request object when retrieving data puts your application at risk of server-side request forgery (SSRF) attacks.\\nThis rule checks for URLs containing user-supplied data.\\n\\n## Remediations\\n\\n❌ Avoid using user input in URLs:\\n\\n\`\`\`javascript\\naxios.get(\`https://\${req.params.host}\`)\\n\`\`\`\\n\\n✅ Use user input indirectly to form a URL:\\n\\n\`\`\`javascript\\nvar host = \\"default-api.com\\"\\nif req.params.host == \\"something-else\\" {\\n  host = \\"other-api.com\\"\\n}\\n\\naxios.get(\`https://\${host}\`)\\n\`\`\`\\n\\n## Resources\\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_server_side_request_forgery",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/axios_ssrf_injection.js",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 3,
          "end": 28
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 3,
          "end": 28
        },
        "content": "axios.get(req.query.path)"
      },
      "parent_line_number": 10,
      "snippet": "axios.get(req.query.path)",
      "fingerprint": "2cac44cfde0c19367f3aa0fde6167679_0",
      "old_fingerprint": "c94f877ee3e4e2c02a79e4bf25e012e6_0",
      "code_extract": "  axios.get(req.query.path).then((response) => res.json(response.data))"
    }
  ]
}"
`;

exports[`javascript_express_server_side_request_forgery node_fetch_ssrf_injection 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "918"
      ],
      "id": "javascript_express_server_side_request_forgery",
      "title": "Unsanitized user input in HTTP request (SSRF)",
      "description": "## Description\\nUsing unsanitized URLs from the request object when retrieving data puts your application at risk of server-side request forgery (SSRF) attacks.\\nThis rule checks for URLs containing user-supplied data.\\n\\n## Remediations\\n\\n❌ Avoid using user input in URLs:\\n\\n\`\`\`javascript\\naxios.get(\`https://\${req.params.host}\`)\\n\`\`\`\\n\\n✅ Use user input indirectly to form a URL:\\n\\n\`\`\`javascript\\nvar host = \\"default-api.com\\"\\nif req.params.host == \\"something-else\\" {\\n  host = \\"other-api.com\\"\\n}\\n\\naxios.get(\`https://\${host}\`)\\n\`\`\`\\n\\n## Resources\\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_server_side_request_forgery",
      "line_number": 12,
      "full_filename": "/tmp/bearer-scan/node_fetch_ssrf_injection.js",
      "filename": ".",
      "source": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 20,
          "end": 54
        }
      },
      "sink": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 20,
          "end": 54
        },
        "content": "fetch(\\"https://\\" + req.query.path)"
      },
      "parent_line_number": 12,
      "snippet": "fetch(\\"https://\\" + req.query.path)",
      "fingerprint": "2cac44cfde0c19367f3aa0fde6167679_0",
      "old_fingerprint": "dd939000e17001ab48d7c6a8eed78795_0",
      "code_extract": "  response = await fetch(\\"https://\\" + req.query.path)"
    }
  ]
}"
`;

exports[`javascript_express_server_side_request_forgery ok_no_ssrf 1`] = `"{}"`;

exports[`javascript_express_server_side_request_forgery puppeteer_ssrf_injection 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "918"
      ],
      "id": "javascript_express_server_side_request_forgery",
      "title": "Unsanitized user input in HTTP request (SSRF)",
      "description": "## Description\\nUsing unsanitized URLs from the request object when retrieving data puts your application at risk of server-side request forgery (SSRF) attacks.\\nThis rule checks for URLs containing user-supplied data.\\n\\n## Remediations\\n\\n❌ Avoid using user input in URLs:\\n\\n\`\`\`javascript\\naxios.get(\`https://\${req.params.host}\`)\\n\`\`\`\\n\\n✅ Use user input indirectly to form a URL:\\n\\n\`\`\`javascript\\nvar host = \\"default-api.com\\"\\nif req.params.host == \\"something-else\\" {\\n  host = \\"other-api.com\\"\\n}\\n\\naxios.get(\`https://\${host}\`)\\n\`\`\`\\n\\n## Resources\\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_server_side_request_forgery",
      "line_number": 15,
      "full_filename": "/tmp/bearer-scan/puppeteer_ssrf_injection.js",
      "filename": ".",
      "source": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 9,
          "end": 33
        }
      },
      "sink": {
        "start": 15,
        "end": 15,
        "column": {
          "start": 9,
          "end": 33
        },
        "content": "page.setContent(content)"
      },
      "parent_line_number": 15,
      "snippet": "page.setContent(content)",
      "fingerprint": "2cac44cfde0c19367f3aa0fde6167679_0",
      "old_fingerprint": "b491f2bf9c290ee7c8845af36dd58aa6_0",
      "code_extract": "  await page.setContent(content)"
    },
    {
      "cwe_ids": [
        "918"
      ],
      "id": "javascript_express_server_side_request_forgery",
      "title": "Unsanitized user input in HTTP request (SSRF)",
      "description": "## Description\\nUsing unsanitized URLs from the request object when retrieving data puts your application at risk of server-side request forgery (SSRF) attacks.\\nThis rule checks for URLs containing user-supplied data.\\n\\n## Remediations\\n\\n❌ Avoid using user input in URLs:\\n\\n\`\`\`javascript\\naxios.get(\`https://\${req.params.host}\`)\\n\`\`\`\\n\\n✅ Use user input indirectly to form a URL:\\n\\n\`\`\`javascript\\nvar host = \\"default-api.com\\"\\nif req.params.host == \\"something-else\\" {\\n  host = \\"other-api.com\\"\\n}\\n\\naxios.get(\`https://\${host}\`)\\n\`\`\`\\n\\n## Resources\\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_server_side_request_forgery",
      "line_number": 16,
      "full_filename": "/tmp/bearer-scan/puppeteer_ssrf_injection.js",
      "filename": ".",
      "source": {
        "start": 16,
        "end": 16,
        "column": {
          "start": 9,
          "end": 47
        }
      },
      "sink": {
        "start": 16,
        "end": 16,
        "column": {
          "start": 9,
          "end": 47
        },
        "content": "page.goto(\\"https://\\" + req.query.path)"
      },
      "parent_line_number": 16,
      "snippet": "page.goto(\\"https://\\" + req.query.path)",
      "fingerprint": "2cac44cfde0c19367f3aa0fde6167679_1",
      "old_fingerprint": "b491f2bf9c290ee7c8845af36dd58aa6_1",
      "code_extract": "  await page.goto(\\"https://\\" + req.query.path)"
    }
  ]
}"
`;
