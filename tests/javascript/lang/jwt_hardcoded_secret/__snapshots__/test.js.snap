// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`javascript_lang_jwt_hardcoded_secret insecure 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_jwt_hardcoded_secret",
      "title": "Leakage of hard-coded secret in JWT",
      "description": "## Description\\n\\nCode is not a secure place to store secrets, use environment variables instead.\\n\\n## Remediations\\n\\nUse environment variables\\n\\n\`\`\`javascript\\n  var jwt = require(\\"jsonwebtoken\\");\\n\\n  var token = jwt.sign({ foo: \\"bar\\" }, process.env.JWT_SECRET);\\n\`\`\`\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_jwt_hardcoded_secret",
      "line_number": 3,
      "full_filename": "/tmp/bearer-scan/insecure.js",
      "filename": ".",
      "source": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 13,
          "end": 51
        }
      },
      "sink": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 13,
          "end": 51
        },
        "content": "jwt.sign({ foo: \\"bar\\" }, \\"someSecret\\")"
      },
      "parent_line_number": 3,
      "snippet": "jwt.sign({ foo: \\"bar\\" }, \\"someSecret\\")",
      "fingerprint": "d0029fa61eca40823af6b8a00901cfaf_0",
      "old_fingerprint": "ef25e950f616899c3627380e235b558c_0",
      "code_extract": "var token = jwt.sign({ foo: \\"bar\\" }, \\"someSecret\\");"
    }
  ]
}"
`;

exports[`javascript_lang_jwt_hardcoded_secret insecure_jose_jwt 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_jwt_hardcoded_secret",
      "title": "Leakage of hard-coded secret in JWT",
      "description": "## Description\\n\\nCode is not a secure place to store secrets, use environment variables instead.\\n\\n## Remediations\\n\\nUse environment variables\\n\\n\`\`\`javascript\\n  var jwt = require(\\"jsonwebtoken\\");\\n\\n  var token = jwt.sign({ foo: \\"bar\\" }, process.env.JWT_SECRET);\\n\`\`\`\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_jwt_hardcoded_secret",
      "line_number": 5,
      "full_filename": "/tmp/bearer-scan/insecure_jose_jwt.js",
      "filename": ".",
      "source": {
        "start": 5,
        "end": 8,
        "column": {
          "start": 19,
          "end": 16
        }
      },
      "sink": {
        "start": 5,
        "end": 8,
        "column": {
          "start": 19,
          "end": 16
        },
        "content": "new jose.SignJWT({ 'urn:example:claim': true })\\n  .setIssuedAt()\\n  .setExpirationTime('2h')\\n  .sign(secret)"
      },
      "parent_line_number": 5,
      "snippet": "new jose.SignJWT({ 'urn:example:claim': true })\\n  .setIssuedAt()\\n  .setExpirationTime('2h')\\n  .sign(secret)",
      "fingerprint": "d0029fa61eca40823af6b8a00901cfaf_0",
      "old_fingerprint": "0821f1feacde43f91832d6ae43918279_0",
      "code_extract": "const jwt = await new jose.SignJWT({ 'urn:example:claim': true })\\n  .setIssuedAt()\\n  .setExpirationTime('2h')\\n  .sign(secret)"
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_jwt_hardcoded_secret",
      "title": "Leakage of hard-coded secret in JWT",
      "description": "## Description\\n\\nCode is not a secure place to store secrets, use environment variables instead.\\n\\n## Remediations\\n\\nUse environment variables\\n\\n\`\`\`javascript\\n  var jwt = require(\\"jsonwebtoken\\");\\n\\n  var token = jwt.sign({ foo: \\"bar\\" }, process.env.JWT_SECRET);\\n\`\`\`\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_jwt_hardcoded_secret",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/insecure_jose_jwt.js",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 20,
          "end": 53
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 20,
          "end": 53
        },
        "content": "(new jose.SignJWT()).sign(secret)"
      },
      "parent_line_number": 10,
      "snippet": "(new jose.SignJWT()).sign(secret)",
      "fingerprint": "d0029fa61eca40823af6b8a00901cfaf_1",
      "old_fingerprint": "0821f1feacde43f91832d6ae43918279_1",
      "code_extract": "const jwt2 = await (new jose.SignJWT()).sign(secret)"
    }
  ]
}"
`;

exports[`javascript_lang_jwt_hardcoded_secret insecure_jwt 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_jwt_hardcoded_secret",
      "title": "Leakage of hard-coded secret in JWT",
      "description": "## Description\\n\\nCode is not a secure place to store secrets, use environment variables instead.\\n\\n## Remediations\\n\\nUse environment variables\\n\\n\`\`\`javascript\\n  var jwt = require(\\"jsonwebtoken\\");\\n\\n  var token = jwt.sign({ foo: \\"bar\\" }, process.env.JWT_SECRET);\\n\`\`\`\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_jwt_hardcoded_secret",
      "line_number": 6,
      "full_filename": "/tmp/bearer-scan/insecure_jwt.js",
      "filename": ".",
      "source": {
        "start": 6,
        "end": 6,
        "column": {
          "start": 3,
          "end": 81
        }
      },
      "sink": {
        "start": 6,
        "end": 6,
        "column": {
          "start": 3,
          "end": 81
        },
        "content": "myJWT.sign(user, privateKey, { expiresInMinutes: 60 * 5, algorithm: \\"RS256\\" })"
      },
      "parent_line_number": 6,
      "snippet": "myJWT.sign(user, privateKey, { expiresInMinutes: 60 * 5, algorithm: \\"RS256\\" })",
      "fingerprint": "d0029fa61eca40823af6b8a00901cfaf_0",
      "old_fingerprint": "6c80799d9ecd67e779a8a69f88fd87c4_0",
      "code_extract": "  myJWT.sign(user, privateKey, { expiresInMinutes: 60 * 5, algorithm: \\"RS256\\" })"
    }
  ]
}"
`;

exports[`javascript_lang_jwt_hardcoded_secret secure 1`] = `"{}"`;
