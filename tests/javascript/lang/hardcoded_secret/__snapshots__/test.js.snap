// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`javascript_lang_hardcoded_secret insecure_assigment 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 2,
      "full_filename": "/tmp/bearer-scan/insecure_assigment.js",
      "filename": ".",
      "source": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 1,
          "end": 46
        }
      },
      "sink": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 1,
          "end": 46
        },
        "content": "config.clientSecret = \\"secretHardcodedString\\""
      },
      "parent_line_number": 2,
      "snippet": "config.clientSecret = \\"secretHardcodedString\\"",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_0",
      "old_fingerprint": "cb0768aaec39cd633bcc91bca96ca617_0"
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 4,
      "full_filename": "/tmp/bearer-scan/insecure_assigment.js",
      "filename": ".",
      "source": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 1,
          "end": 22
        }
      },
      "sink": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 1,
          "end": 22
        },
        "content": "const apiKey = \\"oops\\""
      },
      "parent_line_number": 4,
      "snippet": "const apiKey = \\"oops\\"",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_1",
      "old_fingerprint": "cb0768aaec39cd633bcc91bca96ca617_1"
    }
  ]
}"
`;

exports[`javascript_lang_hardcoded_secret insecure_crypto 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 1,
      "full_filename": "/tmp/bearer-scan/insecure_crypto.js",
      "filename": ".",
      "source": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 76
        }
      },
      "sink": {
        "start": 1,
        "end": 1,
        "column": {
          "start": 1,
          "end": 76
        },
        "content": "crypto.createHmac('sha256', 'secretHardcodedString', { encoding: \\"utf-8\\" })"
      },
      "parent_line_number": 1,
      "snippet": "crypto.createHmac('sha256', 'secretHardcodedString', { encoding: \\"utf-8\\" })",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_0",
      "old_fingerprint": "57fd1461af37edfce7e2eb6fa55b50d3_0"
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 3,
      "full_filename": "/tmp/bearer-scan/insecure_crypto.js",
      "filename": ".",
      "source": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 57
        }
      },
      "sink": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 1,
          "end": 57
        },
        "content": "crypto.createSecretKey('secretHardcodedString', \\"utf-8\\")"
      },
      "parent_line_number": 3,
      "snippet": "crypto.createSecretKey('secretHardcodedString', \\"utf-8\\")",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_1",
      "old_fingerprint": "57fd1461af37edfce7e2eb6fa55b50d3_1"
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 5,
      "full_filename": "/tmp/bearer-scan/insecure_crypto.js",
      "filename": ".",
      "source": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 49
        }
      },
      "sink": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 1,
          "end": 49
        },
        "content": "crypto.createPrivateKey('secretHardcodedString')"
      },
      "parent_line_number": 5,
      "snippet": "crypto.createPrivateKey('secretHardcodedString')",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_2",
      "old_fingerprint": "57fd1461af37edfce7e2eb6fa55b50d3_2"
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 7,
      "full_filename": "/tmp/bearer-scan/insecure_crypto.js",
      "filename": ".",
      "source": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 64
        }
      },
      "sink": {
        "start": 7,
        "end": 7,
        "column": {
          "start": 1,
          "end": 64
        },
        "content": "crypto.privateDecrypt({ key: 'secretHardcodedString' }, buffer)"
      },
      "parent_line_number": 7,
      "snippet": "crypto.privateDecrypt({ key: 'secretHardcodedString' }, buffer)",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_3",
      "old_fingerprint": "57fd1461af37edfce7e2eb6fa55b50d3_3"
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 9,
      "full_filename": "/tmp/bearer-scan/insecure_crypto.js",
      "filename": ".",
      "source": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 1,
          "end": 71
        }
      },
      "sink": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 1,
          "end": 71
        },
        "content": "crypto.privateEncrypt({ passphrase: 'secretHardcodedString' }, buffer)"
      },
      "parent_line_number": 9,
      "snippet": "crypto.privateEncrypt({ passphrase: 'secretHardcodedString' }, buffer)",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_4",
      "old_fingerprint": "57fd1461af37edfce7e2eb6fa55b50d3_4"
    },
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 12,
      "full_filename": "/tmp/bearer-scan/insecure_crypto.js",
      "filename": ".",
      "source": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 1,
          "end": 41
        }
      },
      "sink": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 1,
          "end": 41
        },
        "content": "s.sign('secretHardcodedString', \\"utf-8\\")"
      },
      "parent_line_number": 12,
      "snippet": "s.sign('secretHardcodedString', \\"utf-8\\")",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_5",
      "old_fingerprint": "57fd1461af37edfce7e2eb6fa55b50d3_5"
    }
  ]
}"
`;

exports[`javascript_lang_hardcoded_secret insecure_object 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "798"
      ],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Hardcoded secret detected",
      "description": "## Description\\n\\nCode is not a safe place to store secrets. Use environment variables or a secret management system instead.\\n\\n## Remediations\\n\\n❌ Do not store plaintext secrets in your code\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID: 'my-id-123',\\n      clientSecret: 'shh-my-secret',\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use environment variables\\n\\n\`\`\`javascript\\n  passport.use(new OAuth2Strategy({\\n      authorizationURL: 'https://www.example.com/oauth2/authorize',\\n      tokenURL: 'https://www.example.com/oauth2/token',\\n      clientID:  process.env.CLIENT_ID,\\n      clientSecret: process.env.CLIENT_SECRET,\\n      callbackURL: 'http://localhost:3000/auth/example/callback'\\n    },\\n    function(accessToken, refreshToken, profile, cb) {\\n      User.findOrCreate({ exampleId: profile.id }, function (err, user) {\\n        return cb(err, user);\\n      });\\n    }\\n  ));\\n\`\`\`\\n\\n✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets\\n\\n## Resources\\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 3,
      "full_filename": "/tmp/bearer-scan/insecure_object.js",
      "filename": ".",
      "category_groups": [
        "PII",
        "Personal Data"
      ],
      "source": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 2,
          "end": 39
        }
      },
      "sink": {
        "start": 3,
        "end": 3,
        "column": {
          "start": 2,
          "end": 39
        },
        "content": "clientSecret: \\"secretHardcodedString\\""
      },
      "parent_line_number": 3,
      "snippet": "clientSecret: \\"secretHardcodedString\\"",
      "fingerprint": "68ec549b0c4baac7ca684eb14e42834e_0",
      "old_fingerprint": "96d420b4e549b4b59b1846d59c40595a_0"
    }
  ]
}"
`;

exports[`javascript_lang_hardcoded_secret secure 1`] = `"{}"`;
