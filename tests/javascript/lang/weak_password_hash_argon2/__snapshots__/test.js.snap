// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`javascript_lang_weak_password_hash_argon2 argon2i 1`] = `
"{
  "critical": [
    {
      "cwe_ids": [
        "326"
      ],
      "id": "javascript_lang_weak_password_hash_argon2",
      "title": "Usage of weak hashing library on a password (Argon2)",
      "description": "## Description\\n\\nOut of the three variants of the Argon2 algorithm (Argon2i, Argon2d, Argon2id), Argon2id is the recommended choice because it offers the best protection.\\n\\n## Recommendations\\n\\n‚ùå Do not override the default type (Argon2id) when using the Argon2 library\\n\\n\`\`\`javascript\\n  const argon2 = require(\\"argon2\\");\\n\\n  const hash = await argon2.hash(req.params.password, { type: argon2.argon2i })\\n\`\`\`\\n\\n## Resources\\n- [Argon2 type options](https://github.com/ranisalt/node-argon2/wiki/Options#type)\\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_argon2",
      "line_number": 4,
      "full_filename": "/tmp/bearer-scan/argon2i.js",
      "filename": ".",
      "data_type": {
        "category_uuid": "dd88aee5-9d40-4ad2-8983-0c791ddec47c",
        "name": "Passwords"
      },
      "category_groups": [
        "PII",
        "Personal Data"
      ],
      "source": {
        "start": 4,
        "end": 4,
        "column": {
          "start": 34,
          "end": 54
        }
      },
      "sink": {
        "start": 4,
        "end": 8,
        "column": {
          "start": 22,
          "end": 5
        },
        "content": "argon2.hash(currentUser.password, {\\n    type: argon2.argon2i,\\n    memoryCost: 2 ** 16,\\n    hashLength: 50,\\n  })"
      },
      "parent_line_number": 4,
      "snippet": "argon2.hash(currentUser.password, {\\n    type: argon2.argon2i,\\n    memoryCost: 2 ** 16,\\n    hashLength: 50,\\n  })",
      "fingerprint": "29037a4aa6dcbd49fb1b22d24d403754_0",
      "old_fingerprint": "5c21523ad759096994916831a8bdca65_0",
      "code_extract": "  const hash = await argon2.hash(currentUser.password, {\\n    type: argon2.argon2i,\\n    memoryCost: 2 ** 16,\\n    hashLength: 50,\\n  });"
    }
  ]
}"
`;

exports[`javascript_lang_weak_password_hash_argon2 ok_encryption 1`] = `"{}"`;

exports[`javascript_lang_weak_password_hash_argon2 ok_not_a_password 1`] = `"{}"`;
