// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`javascript_lang_eval_user_input eval 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "95"
      ],
      "id": "javascript_lang_eval_user_input",
      "title": "Unsanitized user input in 'eval' type function",
      "description": "## Description\\nUsing \`eval\` (and similar code execution methods such as \`setTimeout\`) with user input is dangerous and can lead to remote code execution.\\n\\n## Remediation\\n❌ As a general rule, avoid using \`eval\`.\\n\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nInstead, it might be possible to use dynamic hardcoded values:\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    if req.params[\\"single_item\\"] {\\n      myFunc = \\"(a) => a\\"\\n    }\\n\\n    setTimeout(myFunc);\\n  };\\n\`\`\`\\nor pass user input to a compiled function, instead of compiling it with user input.\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    let compiledFunction = vm.compileFunction(myFunc);\\n    compiledFunction(req.params[\\"pageCount\\"], req.params[\\"appendixPageCount\\"])\\n  };\\n\`\`\`\\n\\n✅ Use JavaScript's strict mode as best practice and to minimize the reach of code execution methods\\n\\n\`\`\`javascript\\n  \\"use strict\\"\\n\\n  app.post(\\"/:id\\", (req, res) => {\\n    ...\\n  })\\n\`\`\`\\n\\n## Resources\\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input",
      "line_number": 12,
      "full_filename": "/tmp/bearer-scan/eval.js",
      "filename": ".",
      "source": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 10,
          "end": 23
        }
      },
      "sink": {
        "start": 12,
        "end": 12,
        "column": {
          "start": 10,
          "end": 23
        },
        "content": "eval(command)"
      },
      "parent_line_number": 12,
      "snippet": "eval(command)",
      "fingerprint": "845c467daab5771a9b5844e411f5576c_0",
      "old_fingerprint": "047e7e7cf3819e02752e3eb5c918098c_0",
      "code_extract": "  return eval(command)"
    },
    {
      "cwe_ids": [
        "95"
      ],
      "id": "javascript_lang_eval_user_input",
      "title": "Unsanitized user input in 'eval' type function",
      "description": "## Description\\nUsing \`eval\` (and similar code execution methods such as \`setTimeout\`) with user input is dangerous and can lead to remote code execution.\\n\\n## Remediation\\n❌ As a general rule, avoid using \`eval\`.\\n\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nInstead, it might be possible to use dynamic hardcoded values:\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    if req.params[\\"single_item\\"] {\\n      myFunc = \\"(a) => a\\"\\n    }\\n\\n    setTimeout(myFunc);\\n  };\\n\`\`\`\\nor pass user input to a compiled function, instead of compiling it with user input.\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    let compiledFunction = vm.compileFunction(myFunc);\\n    compiledFunction(req.params[\\"pageCount\\"], req.params[\\"appendixPageCount\\"])\\n  };\\n\`\`\`\\n\\n✅ Use JavaScript's strict mode as best practice and to minimize the reach of code execution methods\\n\\n\`\`\`javascript\\n  \\"use strict\\"\\n\\n  app.post(\\"/:id\\", (req, res) => {\\n    ...\\n  })\\n\`\`\`\\n\\n## Resources\\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input",
      "line_number": 20,
      "full_filename": "/tmp/bearer-scan/eval.js",
      "filename": ".",
      "source": {
        "start": 20,
        "end": 20,
        "column": {
          "start": 3,
          "end": 16
        }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": {
          "start": 3,
          "end": 16
        },
        "content": "eval(context)"
      },
      "parent_line_number": 20,
      "snippet": "eval(context)",
      "fingerprint": "845c467daab5771a9b5844e411f5576c_1",
      "old_fingerprint": "047e7e7cf3819e02752e3eb5c918098c_1",
      "code_extract": "  eval(context)"
    }
  ]
}"
`;

exports[`javascript_lang_eval_user_input new_function 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "95"
      ],
      "id": "javascript_lang_eval_user_input",
      "title": "Unsanitized user input in 'eval' type function",
      "description": "## Description\\nUsing \`eval\` (and similar code execution methods such as \`setTimeout\`) with user input is dangerous and can lead to remote code execution.\\n\\n## Remediation\\n❌ As a general rule, avoid using \`eval\`.\\n\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nInstead, it might be possible to use dynamic hardcoded values:\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    if req.params[\\"single_item\\"] {\\n      myFunc = \\"(a) => a\\"\\n    }\\n\\n    setTimeout(myFunc);\\n  };\\n\`\`\`\\nor pass user input to a compiled function, instead of compiling it with user input.\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    let compiledFunction = vm.compileFunction(myFunc);\\n    compiledFunction(req.params[\\"pageCount\\"], req.params[\\"appendixPageCount\\"])\\n  };\\n\`\`\`\\n\\n✅ Use JavaScript's strict mode as best practice and to minimize the reach of code execution methods\\n\\n\`\`\`javascript\\n  \\"use strict\\"\\n\\n  app.post(\\"/:id\\", (req, res) => {\\n    ...\\n  })\\n\`\`\`\\n\\n## Resources\\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input",
      "line_number": 11,
      "full_filename": "/tmp/bearer-scan/new_function.js",
      "filename": ".",
      "source": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 3,
          "end": 24
        }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 3,
          "end": 24
        },
        "content": "new Function(command)"
      },
      "parent_line_number": 11,
      "snippet": "new Function(command)",
      "fingerprint": "845c467daab5771a9b5844e411f5576c_0",
      "old_fingerprint": "4751fd38350c5b49b6d4ff040230f0e4_0",
      "code_extract": "  new Function(command)()"
    }
  ]
}"
`;

exports[`javascript_lang_eval_user_input secure 1`] = `"{}"`;

exports[`javascript_lang_eval_user_input set_interval 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "95"
      ],
      "id": "javascript_lang_eval_user_input",
      "title": "Unsanitized user input in 'eval' type function",
      "description": "## Description\\nUsing \`eval\` (and similar code execution methods such as \`setTimeout\`) with user input is dangerous and can lead to remote code execution.\\n\\n## Remediation\\n❌ As a general rule, avoid using \`eval\`.\\n\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nInstead, it might be possible to use dynamic hardcoded values:\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    if req.params[\\"single_item\\"] {\\n      myFunc = \\"(a) => a\\"\\n    }\\n\\n    setTimeout(myFunc);\\n  };\\n\`\`\`\\nor pass user input to a compiled function, instead of compiling it with user input.\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    let compiledFunction = vm.compileFunction(myFunc);\\n    compiledFunction(req.params[\\"pageCount\\"], req.params[\\"appendixPageCount\\"])\\n  };\\n\`\`\`\\n\\n✅ Use JavaScript's strict mode as best practice and to minimize the reach of code execution methods\\n\\n\`\`\`javascript\\n  \\"use strict\\"\\n\\n  app.post(\\"/:id\\", (req, res) => {\\n    ...\\n  })\\n\`\`\`\\n\\n## Resources\\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input",
      "line_number": 11,
      "full_filename": "/tmp/bearer-scan/set_interval.js",
      "filename": ".",
      "source": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 3,
          "end": 23
        }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 3,
          "end": 23
        },
        "content": "setInterval(command)"
      },
      "parent_line_number": 11,
      "snippet": "setInterval(command)",
      "fingerprint": "845c467daab5771a9b5844e411f5576c_0",
      "old_fingerprint": "bb4962f8468dfa6bd503cc5cbb72b698_0",
      "code_extract": "  setInterval(command)"
    }
  ]
}"
`;

exports[`javascript_lang_eval_user_input set_timeout 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "95"
      ],
      "id": "javascript_lang_eval_user_input",
      "title": "Unsanitized user input in 'eval' type function",
      "description": "## Description\\nUsing \`eval\` (and similar code execution methods such as \`setTimeout\`) with user input is dangerous and can lead to remote code execution.\\n\\n## Remediation\\n❌ As a general rule, avoid using \`eval\`.\\n\\n❌ Avoid using code execution methods with unsanitized user input.\\n\\nInstead, it might be possible to use dynamic hardcoded values:\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    if req.params[\\"single_item\\"] {\\n      myFunc = \\"(a) => a\\"\\n    }\\n\\n    setTimeout(myFunc);\\n  };\\n\`\`\`\\nor pass user input to a compiled function, instead of compiling it with user input.\\n\`\`\`javascript\\n  app.post(\\"/:id\\", (req, res) => {\\n    let myFunc = \\"(a, b) => a + b\\"\\n    let compiledFunction = vm.compileFunction(myFunc);\\n    compiledFunction(req.params[\\"pageCount\\"], req.params[\\"appendixPageCount\\"])\\n  };\\n\`\`\`\\n\\n✅ Use JavaScript's strict mode as best practice and to minimize the reach of code execution methods\\n\\n\`\`\`javascript\\n  \\"use strict\\"\\n\\n  app.post(\\"/:id\\", (req, res) => {\\n    ...\\n  })\\n\`\`\`\\n\\n## Resources\\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input",
      "line_number": 11,
      "full_filename": "/tmp/bearer-scan/set_timeout.js",
      "filename": ".",
      "source": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 3,
          "end": 22
        }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": {
          "start": 3,
          "end": 22
        },
        "content": "setTimeout(command)"
      },
      "parent_line_number": 11,
      "snippet": "setTimeout(command)",
      "fingerprint": "845c467daab5771a9b5844e411f5576c_0",
      "old_fingerprint": "166156db7e38b3833a5b23e795e25f54_0",
      "code_extract": "  setTimeout(command)"
    }
  ]
}"
`;
