// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`javascript_third_parties_dom_purify insecure 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "79"
      ],
      "id": "javascript_third_parties_dom_purify",
      "title": "Insecure use of DOMPurify detected.",
      "description": "## Description\\nThere are XSS vulnerabilites when using DOMPurify's sanitize without proper configuration\\n\\n## Remediations\\n\\nSpecify a secure configuration option:\\n\`\`\`\\n  DOMPurify.sanitize(htmlToSanitize, { RETURN_DOM_IMPORT:true })\\n\`\`\`\\n\\nor:\\n\\n\`\`\`\\n  DOMPurify.sanitize(htmlToSanitize, { RETURN_DOM_FRAGMENT: true })\\n\`\`\`\\n\\n## Resources\\n- [Vulnerability explained](https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_third_parties_dom_purify",
      "line_number": 2,
      "full_filename": "/tmp/bearer-scan/insecure/insecure.js",
      "filename": "insecure.js",
      "source": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 14,
          "end": 47
        }
      },
      "sink": {
        "start": 2,
        "end": 2,
        "column": {
          "start": 14,
          "end": 47
        },
        "content": "DOMPurify.sanitize(dirty, config)"
      },
      "parent_line_number": 2,
      "snippet": "DOMPurify.sanitize(dirty, config)",
      "fingerprint": "e58733026a71734e4be7c15cc5b475ac_0",
      "old_fingerprint": "38f5dacd3609670d15a3c1d7c8cb1968_0",
      "code_extract": "const html = DOMPurify.sanitize(dirty, config);"
    },
    {
      "cwe_ids": [
        "79"
      ],
      "id": "javascript_third_parties_dom_purify",
      "title": "Insecure use of DOMPurify detected.",
      "description": "## Description\\nThere are XSS vulnerabilites when using DOMPurify's sanitize without proper configuration\\n\\n## Remediations\\n\\nSpecify a secure configuration option:\\n\`\`\`\\n  DOMPurify.sanitize(htmlToSanitize, { RETURN_DOM_IMPORT:true })\\n\`\`\`\\n\\nor:\\n\\n\`\`\`\\n  DOMPurify.sanitize(htmlToSanitize, { RETURN_DOM_FRAGMENT: true })\\n\`\`\`\\n\\n## Resources\\n- [Vulnerability explained](https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_third_parties_dom_purify",
      "line_number": 5,
      "full_filename": "/tmp/bearer-scan/insecure/insecure.js",
      "filename": "insecure.js",
      "source": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 14,
          "end": 39
        }
      },
      "sink": {
        "start": 5,
        "end": 5,
        "column": {
          "start": 14,
          "end": 39
        },
        "content": "DOMPurify.sanitize(dirty)"
      },
      "parent_line_number": 5,
      "snippet": "DOMPurify.sanitize(dirty)",
      "fingerprint": "e58733026a71734e4be7c15cc5b475ac_1",
      "old_fingerprint": "38f5dacd3609670d15a3c1d7c8cb1968_1",
      "code_extract": "const body = DOMPurify.sanitize(dirty);"
    }
  ]
}"
`;

exports[`javascript_third_parties_dom_purify secure 1`] = `"{}"`;

exports[`javascript_third_parties_dom_purify secure_dependency 1`] = `"{}"`;
