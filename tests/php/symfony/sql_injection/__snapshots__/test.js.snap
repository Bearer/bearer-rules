// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`php_symfony_sql_injection no_sql_injection 1`] = `"{}"`;

exports[`php_symfony_sql_injection sql_injection 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "89"
      ],
      "id": "php_symfony_sql_injection",
      "title": "Potential SQL injection with user input detected.",
      "description": "## Description\\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE foo.bar > \\" . $_GET['oops']. \\" ORDER BY foo.bar ASC\\";\\n\`\`\`\\n\\nInstead, consider the following approaches when writing SQL queries\\n\\n✅ Validate query input or use prepared statement wherever possible\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE bar = '\\" . $conn->quote($_GET['bar']) . \\"'\\";\\n\`\`\`\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM users WHERE username = :user\\";\\n  $stmt = $connection->prepare($sql);\\n  $stmt->bindValue(\\"user\\", $_GET['username']);\\n\`\`\`\\n\\n\`\`\`php\\n  $dql = \\"SELECT * FROM Foo WHERE bar = :bar\\";\\n  $query = $em->createQuery($dql);\\n  $query->setParameter(\\"bar\\", $_GET['bar']);\\n\`\`\`\\n\\n## Resources\\n- [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\\n- [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/php_symfony_sql_injection",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/injection.php",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 17,
          "end": 37
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 17,
          "end": 37
        },
        "content": "$conn->prepare($sql)"
      },
      "parent_line_number": 10,
      "snippet": "$conn->prepare($sql)",
      "fingerprint": "2feb125811f5f90f7863bc85f521df21_0",
      "old_fingerprint": "3403966bc475d95d279a91da02c93b9a_0",
      "code_extract": "        $stmt = $conn->prepare($sql);"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "php_symfony_sql_injection",
      "title": "Potential SQL injection with user input detected.",
      "description": "## Description\\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE foo.bar > \\" . $_GET['oops']. \\" ORDER BY foo.bar ASC\\";\\n\`\`\`\\n\\nInstead, consider the following approaches when writing SQL queries\\n\\n✅ Validate query input or use prepared statement wherever possible\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE bar = '\\" . $conn->quote($_GET['bar']) . \\"'\\";\\n\`\`\`\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM users WHERE username = :user\\";\\n  $stmt = $connection->prepare($sql);\\n  $stmt->bindValue(\\"user\\", $_GET['username']);\\n\`\`\`\\n\\n\`\`\`php\\n  $dql = \\"SELECT * FROM Foo WHERE bar = :bar\\";\\n  $query = $em->createQuery($dql);\\n  $query->setParameter(\\"bar\\", $_GET['bar']);\\n\`\`\`\\n\\n## Resources\\n- [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\\n- [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/php_symfony_sql_injection",
      "line_number": 20,
      "full_filename": "/tmp/bearer-scan/injection.php",
      "filename": ".",
      "source": {
        "start": 20,
        "end": 20,
        "column": {
          "start": 18,
          "end": 92
        }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": {
          "start": 18,
          "end": 92
        },
        "content": "$conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $_GET['bar'] . \\"'\\")"
      },
      "parent_line_number": 20,
      "snippet": "$conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $_GET['bar'] . \\"'\\")",
      "fingerprint": "2feb125811f5f90f7863bc85f521df21_1",
      "old_fingerprint": "3403966bc475d95d279a91da02c93b9a_1",
      "code_extract": "        $query = $conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $_GET['bar'] . \\"'\\");"
    }
  ]
}"
`;

exports[`php_symfony_sql_injection sql_injection_function_arguments 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "89"
      ],
      "id": "php_symfony_sql_injection",
      "title": "Potential SQL injection with user input detected.",
      "description": "## Description\\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE foo.bar > \\" . $_GET['oops']. \\" ORDER BY foo.bar ASC\\";\\n\`\`\`\\n\\nInstead, consider the following approaches when writing SQL queries\\n\\n✅ Validate query input or use prepared statement wherever possible\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE bar = '\\" . $conn->quote($_GET['bar']) . \\"'\\";\\n\`\`\`\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM users WHERE username = :user\\";\\n  $stmt = $connection->prepare($sql);\\n  $stmt->bindValue(\\"user\\", $_GET['username']);\\n\`\`\`\\n\\n\`\`\`php\\n  $dql = \\"SELECT * FROM Foo WHERE bar = :bar\\";\\n  $query = $em->createQuery($dql);\\n  $query->setParameter(\\"bar\\", $_GET['bar']);\\n\`\`\`\\n\\n## Resources\\n- [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\\n- [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/php_symfony_sql_injection",
      "line_number": 9,
      "full_filename": "/tmp/bearer-scan/injection-function-arguments.php",
      "filename": ".",
      "source": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 18,
          "end": 87
        }
      },
      "sink": {
        "start": 9,
        "end": 9,
        "column": {
          "start": 18,
          "end": 87
        },
        "content": "$conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $oopsie . \\"'\\")"
      },
      "parent_line_number": 9,
      "snippet": "$conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $oopsie . \\"'\\")",
      "fingerprint": "2feb125811f5f90f7863bc85f521df21_0",
      "old_fingerprint": "66edddcd62cf279ceabafe58b2d3bc45_0",
      "code_extract": "        $query = $conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $oopsie . \\"'\\");"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "php_symfony_sql_injection",
      "title": "Potential SQL injection with user input detected.",
      "description": "## Description\\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE foo.bar > \\" . $_GET['oops']. \\" ORDER BY foo.bar ASC\\";\\n\`\`\`\\n\\nInstead, consider the following approaches when writing SQL queries\\n\\n✅ Validate query input or use prepared statement wherever possible\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE bar = '\\" . $conn->quote($_GET['bar']) . \\"'\\";\\n\`\`\`\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM users WHERE username = :user\\";\\n  $stmt = $connection->prepare($sql);\\n  $stmt->bindValue(\\"user\\", $_GET['username']);\\n\`\`\`\\n\\n\`\`\`php\\n  $dql = \\"SELECT * FROM Foo WHERE bar = :bar\\";\\n  $query = $em->createQuery($dql);\\n  $query->setParameter(\\"bar\\", $_GET['bar']);\\n\`\`\`\\n\\n## Resources\\n- [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\\n- [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/php_symfony_sql_injection",
      "line_number": 18,
      "full_filename": "/tmp/bearer-scan/injection-function-arguments.php",
      "filename": ".",
      "source": {
        "start": 18,
        "end": 18,
        "column": {
          "start": 18,
          "end": 87
        }
      },
      "sink": {
        "start": 18,
        "end": 18,
        "column": {
          "start": 18,
          "end": 87
        },
        "content": "$conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $oopsie . \\"'\\")"
      },
      "parent_line_number": 18,
      "snippet": "$conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $oopsie . \\"'\\")",
      "fingerprint": "2feb125811f5f90f7863bc85f521df21_1",
      "old_fingerprint": "66edddcd62cf279ceabafe58b2d3bc45_1",
      "code_extract": "        $query = $conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $oopsie . \\"'\\");"
    }
  ]
}"
`;

exports[`php_symfony_sql_injection sql_injection_query_builder 1`] = `
"{
  "high": [
    {
      "cwe_ids": [
        "89"
      ],
      "id": "php_symfony_sql_injection",
      "title": "Potential SQL injection with user input detected.",
      "description": "## Description\\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE foo.bar > \\" . $_GET['oops']. \\" ORDER BY foo.bar ASC\\";\\n\`\`\`\\n\\nInstead, consider the following approaches when writing SQL queries\\n\\n✅ Validate query input or use prepared statement wherever possible\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE bar = '\\" . $conn->quote($_GET['bar']) . \\"'\\";\\n\`\`\`\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM users WHERE username = :user\\";\\n  $stmt = $connection->prepare($sql);\\n  $stmt->bindValue(\\"user\\", $_GET['username']);\\n\`\`\`\\n\\n\`\`\`php\\n  $dql = \\"SELECT * FROM Foo WHERE bar = :bar\\";\\n  $query = $em->createQuery($dql);\\n  $query->setParameter(\\"bar\\", $_GET['bar']);\\n\`\`\`\\n\\n## Resources\\n- [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\\n- [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/php_symfony_sql_injection",
      "line_number": 10,
      "full_filename": "/tmp/bearer-scan/injection-query-builder.php",
      "filename": ".",
      "source": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 17,
          "end": 37
        }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": {
          "start": 17,
          "end": 37
        },
        "content": "$conn->prepare($sql)"
      },
      "parent_line_number": 10,
      "snippet": "$conn->prepare($sql)",
      "fingerprint": "2feb125811f5f90f7863bc85f521df21_0",
      "old_fingerprint": "67f87a634d6b291dceaab83c6a62d140_0",
      "code_extract": "        $stmt = $conn->prepare($sql);"
    },
    {
      "cwe_ids": [
        "89"
      ],
      "id": "php_symfony_sql_injection",
      "title": "Potential SQL injection with user input detected.",
      "description": "## Description\\nIncluding unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.\\n\\n## Remediations\\n\\n❌ Avoid raw queries, especially those that contain unsanitized user input\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE foo.bar > \\" . $_GET['oops']. \\" ORDER BY foo.bar ASC\\";\\n\`\`\`\\n\\nInstead, consider the following approaches when writing SQL queries\\n\\n✅ Validate query input or use prepared statement wherever possible\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM foo WHERE bar = '\\" . $conn->quote($_GET['bar']) . \\"'\\";\\n\`\`\`\\n\\n\`\`\`php\\n  $sql = \\"SELECT * FROM users WHERE username = :user\\";\\n  $stmt = $connection->prepare($sql);\\n  $stmt->bindValue(\\"user\\", $_GET['username']);\\n\`\`\`\\n\\n\`\`\`php\\n  $dql = \\"SELECT * FROM Foo WHERE bar = :bar\\";\\n  $query = $em->createQuery($dql);\\n  $query->setParameter(\\"bar\\", $_GET['bar']);\\n\`\`\`\\n\\n## Resources\\n- [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)\\n- [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)\\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/php_symfony_sql_injection",
      "line_number": 20,
      "full_filename": "/tmp/bearer-scan/injection-query-builder.php",
      "filename": ".",
      "source": {
        "start": 20,
        "end": 20,
        "column": {
          "start": 18,
          "end": 92
        }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": {
          "start": 18,
          "end": 92
        },
        "content": "$conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $_GET['bar'] . \\"'\\")"
      },
      "parent_line_number": 20,
      "snippet": "$conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $_GET['bar'] . \\"'\\")",
      "fingerprint": "2feb125811f5f90f7863bc85f521df21_1",
      "old_fingerprint": "67f87a634d6b291dceaab83c6a62d140_1",
      "code_extract": "        $query = $conn->createQuery(\\"SELECT * FROM foo WHERE bar = '\\" . $_GET['bar'] . \\"'\\");"
    }
  ]
}"
`;
