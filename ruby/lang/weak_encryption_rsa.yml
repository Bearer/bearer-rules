patterns:
  - pattern: |
      $<VAR>.$<METHOD>($<_>, $<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_openssl_rsa_init
      - variable: METHOD
        values:
          - export
          - to_pem
          - to_s
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: datatype
              scope: result
languages:
  - ruby
auxiliary:
  - id: ruby_lang_weak_encryption_openssl_rsa_init
    patterns:
      - pattern: |
          OpenSSL::PKey::RSA.new($<LENGTH>)
        filters:
          - variable: LENGTH
            less_than: 2048
metadata:
  description: "Weak encryption algorithm (RSA) detected."
  remediation_message: |
    ## Description

    A weak encryption library can lead to data breaches and greater security risk.

    ## Remediations
    According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), 1024-bit RSA (Rivest-Shamir-Adleman) is considered a weak encryption algorithm and therefore shouldn't be used.

    ❌ Avoid libraries and algorithms with known weaknesses:

    ```ruby
    OpenSSL::PKey::RSA.new 1024
    ```

    ✅ Instead, we recommend using bcrypt:

    ```ruby
    BCrypt::Password.create('iLOVEdogs123')
    ```

    ## Resources
    - [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)
  cwe_id:
    - 331
    - 326
  id: ruby_lang_weak_encryption_rsa
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_weak_encryption_rsa
