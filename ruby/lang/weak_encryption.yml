patterns:
  - pattern: Digest::$<ALGORITHM>.$<METHOD>()
    filters:
      - variable: ALGORITHM
        values:
          - MD5
          - SHA1
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
  - pattern: Digest::$<ALGORITHM>.$<METHOD>($<DATA_TYPE>)
    filters:
      - variable: ALGORITHM
        values:
          - MD5
          - SHA1
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
      - variable: DATA_TYPE
        detection: datatype
  - pattern: OpenSSL::Digest.digest($<ALGORITHM>, $<_>)
    filters:
      - variable: ALGORITHM
        regex: (?i)['"](SHA1?|DSS1?|MD\d)['"]
  - pattern: OpenSSL::Digest.digest($<ALGORITHM>, $<DATA_TYPE>)
    filters:
      - variable: ALGORITHM
        regex: (?i)['"](SHA1?|DSS1?|MD\d)['"]
      - variable: DATA_TYPE
        detection: datatype
  - pattern: OpenSSL::Digest::$<ALGORITHM>.digest($<_>)
    filters:
      - variable: ALGORITHM
        regex: \A(SHA1?|DSS1?|MD\d)\z
  - pattern: OpenSSL::Digest::$<ALGORITHM>.digest($<DATA_TYPE>)
    filters:
      - variable: ALGORITHM
        regex: \A(SHA1?|DSS1?|MD\d)\z
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<DIGEST>.update()
    filters:
      - variable: DIGEST
        detection: ruby_lang_weak_encryption_digest
  - pattern: |
      $<DIGEST>.update($<DATA_TYPE>)
    filters:
      - variable: DIGEST
        detection: ruby_lang_weak_encryption_digest
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<DIGEST> << $<_>
    filters:
      - variable: DIGEST
        detection: ruby_lang_weak_encryption_digest
  - pattern: |
      $<DIGEST> << $<DATA_TYPE>
    filters:
      - variable: DIGEST
        detection: ruby_lang_weak_encryption_digest
      - variable: DATA_TYPE
        detection: datatype
  - pattern: $<DIGEST>.$<METHOD>($<_>)
    filters:
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
  - pattern: $<DIGEST>.$<METHOD>($<DATA_TYPE>)
    filters:
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<VAR>.$<METHOD>()
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_rc4_init
      - variable: METHOD
        values:
          - encrypt
          - encrypt!
          - decrypt
  - pattern: |
      $<VAR>.$<METHOD>($<DATA_TYPE>)
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_rc4_init
      - variable: METHOD
        values:
          - encrypt
          - encrypt!
          - decrypt
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<VAR>.$<METHOD>()
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_openssl_rsa_init
      - variable: METHOD
        values:
          - private_decrypt
          - private_encrypt
          - public_decrypt
          - public_encrypt
  - pattern: |
      $<VAR>.$<METHOD>($<DATA_TYPE>)
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_openssl_rsa_init
      - variable: METHOD
        values:
          - private_decrypt
          - private_encrypt
          - public_decrypt
          - public_encrypt
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<VAR>.$<METHOD>()
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_openssl_rsa_init
      - variable: METHOD
        values:
          - export
          - to_pem
          - to_s
  - pattern: |
      $<VAR>.$<METHOD>($<_>, $<DATA_TYPE>)
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_openssl_rsa_init
      - variable: METHOD
        values:
          - export
          - to_pem
          - to_s
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<VAR>.$<METHOD>()
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_openssl_dsa_init
      - variable: METHOD
        values:
          - export
          - to_pem
          - to_s
  - pattern: |
      $<VAR>.$<METHOD>($<_>, $<DATA_TYPE>)
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_openssl_dsa_init
      - variable: METHOD
        values:
          - export
          - to_pem
          - to_s
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<VAR>.$<METHOD>()
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_blowfish_init
      - variable: METHOD
        values:
          - encrypt_pair
          - encrypt_string
          - decrypt_pair
          - decrypt_string
  - pattern: |
      $<VAR>.$<METHOD>($<DATA_TYPE>)
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_blowfish_init
      - variable: METHOD
        values:
          - encrypt_string
          - decrypt_string
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<VAR>.$<METHOD>($<_>, $<DATA_TYPE>)
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_blowfish_init
      - variable: METHOD
        values:
          - encrypt_pair
          - decrypt_pair
      - variable: DATA_TYPE
        detection: datatype
  - pattern: |
      $<VAR>.$<METHOD> do
        $<_>
      end
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_blowfish_init
      - variable: METHOD
        values:
          - encrypt_block
          - decrypt_block
  - pattern: |
      $<VAR>.$<METHOD> do
        $<DATA_TYPE>
      end
    filters:
      - variable: VAR
        detection: ruby_lang_weak_encryption_blowfish_init
      - variable: METHOD
        values:
          - encrypt_block
          - decrypt_block
      - variable: DATA_TYPE
        detection: datatype
languages:
  - ruby
auxiliary:
  - id: ruby_lang_weak_encryption_rc4_init
    patterns:
      - |
        RC4.new()
  - id: ruby_lang_weak_encryption_openssl_rsa_init
    patterns:
      - pattern: |
          OpenSSL::PKey::RSA.new($<LENGTH>)
        filters:
          - variable: LENGTH
            less_than: 2048
  - id: ruby_lang_weak_encryption_openssl_dsa_init
    patterns:
      - |
        OpenSSL::PKey::DSA.new()
  - id: ruby_lang_weak_encryption_blowfish_init
    patterns:
      - |
        Crypt::Blowfish.new()
  - id: ruby_lang_weak_encryption_digest
    patterns:
      - Digest::SHA1.new
      - Digest::MD5.new
      - pattern: OpenSSL::Digest.new($<ALGORITHM>)
        filters:
          - variable: ALGORITHM
            regex: (?i)\A['"](SHA1?|DSS1?|MD\d)['"]\z
      - pattern: OpenSSL::Digest::$<ALGORITHM>.new
        filters:
          - variable: ALGORITHM
            regex: \A(SHA1?|DSS1?|MD\d)\z
metadata:
  description: "Weak encryption library usage detected."
  remediation_message: |
    ## Description

    A weak encryption or hashing library can lead to data breaches and greater security risk. This rule checks for the use of weak encryption and hashing libraries or algorithms.

    ## Remediations
    According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption): MD5, RC4, DES, Blowfish, SHA1. 1024-bit RSA or DSA, 160-bit ECDSA (elliptic curves), 80/112-bit 2TDEA (two key triple DES) are considered as weak hash/encryption algorithms and therefor shouldn't be used.

    ❌ Avoid libraries and algorithms with known weaknesses:

    ```ruby
    Digest::SHA1.hexdigest 'weak password encryption'
    Crypt::Blowfish.new("weak password encryption")
    RC4.new("weak password encryption")
    OpenSSL::PKey::RSA.new 1024
    OpenSSL::PKey::DSA.new 1024
    Digest::MD5.hexdigest 'unsecure string'
    ```

    ✅ Instead, we recommend using bcrypt:

    ```ruby
    BCrypt::Password.create('iLOVEdogs123')
    ```

    ## Resources
    - [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)
  cwe_id:
    - 331
    - 326
  id: ruby_lang_weak_encryption
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_weak_encryption
