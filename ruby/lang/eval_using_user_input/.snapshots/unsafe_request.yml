high:
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 1
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 1
      snippet: RubyVM::InstructionSequence.compile(request.env["oops"])
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_0
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 3
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 3
      snippet: a.eval(request.env["oops"], "test")
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_1
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 5
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 5
      snippet: a.instance_eval(request.env["oops"])
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_2
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 7
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 7
      snippet: a.class_eval(request.env["oops"])
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_3
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 9
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 9
      snippet: a.module_eval(request.env["oops"])
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_4
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 11
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 11
      snippet: eval(request.env["oops"])
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_5
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 13
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 13
      snippet: instance_eval(request.env["oops"], "test")
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_6
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 15
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 15
      snippet: class_eval(request.env["oops"])
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_7
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 17
      filename: /tmp/scan/unsafe_request.rb
      parent_line_number: 17
      snippet: module_eval(request.env["oops"])
      fingerprint: 5adfccd6bca54c441413fc14fcc9f900_8

