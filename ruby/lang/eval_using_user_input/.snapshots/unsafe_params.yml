high:
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 1
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 1
            end: 1
            column:
                start: 1
                end: 52
        content: RubyVM::InstructionSequence.compile(params["oops"])
      sink:
        location:
            start: 1
            end: 1
            column:
                start: 1
                end: 52
      parent_line_number: 1
      snippet: RubyVM::InstructionSequence.compile(params["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_0
      old_fingerprint: af925d73576486056bee90451899b2f2_0
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 3
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 3
            end: 3
            column:
                start: 1
                end: 31
        content: a.eval(params["oops"], "test")
      sink:
        location:
            start: 3
            end: 3
            column:
                start: 1
                end: 31
      parent_line_number: 3
      snippet: a.eval(params["oops"], "test")
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_1
      old_fingerprint: af925d73576486056bee90451899b2f2_1
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 5
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 5
            end: 5
            column:
                start: 1
                end: 32
        content: a.instance_eval(params["oops"])
      sink:
        location:
            start: 5
            end: 5
            column:
                start: 1
                end: 32
      parent_line_number: 5
      snippet: a.instance_eval(params["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_2
      old_fingerprint: af925d73576486056bee90451899b2f2_2
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 7
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 7
            end: 7
            column:
                start: 1
                end: 29
        content: a.class_eval(params["oops"])
      sink:
        location:
            start: 7
            end: 7
            column:
                start: 1
                end: 29
      parent_line_number: 7
      snippet: a.class_eval(params["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_3
      old_fingerprint: af925d73576486056bee90451899b2f2_3
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 9
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 9
            end: 9
            column:
                start: 1
                end: 30
        content: a.module_eval(params["oops"])
      sink:
        location:
            start: 9
            end: 9
            column:
                start: 1
                end: 30
      parent_line_number: 9
      snippet: a.module_eval(params["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_4
      old_fingerprint: af925d73576486056bee90451899b2f2_4
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 11
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 11
            end: 11
            column:
                start: 1
                end: 21
        content: eval(params["oops"])
      sink:
        location:
            start: 11
            end: 11
            column:
                start: 1
                end: 21
      parent_line_number: 11
      snippet: eval(params["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_5
      old_fingerprint: af925d73576486056bee90451899b2f2_5
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 13
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 13
            end: 13
            column:
                start: 1
                end: 38
        content: instance_eval(params["oops"], "test")
      sink:
        location:
            start: 13
            end: 13
            column:
                start: 1
                end: 38
      parent_line_number: 13
      snippet: instance_eval(params["oops"], "test")
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_6
      old_fingerprint: af925d73576486056bee90451899b2f2_6
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 15
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 15
            end: 15
            column:
                start: 1
                end: 27
        content: class_eval(params["oops"])
      sink:
        location:
            start: 15
            end: 15
            column:
                start: 1
                end: 27
      parent_line_number: 15
      snippet: class_eval(params["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_7
      old_fingerprint: af925d73576486056bee90451899b2f2_7
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 17
      full_filename: /tmp/scan/unsafe_params.rb
      filename: .
      source:
        location:
            start: 17
            end: 17
            column:
                start: 1
                end: 28
        content: module_eval(params["oops"])
      sink:
        location:
            start: 17
            end: 17
            column:
                start: 1
                end: 28
      parent_line_number: 17
      snippet: module_eval(params["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_8
      old_fingerprint: af925d73576486056bee90451899b2f2_8

