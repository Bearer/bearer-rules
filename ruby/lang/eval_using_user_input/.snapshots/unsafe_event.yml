high:
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 2
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 2
            end: 2
            column:
                start: 3
                end: 53
      sink:
        location:
            start: 2
            end: 2
            column:
                start: 3
                end: 53
        content: RubyVM::InstructionSequence.compile(event["oops"])
      parent_line_number: 2
      snippet: RubyVM::InstructionSequence.compile(event["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_0
      old_fingerprint: d25367301be8d41c048ee13899318d54_0
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 4
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 4
            end: 4
            column:
                start: 3
                end: 32
      sink:
        location:
            start: 4
            end: 4
            column:
                start: 3
                end: 32
        content: a.eval(event["oops"], "test")
      parent_line_number: 4
      snippet: a.eval(event["oops"], "test")
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_1
      old_fingerprint: d25367301be8d41c048ee13899318d54_1
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 6
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 6
            end: 6
            column:
                start: 3
                end: 33
      sink:
        location:
            start: 6
            end: 6
            column:
                start: 3
                end: 33
        content: a.instance_eval(event["oops"])
      parent_line_number: 6
      snippet: a.instance_eval(event["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_2
      old_fingerprint: d25367301be8d41c048ee13899318d54_2
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 8
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 8
            end: 8
            column:
                start: 3
                end: 30
      sink:
        location:
            start: 8
            end: 8
            column:
                start: 3
                end: 30
        content: a.class_eval(event["oops"])
      parent_line_number: 8
      snippet: a.class_eval(event["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_3
      old_fingerprint: d25367301be8d41c048ee13899318d54_3
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 10
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 10
            end: 10
            column:
                start: 3
                end: 31
      sink:
        location:
            start: 10
            end: 10
            column:
                start: 3
                end: 31
        content: a.module_eval(event["oops"])
      parent_line_number: 10
      snippet: a.module_eval(event["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_4
      old_fingerprint: d25367301be8d41c048ee13899318d54_4
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 12
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 12
            end: 12
            column:
                start: 3
                end: 22
      sink:
        location:
            start: 12
            end: 12
            column:
                start: 3
                end: 22
        content: eval(event["oops"])
      parent_line_number: 12
      snippet: eval(event["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_5
      old_fingerprint: d25367301be8d41c048ee13899318d54_5
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 14
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 14
            end: 14
            column:
                start: 3
                end: 39
      sink:
        location:
            start: 14
            end: 14
            column:
                start: 3
                end: 39
        content: instance_eval(event["oops"], "test")
      parent_line_number: 14
      snippet: instance_eval(event["oops"], "test")
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_6
      old_fingerprint: d25367301be8d41c048ee13899318d54_6
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 16
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 16
            end: 16
            column:
                start: 3
                end: 28
      sink:
        location:
            start: 16
            end: 16
            column:
                start: 3
                end: 28
        content: class_eval(event["oops"])
      parent_line_number: 16
      snippet: class_eval(event["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_7
      old_fingerprint: d25367301be8d41c048ee13899318d54_7
    - rule:
        cwe_ids:
            - "94"
            - "95"
        id: ruby_lang_eval_using_user_input
        title: Potential command injection with user input detected.
        description: |
            ## Description
            It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to command injection.

            ## Remediations
            ❌ Avoid using code execution methods with unsanitized user input.

            It might be possible to use dynamic hardcoded values, instead of user input directly.

            ```ruby
            get_total_str = if params["include_vat"]
              "def dynamic(a,b,c); a + b + c; end"
            else
              "def dynamic(a,b); a + b; end"
            end

            get_total = eval(get_total_str)
            ```

            ## Resources
            - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
      line_number: 18
      full_filename: /tmp/scan/unsafe_event.rb
      filename: .
      source:
        location:
            start: 18
            end: 18
            column:
                start: 3
                end: 29
      sink:
        location:
            start: 18
            end: 18
            column:
                start: 3
                end: 29
        content: module_eval(event["oops"])
      parent_line_number: 18
      snippet: module_eval(event["oops"])
      fingerprint: c6c863e06a572d469f9d34897bd78ca4_8
      old_fingerprint: d25367301be8d41c048ee13899318d54_8

