high:
    - rule:
        cwe_ids:
            - "79"
        id: ruby_lang_raw_html_using_user_input
        title: Unsanitized user input detected in raw HTML string.
        description: |
            ## Description

            Applications should not include unsanitized user input in HTML. This
            can allow cross-site scripting (XSS) attacks.

            ## Remediations

            ❌ Avoid including user input directly in HTML strings:

            ```ruby
            html = "<h1>#{params[:title]}</h1>"
            ```

            ✅ Use a templating language such as ERB, and place the template in a separate file.

            ✅ When HTML strings must be used, sanitize user input:

            ```ruby
            html = "<h1>#{strip_tags(params[:title])}</h1>"
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_raw_html_using_user_input
      line_number: 1
      full_filename: /tmp/scan/bad.rb
      filename: .
      source:
        location:
            start: 1
            end: 1
            column:
                start: 1
                end: 43
        content: '"<h1 class=\"test\">#{params[:oops]}</h1>"'
      sink:
        location:
            start: 1
            end: 1
            column:
                start: 1
                end: 43
      parent_line_number: 1
      snippet: '"<h1 class=\"test\">#{params[:oops]}</h1>"'
      fingerprint: bbce316340479255472a6bc49330c542_0
      old_fingerprint: e656ad1fa2ca8c10a0a51f19d4d6a852_0
    - rule:
        cwe_ids:
            - "79"
        id: ruby_lang_raw_html_using_user_input
        title: Unsanitized user input detected in raw HTML string.
        description: |
            ## Description

            Applications should not include unsanitized user input in HTML. This
            can allow cross-site scripting (XSS) attacks.

            ## Remediations

            ❌ Avoid including user input directly in HTML strings:

            ```ruby
            html = "<h1>#{params[:title]}</h1>"
            ```

            ✅ Use a templating language such as ERB, and place the template in a separate file.

            ✅ When HTML strings must be used, sanitize user input:

            ```ruby
            html = "<h1>#{strip_tags(params[:title])}</h1>"
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_raw_html_using_user_input
      line_number: 2
      full_filename: /tmp/scan/bad.rb
      filename: .
      source:
        location:
            start: 2
            end: 2
            column:
                start: 1
                end: 28
        content: '"<h1>#{params[:oops]}</h1>"'
      sink:
        location:
            start: 2
            end: 2
            column:
                start: 1
                end: 28
      parent_line_number: 2
      snippet: '"<h1>#{params[:oops]}</h1>"'
      fingerprint: bbce316340479255472a6bc49330c542_1
      old_fingerprint: e656ad1fa2ca8c10a0a51f19d4d6a852_1
    - rule:
        cwe_ids:
            - "79"
        id: ruby_lang_raw_html_using_user_input
        title: Unsanitized user input detected in raw HTML string.
        description: |
            ## Description

            Applications should not include unsanitized user input in HTML. This
            can allow cross-site scripting (XSS) attacks.

            ## Remediations

            ❌ Avoid including user input directly in HTML strings:

            ```ruby
            html = "<h1>#{params[:title]}</h1>"
            ```

            ✅ Use a templating language such as ERB, and place the template in a separate file.

            ✅ When HTML strings must be used, sanitize user input:

            ```ruby
            html = "<h1>#{strip_tags(params[:title])}</h1>"
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_raw_html_using_user_input
      line_number: 4
      full_filename: /tmp/scan/bad.rb
      filename: .
      source:
        location:
            start: 4
            end: 4
            column:
                start: 1
                end: 31
        content: 'raw("Hello: #{params[:oops]}")'
      sink:
        location:
            start: 4
            end: 4
            column:
                start: 1
                end: 31
      parent_line_number: 4
      snippet: 'raw("Hello: #{params[:oops]}")'
      fingerprint: bbce316340479255472a6bc49330c542_2
      old_fingerprint: e656ad1fa2ca8c10a0a51f19d4d6a852_2
    - rule:
        cwe_ids:
            - "79"
        id: ruby_lang_raw_html_using_user_input
        title: Unsanitized user input detected in raw HTML string.
        description: |
            ## Description

            Applications should not include unsanitized user input in HTML. This
            can allow cross-site scripting (XSS) attacks.

            ## Remediations

            ❌ Avoid including user input directly in HTML strings:

            ```ruby
            html = "<h1>#{params[:title]}</h1>"
            ```

            ✅ Use a templating language such as ERB, and place the template in a separate file.

            ✅ When HTML strings must be used, sanitize user input:

            ```ruby
            html = "<h1>#{strip_tags(params[:title])}</h1>"
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_raw_html_using_user_input
      line_number: 5
      full_filename: /tmp/scan/bad.rb
      filename: .
      source:
        location:
            start: 5
            end: 5
            column:
                start: 5
                end: 32
        content: '"<h1>#{params[:oops]}</h1>"'
      sink:
        location:
            start: 5
            end: 5
            column:
                start: 1
                end: 33
      parent_line_number: 5
      snippet: '"<h1>#{params[:oops]}</h1>"'
      fingerprint: bbce316340479255472a6bc49330c542_3
      old_fingerprint: e656ad1fa2ca8c10a0a51f19d4d6a852_3
    - rule:
        cwe_ids:
            - "79"
        id: ruby_lang_raw_html_using_user_input
        title: Unsanitized user input detected in raw HTML string.
        description: |
            ## Description

            Applications should not include unsanitized user input in HTML. This
            can allow cross-site scripting (XSS) attacks.

            ## Remediations

            ❌ Avoid including user input directly in HTML strings:

            ```ruby
            html = "<h1>#{params[:title]}</h1>"
            ```

            ✅ Use a templating language such as ERB, and place the template in a separate file.

            ✅ When HTML strings must be used, sanitize user input:

            ```ruby
            html = "<h1>#{strip_tags(params[:title])}</h1>"
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_raw_html_using_user_input
      line_number: 7
      full_filename: /tmp/scan/bad.rb
      filename: .
      source:
        location:
            start: 7
            end: 7
            column:
                start: 1
                end: 36
        content: '"Hello: #{params[:oops]}".html_safe'
      sink:
        location:
            start: 7
            end: 7
            column:
                start: 1
                end: 36
      parent_line_number: 7
      snippet: '"Hello: #{params[:oops]}".html_safe'
      fingerprint: bbce316340479255472a6bc49330c542_5
      old_fingerprint: e656ad1fa2ca8c10a0a51f19d4d6a852_5
    - rule:
        cwe_ids:
            - "79"
        id: ruby_lang_raw_html_using_user_input
        title: Unsanitized user input detected in raw HTML string.
        description: |
            ## Description

            Applications should not include unsanitized user input in HTML. This
            can allow cross-site scripting (XSS) attacks.

            ## Remediations

            ❌ Avoid including user input directly in HTML strings:

            ```ruby
            html = "<h1>#{params[:title]}</h1>"
            ```

            ✅ Use a templating language such as ERB, and place the template in a separate file.

            ✅ When HTML strings must be used, sanitize user input:

            ```ruby
            html = "<h1>#{strip_tags(params[:title])}</h1>"
            ```

            ## Resources
            - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
        documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_raw_html_using_user_input
      line_number: 9
      full_filename: /tmp/scan/bad.rb
      filename: .
      source:
        location:
            start: 9
            end: 9
            column:
                start: 1
                end: 34
        content: 'ERB.new("Test: " + params[:oops])'
      sink:
        location:
            start: 9
            end: 9
            column:
                start: 1
                end: 34
      parent_line_number: 9
      snippet: 'ERB.new("Test: " + params[:oops])'
      fingerprint: bbce316340479255472a6bc49330c542_6
      old_fingerprint: e656ad1fa2ca8c10a0a51f19d4d6a852_6

