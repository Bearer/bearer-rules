imports:
  - python_shared_common_user_input
patterns:
  - pattern: FileSystemStorage($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
  - pattern: $<DEFAULT_STORAGE>.save($<USER_INPUT>, $<...>)
    filters:
      - variable: DEFAULT_STORAGE
        detection: python_django_path_using_user_input_default_storage
        scope: cursor
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
auxiliary:
  - id: python_django_path_using_user_input_default_storage
    patterns:
      - pattern: $<DEFAULT_STORAGE>
        filters:
          - variable: DEFAULT_STORAGE
            regex: \A(django\.core\.files\.storage\.)?default_storage\z
      - pattern: from $<STORAGE> import $<!>default_storage
        filters:
          - variable: STORAGE
            regex: \A(django\.core\.files\.)?storage\z
      - pattern: from $<STORAGE> import default_storage as $<!>$<_>
        filters:
          - variable: STORAGE
            regex: \A(django\.core\.files\.)?storage\z
languages:
  - python
severity: high
metadata:
  description: Unsanitized user input in file path
  remediation_message: |-
    ## Description

    Unsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.

    ## Remediations

    - **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.
    - **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.
    - **Do** sanitize user input used in file path resolution. For example, use absolute paths and check against the expected base directory
      ```python
        BASE_DIRECTORY = '/path/to/safe/directory'
        my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, user_input))

        if my_path.startswith(BASE_DIRECTORY):
          open(my_path)
      ```
    - **Do not** use user input when creating an instance of a file storage class such as `FileSystemStorage`. Rather rely on the default configuration as set in `settings.MEDIA_ROOT`
      ```python
        storage = FileSystemStorage(user_input) # unsafe
      ```
  cwe_id:
    - 73
  id: python_django_path_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/python_django_path_using_user_input
