imports:
  - python_shared_common_user_input
  - python_shared_lang_import1
  - python_shared_lang_import2
  - python_shared_lang_instance
patterns:
  - pattern: $<HANDLER>.set_header($<ALLOW_ORIGIN>, $<...>$<USER_INPUT>$<...>)
    filters:
      - variable: ALLOW_ORIGIN
        string_regex: (?i)\Aaccess-control-allow-origin\z
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
      - variable: HANDLER
        detection: python_shared_lang_instance
        scope: cursor
        filters:
          - variable: CLASS
            detection: python_shared_lang_import2
            scope: cursor
            filters:
              - variable: MODULE1
                values: [tornado]
              - variable: MODULE2
                values: [web]
              - variable: NAME
                values:
                  - RequestHandler
                  - StaticFileHandler
  - pattern: $<HANDLER>.send_header($<ALLOW_ORIGIN>, $<...>$<USER_INPUT>$<...>)
    filters:
      - variable: ALLOW_ORIGIN
        string_regex: (?i)\Aaccess-control-allow-origin\z
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
      - variable: HANDLER
        detection: python_shared_lang_instance
        scope: cursor
        filters:
          - variable: CLASS
            detection: python_shared_lang_import2
            scope: cursor
            filters:
              - variable: MODULE1
                values: [http]
              - variable: MODULE2
                values: [server]
              - variable: NAME
                values: [BaseHTTPRequestHandler]
  - pattern: |
      $<AIOHTTP>($<...>headers=$<HEADERS_HASH>$<...>)
    filters:
      - variable: HEADERS_HASH
        detection: python_lang_insecure_allow_origin_headers_hash
        scope: cursor
      - variable: AIOHTTP
        detection: python_shared_lang_import2
        scope: cursor
        filters:
          - variable: MODULE1
            values: [aiohttp]
          - variable: MODULE2
            values: [web]
          - variable: NAME
            values:
              - json_response
              - Response
  - pattern: |
      $<BOTTLE>($<...>headers=$<HEADERS_HASH>$<...>)
    filters:
      - variable: HEADERS_HASH
        detection: python_lang_insecure_allow_origin_headers_hash
        scope: cursor
      - variable: BOTTLE
        detection: python_shared_lang_import1
        scope: cursor
        filters:
          - variable: MODULE1
            values: [bottle]
          - variable: NAME
            values: [HTTPResponse]
auxiliary:
  - id: python_lang_insecure_allow_origin_headers_hash
    patterns:
      - pattern: |
          {$<...>$<ALLOW_ORIGIN>: $<USER_INPUT>$<...>}
        filters:
          - variable: ALLOW_ORIGIN
            string_regex: (?i)\Aaccess-control-allow-origin\z
          - variable: USER_INPUT
            detection: python_shared_common_user_input
            scope: result
languages:
  - python
severity: medium
metadata:
  description: Unsanitized user input in Access-Control-Allow-Origin
  remediation_message: |-
    ## Description

    Using unverified user-defined input to set the Access-Control-Allow-Origin header can result in unauthorized access to sensitive data. This vulnerability exposes your application to potential security risks by allowing attackers to specify origins that can access resources.

    ## Remediations

    - **Do not** use user input to define the `Access-Control-Allow-Origin` header without validation. This practice can inadvertently grant access to sensitive information.
      ```python
      self.send_header('Access-Control-Allow-Origin', external_input) # unsafe
      ```
    - **Do** validate user input if it must be used to set the `Access-Control-Allow-Origin` header. Ensure that only trusted origins are allowed by implementing a safelist of approved origins.
      ```python
        allowed_origins = ['http://www.example.com', 'https://www.secure.example.com']
        
        user_origin = input("Enter origin: ")
        
        if user_origin in allowed_origins:
          self.send_header('Access-Control-Allow-Origin', user_origin)
      ```

    ## References

    - [OWASP Origin & Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)
  cwe_id:
    - 346
  id: python_lang_insecure_allow_origin
  documentation_url: https://docs.bearer.com/reference/rules/python_lang_insecure_allow_origin
