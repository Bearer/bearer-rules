imports:
  - python_shared_common_user_input
patterns:
  - pattern: open($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
  - pattern: fileinput.$<METHOD>(files=($<...>$<USER_INPUT>$<...>)$<...>)
    filters:
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
      - variable: METHOD
        values:
          - input
          - FileInput
  - pattern: io.$<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
      - variable: METHOD
        values:
          - open
          - open_code
  - pattern: os.$<METHOD>($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
      - variable: METHOD
        values:
          - listdir
          - chdir
          - mkdir
          - makedirs
          - open
          - rmdir
          - remove
          - rename
          - unlink
  - pattern: os.path.$<METHOD>($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
      - variable: METHOD
        values:
          - join
  - pattern: shutil.$<METHOD>($<SOURCE>, $<DEST>, $<...>)
    filters:
      - either:
          - variable: SOURCE
            detection: python_shared_common_user_input
            scope: result
          - variable: DEST
            detection: python_shared_common_user_input
            scope: result
      - variable: METHOD
        values:
          - copy
          - copy2
          - copyfile
          - copymode
          - copystat
          - copytree
  - pattern: shutil.rmtree($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
  - pattern: $<PATH>.$<METHOD>($<...>)
    filters:
      - variable: PATH
        detection: python_lang_path_using_user_input_path_module_init_with_user_input
        scope: result
      - variable: METHOD
        values:
          - joinpath
          - mkdir
          - open
          - read_bytes
          - read_text
          - rename
          - replace
          - rmdir
          - symlink_to
          - touch
          - unlink
          - walk
          - write_bytes
          - write_text
  - pattern: $<PATH>.$<METHOD>($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: python_shared_common_user_input
        scope: result
      - variable: PATH
        detection: python_lang_path_using_user_input_path_module_init_without_user_input
        scope: result
      - variable: METHOD
        values:
          - joinpath
          - rename
          - replace
          - symlink_to
          - touch
auxiliary:
  - id: python_lang_path_using_user_input_path_module_init_without_user_input
    patterns:
      - pattern: $<PATH>
        filters:
          - variable: PATH
            regex: \A(pathlib\.)?(Pure)?(Windows|Posix)?Path\z
      - pattern: $<PATH_MODULE>($<...>)
        filters:
          - variable: PATH_MODULE
            regex: \A(pathlib\.)?(Pure)?(Windows|Posix)?Path\z
  - id: python_lang_path_using_user_input_path_module_init_with_user_input
    patterns:
      - pattern: $<PATH_MODULE>($<USER_INPUT>)
        filters:
          - variable: PATH_MODULE
            regex: \A(pathlib\.)?(Pure)?(Windows|Posix)?Path\z
          - variable: USER_INPUT
            detection: python_shared_common_user_input
            scope: result
languages:
  - python
severity: high
metadata:
  description: Unsanitized user input in file path
  remediation_message: |-
    ## Description

    Unsanitized user input in file path resolution can lead to security vulnerabilities. This issue arises when an application directly uses input from the user to determine file paths or names without proper validation or sanitization. Attackers can exploit this to access unauthorized files or directories, leading to data breaches or other security compromises.

    ## Remediations

    - **Do not** directly use user input in file paths without sanitization. This prevents attackers from manipulating file paths to access or manipulate unauthorized files.
    - **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.
    - **Do** sanitize user input used in file path resolution. For example, use absolute paths and check against the expected base directory
      ```python
        BASE_DIRECTORY = '/path/to/safe/directory'
        my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, user_input))
        
        if my_path.startswith(BASE_DIRECTORY):
          open(my_path)
      ```
  cwe_id:
    - 73
  id: python_lang_path_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/python_lang_path_using_user_input
