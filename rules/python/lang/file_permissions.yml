imports:
  - python_shared_lang_import1
patterns:
  - pattern: $<OS>($<_>, $<MODE>$<...>)
    filters:
      - variable: OS
        detection: python_shared_lang_import1
        scope: cursor
        filters:
          - variable: MODULE1
            values: [os]
          - variable: NAME
            values:
              - chmod
              - fchmod
              - lchmod
      - variable: MODE
        detection: python_lang_file_permissions_modes
        scope: result
  - pattern: $<OS>(0)
    filters:
      - variable: OS
        detection: python_shared_lang_import1
        scope: cursor
        filters:
          - variable: MODULE1
            values: [os]
          - variable: NAME
            values:
              - umask
  - pattern: $<PATH>.$<METHOD>($<MODE>$<...>)
    filters:
      - variable: PATH
        detection: python_lang_file_permissions_path_module_init
        scope: cursor
      - variable: METHOD
        values:
          - chmod
          - lchmod
      - variable: MODE
        detection: python_lang_file_permissions_modes
        scope: result
auxiliary:
  - id: python_lang_file_permissions_modes
    patterns:
      - pattern: $<STAT_PERMISSION>
        filters:
          - variable: STAT_PERMISSION
            detection: python_shared_lang_import1
            scope: cursor
            filters:
              - variable: MODULE1
                values: [stat]
              - variable: NAME
                values:
                  - S_IWGRP
                  - S_IXGRP
                  - S_IRWXG
                  - S_IWOTH
                  - S_IXOTH
                  - S_IRWXO
      - pattern: $<MASK>
        filters:
          - either:
              - variable: MASK
                regex: \A0o?7
              - variable: MASK
                regex: \A0o?\d[1-7]
              - variable: MASK
                regex: \A0o?\d\d[1-7]
  - id: python_lang_file_permissions_path_module_init
    patterns:
      - pattern: $<PATH_MODULE>($<...>)
        filters:
          - variable: PATH_MODULE
            detection: python_lang_file_permissions_path_module
            scope: cursor
  - id: python_lang_file_permissions_path_module
    patterns:
      - pattern: $<PATH_MODULE>
        filters:
          - variable: PATH_MODULE
            detection: python_shared_lang_import1
            scope: cursor
            filters:
              - variable: MODULE1
                values: [pathlib]
              - variable: NAME
                values:
                  - Path
                  - PurePath
                  - WindowsPath
                  - PureWindowsPath
                  - PosixPath
                  - PurePosixPath
languages:
  - python
severity: high
metadata:
  description: Permissive file assignment
  remediation_message: |-
    ## Description

    Permissive file assignment exposes sensitive information by granting unnecessary read, write, or execute permissions to users without ownership privileges.

    ## Remediations

    - **Do** keep file permissions as restrictive as possible to minimize the risk of unauthorized access. Use the principle of least privilege to only grant permissions that are absolutely necessary for the operation of the application.
      ```python
      os.chmod("my_private_file.txt", 0o600) # only you have full read and write access
      ```
    - **Do** prefer assigning file permissions to 'groups' rather than 'other' when you need to extend privileges to users who are not the owners. This approach helps in limiting access to a more controlled set of users.
    - **Do not** set a permissive `umask` value, as this can lead to overly permissive default permissions for new files and directories
    ```python
      os.umask(0) # unsafe
    ```
  cwe_id:
    - 732
  id: python_lang_file_permissions
  documentation_url: https://docs.bearer.com/reference/rules/python_lang_file_permissions
