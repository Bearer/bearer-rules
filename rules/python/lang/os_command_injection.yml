imports:
  - python_shared_common_external_input
patterns:
  - pattern: $<OS>.$<METHOD>($<...>$<EXTERNAL_INPUT>$<...>)
    filters:
      - variable: OS
        detection: python_lang_os_command_injection_external_os_init
      - variable: METHOD
        values:
          - system
          - popen
          - popen2
          - popen3
          - popen4
      - variable: EXTERNAL_INPUT
        detection: python_shared_common_external_input
        scope: result
  - pattern: getattr($<OS>, "system")($<...>$<EXTERNAL_INPUT>$<...>)
    filters:
      - variable: OS
        detection: python_lang_os_command_injection_external_os_init
      - variable: EXTERNAL_INPUT
        detection: python_shared_common_external_input
        scope: result
  - pattern: subprocess.$<METHOD>($<EXTERNAL_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - call
          - check_call
          - check_output
          - run
          - Popen
      - variable: EXTERNAL_INPUT
        detection: python_shared_common_external_input
        scope: result
  - pattern: $<OS>.$<METHOD>($<_>, $<...>$<EXTERNAL_INPUT>$<...>, $<...>)
    filters:
      - variable: OS
        detection: python_lang_os_command_injection_external_os_init
      - variable: METHOD
        values:
          - spawnl
          - spawnle
          - spawnlp
          - spawnlpe
          - spawnv
          - spawnve
          - spawnvp
          - spawnvpe
          - posix_spawn
          - posix_spawnp
          - startfile
      - variable: EXTERNAL_INPUT
        detection: python_shared_common_external_input
        scope: result
  - pattern: $<OS>.$<METHOD>($<_>, $<BASH>, ["-c", $<...>$<EXTERNAL_INPUT>$<...>], $<...>)
    filters:
      - variable: OS
        detection: python_lang_os_command_injection_external_os_init
      - variable: BASH
        regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
      - variable: METHOD
        values:
          - spawnv
          - spawnve
          - spawnvp
          - spawnvp
          - spawnvpe
          - posix_spawn
          - posix_spawnp
      - variable: EXTERNAL_INPUT
        detection: python_shared_common_external_input
        scope: result
  - pattern: $<OS>.$<METHOD>($<_>, $<BASH>, "-c", $<...>$<EXTERNAL_INPUT>$<...>, $<...>)
    filters:
      - variable: OS
        detection: python_lang_os_command_injection_external_os_init
      - variable: BASH
        regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
      - variable: METHOD
        values:
          - spawnl
          - spawnle
          - spawnlp
          - spawnlpe
      - variable: EXTERNAL_INPUT
        detection: python_shared_common_external_input
        scope: result
auxiliary:
  - id: python_lang_os_command_injection_external_os_init
    patterns:
      - os
      - __import__("os")
languages:
  - python
severity: critical
metadata:
  description: Unsanitized user input in OS command
  remediation_message: |-
    ## Description

    Directly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.

    ## Remediations

    - **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands. 
    - **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands. Use safe lists or dictionaries if you need to be dynamic. 

    ## References

    - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
  cwe_id:
    - 78
  id: python_lang_os_command_injection
  documentation_url: https://docs.bearer.com/reference/rules/python_lang_os_command_injection
