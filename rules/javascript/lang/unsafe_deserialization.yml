imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      $<YAML>.$<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: YAML
        regex: \A(?i)yaml\z
      - variable: METHOD
        values:
          # yaml
          - parse
          - parseDocument
          - parseAllDocuments
          # yaml-js
          - load
          - loadAll
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
languages:
  - javascript
severity: critical
metadata:
  description: Unsanitized user input in deserialization method
  remediation_message: |-
    ## Description

    Deserializing untrusted data is a risky practice. This vulnerability arises when data, especially from external sources like request objects, is deserialized without proper sanitization. Attackers can embed malicious payloads within serialized data, compromising your application's security upon deserialization.

    ## Remediations

    - **Do not** deserialize data that comes directly from untrusted sources. This prevents attackers from injecting malicious payloads that could compromise your application.
    - **Do** opt for data-only and language-neutral serialization formats like JSON or XML for deserializing data. These formats are less susceptible to manipulation by attackers aiming to exploit the deserialization process.
      ```javascript
      JSON.parse(req.params);
      ```

    ## References

    - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  cwe_id:
    - 502
  id: javascript_lang_unsafe_deserialization
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_unsafe_deserialization
