imports:
  - javascript_shared_third_parties_cryptojs_init
  - javascript_shared_common_datatype
patterns:
  - pattern: |
      $<CRYPTOJS_INIT>.DES.encrypt($<PASSWORD>, $<_>)
    filters:
      - variable: CRYPTOJS_INIT
        detection: javascript_shared_third_parties_cryptojs_init
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
languages:
  - javascript
only_data_types:
  - "Passwords"
metadata:
  description: "Usage of weak encryption algorithm on a password (DES)"
  remediation_message: |
    ## Description

    According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.

    Moreover, since encryption is reversible, it is possible to retrieve the plaintext value. This makes encryption a bad choice for passwords. Instead, passwords should be hashed.

    ## Remediations

    ❌ Do not use encryption for passwords, wherever possible.

    ✅ Use a recommended hashing library such as Argon2id for passwords

    ```javascript
      const argon2 = require("argon2");

      const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })
    ```

    ## Resources
    - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
  cwe_id:
    - 326
  id: javascript_lang_weak_password_encryption_des
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_encryption_des
  cloud_code_suggestions: true
