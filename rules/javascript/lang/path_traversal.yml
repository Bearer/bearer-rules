imports:
  - javascript_shared_common_dynamic_input
  - javascript_shared_import_library
  - javascript_shared_import_member
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      $<METHOD>($<...>$<DYNAMIC_INPUT>$<...>)
    filters:
      - either:
          - variable: METHOD
            detection: javascript_lang_path_traversal_resolve
          - variable: METHOD
            detection: javascript_lang_path_traversal_join
      - variable: DYNAMIC_INPUT
        detection: javascript_lang_path_traversal_dynamic_input
        scope: cursor
  - pattern: |
      $<PATH>.$<METHOD>($<...>$<DYNAMIC_INPUT>$<...>)
    filters:
      - variable: PATH
        detection: javascript_lang_path_traversal_path
        scope: cursor
      - variable: METHOD
        values:
          - join
          - resolve
      - variable: DYNAMIC_INPUT
        detection: javascript_lang_path_traversal_dynamic_input
        scope: cursor
auxiliary:
  - id: javascript_lang_path_traversal_dynamic_input
    sanitizer: javascript_lang_path_traversal_sanitizer
    patterns:
      - pattern: $<UNSANITIZED_DYNAMIC_INPUT>
        filters:
          - variable: UNSANITIZED_DYNAMIC_INPUT
            detection: javascript_shared_common_dynamic_input
            scope: result
          - not:
              variable: UNSANITIZED_DYNAMIC_INPUT
              detection: javascript_shared_common_user_input
              scope: result
  - id: javascript_lang_path_traversal_sanitizer
    patterns:
      - $<_>.replace($<_>, "")
      - $<_>.replace($<_>, '')
  - id: javascript_lang_path_traversal_path
    patterns:
      - pattern: $<LIBRARY>
        filters:
          - variable: LIBRARY
            detection: javascript_shared_import_library
            scope: cursor
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                string_regex: \Apath\z
      - import $<!>$<_> from "path"
      - import * as $<!>$<_> from "path"
      # Fallback
      - path
  - id: javascript_lang_path_traversal_join
    patterns:
      - pattern: $<PATH>
        filters:
          - variable: PATH
            detection: javascript_shared_import_member
            scope: cursor
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                string_regex: \Apath\z
              - variable: JAVASCRIPT_SHARED_IMPORT_MEMBER_NAME
                regex: \Ajoin\z
      - import { $<!>join } from "path"
      - import { join as $<!>$<_> } from "path"
  - id: javascript_lang_path_traversal_resolve
    patterns:
      - pattern: $<PATH>
        filters:
          - variable: PATH
            detection: javascript_shared_import_member
            scope: cursor
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                string_regex: \Apath\z
              - variable: JAVASCRIPT_SHARED_IMPORT_MEMBER_NAME
                regex: \Aresolve\z
      - import { $<!>resolve } from "path"
      - import { resolve as $<!>$<_> } from "path"
languages:
  - javascript
severity: high
metadata:
  description: "Unsanitized dynamic input in file path"
  remediation_message: |-
    ## Description

    Using unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.

    ## Remediations

    - **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.
    - **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\..`, to prevent path traversal attacks.
    ```javascript
    var folder = target.replace(/^(\.\.(\/|\\|$))+/, '');
    ```
    - **Do** check for and remove any instances of the NULL byte ("%00") in user input to guard against poison NULL byte attacks.
    ```javascript
    if (target.indexOf('\0') !== -1) {
      // Handle or reject the input
    }
    ```
    - **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.
    ```javascript
    const path = require("path");
    var pathname = path.join("/public/", folder);
    if (pathname.indexOf("/public/") !== 0) {
      // Handle or reject the input
    }
    ```

    ## References

    - [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)
  cwe_id:
    - 22
  id: javascript_lang_path_traversal
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_path_traversal
