imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      eval($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
  - pattern: |
      new Function($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
  - pattern: |
      setTimeout($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
  - pattern: |
      setInterval($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
  - pattern: |
      vm.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - createContext
          - runInContext
          - runInNewContext
          - runInThisContext
          - compileFunction
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
  - pattern: |
      new vm.Script($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
languages:
  - javascript
severity: critical
metadata:
  description: "Unsanitized user input in 'eval' type function"
  remediation_message: |-
    ## Description

    Allowing user input to directly influence the behavior of `eval` and similar functions like `setTimeout` poses a significant security risk, potentially leading to remote code execution attacks. This vulnerability stems from the dynamic execution of code, which can be maliciously crafted by an attacker.

    ## Remediations

    - **Do not** use `eval` or similar code execution functions directly with user input. This approach can make your application vulnerable to attacks.
    ```javascript
    eval(userInput); // unsafe
    ```
    - **Do** use static, hardcoded values when working with dynamic code execution methods. This method ensures that only predefined operations are performed, reducing the risk of executing malicious code.
    ```javascript
      let myFunc = "(a, b) => a + b";
      if (req.params["single_item"]) {
        myFunc = "(a) => a";
      }
    ```
    - **Do** consider using compiled functions instead of dynamically compiling code with user input. This practice allows for safer execution of dynamic operations by predefining the code to be executed.
    - **Do** enable JavaScript's strict mode in your code. This mode helps to catch common coding bloopers, prevents unsafe actions, and limits certain features that can make your code more secure.
    ```javascript
    "use strict";
    ```

    ## References

    - [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)
  cwe_id:
    - 95
  id: "javascript_lang_eval_user_input"
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input
