imports:
  - javascript_shared_third_parties_cryptojs_init
  - javascript_shared_lang_crypto_init
  - javascript_shared_common_datatype
patterns:
  - pattern: |
      $<VAR>.update($<PASSWORD>)
    filters:
      - variable: VAR
        detection: create_sha_hash
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
  - pattern: |
      $<CRYPTOJS_INIT>.SHA1($<PASSWORD>)
    filters:
      - variable: CRYPTOJS_INIT
        detection: javascript_shared_third_parties_cryptojs_init
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
  - pattern: |
      $<CRYPTOJS_INIT>.HmacSHA1($<PASSWORD>, $<_>)
    filters:
      - variable: CRYPTOJS_INIT
        detection: javascript_shared_third_parties_cryptojs_init
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
languages:
  - javascript
auxiliary:
  - id: create_sha_hash
    patterns:
      - pattern: |
          $<CRYPTO_INIT>.$<METHOD>($<ALGORITHM>$<...>)
        filters:
          - variable: CRYPTO_INIT
            detection: javascript_shared_lang_crypto_init
            scope: cursor
          - variable: METHOD
            values:
              - createHmac
              - createHash
          - variable: ALGORITHM
            string_regex: \Asha1\z
only_data_types:
  - "Passwords"
metadata:
  description: "Usage of weak hashing library on a password (SHA-1)"
  remediation_message: |-
    ## Description

    Using weak hashing algorithms like SHA-1 for password storage compromises security. These algorithms are vulnerable to attacks, making it easier for attackers to crack passwords and access sensitive information.

    ## Remediations

    - **Do not** use SHA-1 for hashing passwords. These algorithms are no longer considered secure due to their vulnerability to various attacks.
    - **Do** use a recommended hashing library such as Argon2id for hashing passwords. This approach enhances security by providing a more robust defense against brute-force attacks.
      ```javascript
      const argon2 = require("argon2");
      const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })
      ```

    ## References

    - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
  cwe_id:
    - 326
  id: javascript_lang_weak_password_hash_sha1
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_sha1
  cloud_code_suggestions: true
severity: high
