imports:
  - javascript_shared_common_datatype
patterns:
  - pattern: |
      $<ARGON2>.hash($<PASSWORD>, $<INSECURE_ARGON2_TYPE>)
    filters:
      - variable: ARGON2
        detection: argon2_init
        scope: cursor
      - variable: INSECURE_ARGON2_TYPE
        detection: insecure_argon2_type
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
languages:
  - javascript
auxiliary:
  - id: argon2_init
    patterns:
      - import $<!>$<_>$<...> from "argon2"
      - pattern: |
          $<METHOD>($<NAME>)
        filters:
          - variable: METHOD
            values:
              - require
              - import
          - variable: NAME
            string_regex: \Aargon2\z
      # fallback
      - argon2
  - id: insecure_argon2_type
    patterns:
      - |
        { type: argon2.argon2i }
      - |
        { type: argon2.argon2d }
only_data_types:
  - "Passwords"
metadata:
  description: "Usage of weak hashing library on a password (Argon2)"
  remediation_message: |-
    ## Description

    Choosing a weak hashing algorithm for passwords compromises security. Argon2 has three variants: Argon2i, Argon2d, and Argon2id. Argon2id is the strongest and most recommended for password hashing because of its balanced resistance against both side-channel and GPU attack vectors.

    ## Remediations

    - **Do not** override the Argon2 type when implementing the Argon2 hashing library. Using Argon2id ensures the highest level of security for password storage.
      ```javascript
        const argon2 = require("argon2");
        const hash = await argon2.hash(req.params.password, { type: argon2.argon2i }) // unsafe
      ```
    - **Do** rely on the default Argon2 type - Argon2id as it is the most secure.
      ```javascript
        const argon2 = require("argon2");
        const hash = await argon2.hash(req.params.password);
      ```

    ## References

    - [Argon2 type options](https://github.com/ranisalt/node-argon2/wiki/Options#type)
    - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
  cwe_id:
    - 326
  id: javascript_lang_weak_password_hash_argon2
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_argon2
  cloud_code_suggestions: true
severity: high
