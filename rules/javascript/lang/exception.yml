imports:
  - javascript_shared_common_datatype
patterns:
  - pattern: |
      Promise.reject($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: DATA_TYPE
        detection: javascript_shared_common_datatype
        scope: result
  - pattern: |
      $<REJECT>($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: REJECT
        detection: javascript_lang_new_promise_init
        scope: cursor
      - variable: DATA_TYPE
        detection: javascript_shared_common_datatype
        scope: result
  - pattern: |
      throw $<...>$<DATA_TYPE>$<...>
    filters:
      - variable: DATA_TYPE
        detection: javascript_shared_common_datatype
        scope: result
auxiliary:
  - id: javascript_lang_new_promise_init
    patterns:
      - |
        new Promise(($<_>, $<!>$<_>) => {})
      - |
        new Promise(function ($<_>, $<!>$<_>) {})
languages:
  - javascript
skip_data_types:
  - Unique Identifier
metadata:
  description: "Leakage of sensitive data in exception message"
  remediation_message: |-
    ## Description

    Leakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.

    ## Remediations

    - **Do not** include sensitive data in exception messages. This can inadvertently expose personal or confidential information.
    ```javascript
    throw new CustomError(`Error with ${user.email}`) // unsafe
    ```
    - **Do** use non-sensitive, unique identifiers in exception messages to maintain user privacy and data security.
    ```javascript
    throw new CustomError(`Error with ${user.uuid}`)
    ```
  cwe_id:
    - 210
  id: javascript_lang_exception
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_exception
  cloud_code_suggestions: true
severity: medium
