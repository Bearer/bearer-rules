imports:
  - javascript_shared_third_parties_cryptojs_init
  - javascript_shared_common_datatype
patterns:
  - pattern: |
      $<CRYPTOJS_INIT>.RC4.encrypt($<OPTIONAL_DATA_TYPE>, $<_>)
    filters:
      - variable: CRYPTOJS_INIT
        detection: javascript_shared_third_parties_cryptojs_init
        scope: cursor
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: javascript_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: javascript_shared_common_datatype
              scope: result
languages:
  - javascript
skip_data_types:
  - "Unique Identifier"
  - "Passwords" # see javascript_weak_password_encryption
metadata:
  description: "Usage of weak encryption algorithm (RC4)"
  remediation_message: |-
    ## Description

    Using the RC4 (Rivest Cipher 4) encryption algorithm introduces a significant security vulnerability. RC4 is outdated and has been proven to be susceptible to various attacks, making any data encrypted with it vulnerable to unauthorized access and compromise.

    ## Remediations

    - **Do not** use RC4 for encrypting data. Its weaknesses can lead to compromised data security.
    - **Do** opt for stronger, more secure encryption algorithms like AES-256 when encrypting data. This ensures a higher level of security for your data.
    ```javascript
    const crypto = require("crypto");

    const cipher = crypto.createCipheriv("aes-256-cbc", key, iv);
    const encrypted = cipher.update("my secret message", "utf8");
    ```

    ## References

    - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)
  cwe_id:
    - 327
  id: javascript_lang_weak_encryption_rc4
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_encryption_rc4
  cloud_code_suggestions: true
severity: high
