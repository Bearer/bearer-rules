imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      $<KNEX_CLIENT>.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: javascript_lang_sql_injection_user_input
        scope: result
      - variable: KNEX_CLIENT
        detection: javascript_lang_sql_injection_knex_client
      - variable: METHOD
        values:
          - fromRaw
          - whereRaw
          - raw
  - pattern: |
      $<PG_CLIENT>.query($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: PG_CLIENT
        detection: javascript_lang_sql_injection_pg_client
      - variable: USER_INPUT
        detection: javascript_lang_sql_injection_user_input
        scope: result
  - pattern: |
      $<_>.sequelize.query($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: javascript_lang_sql_injection_user_input
        scope: result
  - pattern: |
      $<SEQUELIZE>.query($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: javascript_lang_sql_injection_user_input
        scope: result
      - variable: SEQUELIZE
        detection: javascript_lang_sql_injection_sequelize_init
  - pattern: |
      $<MYSQL_CONN>.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: MYSQL_CONN
        detection: javascript_lang_sql_injection_mysql_conn
      - variable: USER_INPUT
        detection: javascript_lang_sql_injection_user_input
        scope: result
      - variable: METHOD
        values:
          - query
          - execute
  - pattern: |
      $<MYSQL_POOL>.query($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: MYSQL_POOL
        detection: javascript_lang_sql_injection_mysql_pool
      - variable: USER_INPUT
        detection: javascript_lang_sql_injection_user_input
        scope: result
  - pattern: |
      $<CONN>.query($<USER_INPUT>, $<_>)
    filters:
      - variable: CONN
        detection: javascript_lang_sql_injection_pool_conn
      - variable: USER_INPUT
        detection: javascript_lang_sql_injection_user_input
        scope: result
auxiliary:
  - id: javascript_lang_sql_injection_user_input
    sanitizer: javascript_lang_sql_injection_sanitizer
    patterns:
      - pattern: $<UNSANITIZED_USER_INPUT>
        filters:
          - variable: UNSANITIZED_USER_INPUT
            detection: javascript_shared_common_user_input
            contains: false
  - id: javascript_lang_sql_injection_pg_client
    patterns:
      - new Client()
  - id: javascript_lang_sql_injection_sequelize_init
    patterns:
      - new Sequelize()
  - id: javascript_lang_sql_injection_mysql_conn
    patterns:
      - mysql.createConnection()
      - await mysql.createConnection()
  - id: javascript_lang_sql_injection_mysql_pool
    patterns:
      - mysql.createPool()
  - id: javascript_lang_sql_injection_pool_conn
    patterns:
      - pattern: $<MYSQL_POOL>.getConnection(function($<_>, $<!>$<_>) {})
        filters:
          - variable: MYSQL_POOL
            detection: javascript_lang_sql_injection_mysql_pool
  - id: javascript_lang_sql_injection_knex_client
    patterns:
      - pattern: $<KNEX_CLIENT_INIT>
        filters:
          - variable: KNEX_CLIENT_INIT
            values:
              - knex
              - knexClient
              - client
  - id: javascript_lang_sql_injection_sanitizer
    patterns:
      - pattern: $<_>.hash($<!>$<_>)
languages:
  - javascript
severity: high
metadata:
  description: "SQL injection vulnerability detected."
  remediation_message: |
    ## Description
    Including unsanitized data, such as user input or request data, in raw SQL queries makes your application vulnerable to SQL injection attacks.

    ## Remediations

    ❌ Avoid raw queries, especially those that contain unsanitized user input

    ```javascript
      var sqlite = new Sequelize("sqlite::memory:");
      sqlite.query("SELECT * FROM users WHERE ID = " + req.params.userId);
    ```

    Instead, consider the following approaches when writing SQL queries

    ✅ Validate query input wherever possible

    ```javascript
      var rawId = req.params.userId
      if !(/[0-9]+/.test(rawId)) {
        // input is unexpected; don't make the query
      }
    ```

    ✅ Use prepared (or parameterized) statements when querying

    Sequelize example -
    ```javascript
      var sqlite = new Sequelize("sqlite::memory:");
      sqlite.query(
        "SELECT * FROM users WHERE ID = ?",
        { replacements: [req.params.userId] },
        type: sequelize.QueryTypes.SELECT
      )
    ```

    ## Resources
    - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
    - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 89
  id: javascript_lang_sql_injection
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_sql_injection
