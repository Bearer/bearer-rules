imports:
  - javascript_shared_third_parties_cryptojs_init
  - javascript_shared_lang_crypto_init
  - javascript_shared_common_datatype
patterns:
  - pattern: $<MD5>($<PASSWORD>)
    filters:
      - variable: MD5
        detection: md5_init
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
  - pattern: |
      $<VAR>.update($<PASSWORD>)
    filters:
      - variable: VAR
        detection: create_md5_hash
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
  - pattern: |
      $<CRYPTOJS_INIT>.MD5($<PASSWORD>)
    filters:
      - variable: CRYPTOJS_INIT
        detection: javascript_shared_third_parties_cryptojs_init
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
  - pattern: |
      $<CRYPTOJS_INIT>.HmacMD5($<PASSWORD>, $<_>)
    filters:
      - variable: CRYPTOJS_INIT
        detection: javascript_shared_third_parties_cryptojs_init
        scope: cursor
      - variable: PASSWORD
        detection: javascript_shared_common_datatype
        scope: result
languages:
  - javascript
auxiliary:
  - id: create_md5_hash
    patterns:
      - pattern: |
          $<CRYPTO_INIT>.$<METHOD>($<ALGORITHM>$<...>)
        filters:
          - variable: CRYPTO_INIT
            detection: javascript_shared_lang_crypto_init
            scope: cursor
          - variable: METHOD
            values:
              - createHmac
              - createHash
          - variable: ALGORITHM
            string_regex: \Amd5\z
  - id: md5_init
    patterns:
      - import $<!>$<_>$<...> from "md5"
      - pattern: |
          $<METHOD>($<NAME>)
        filters:
          - variable: METHOD
            values:
              - require
              - import
          - variable: NAME
            string_regex: \Amd5\z
      # fallback
      - md5
only_data_types:
  - "Passwords"
metadata:
  description: "Usage of weak hashing library on a password (MD5)"
  remediation_message: |-
    ## Description

    Using a weak hashing library like MD5 for password storage compromises security. MD5 is outdated and vulnerable, making it easier for attackers to crack passwords and gain unauthorized access.

    ## Remediations

    - **Do not** use MD5 for hashing passwords or any sensitive data. It is no longer considered secure.
    - **Do** use a strong and recommended hashing library such as Argon2id for hashing passwords. This method enhances security by making it significantly harder for attackers to crack stored passwords.
    ```javascript
    const argon2 = require("argon2");
    const hash = await argon2.hash(req.params.password, { type: argon2.argon2id })
    ```

    ## References

    - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
  cwe_id:
    - 326
  id: javascript_lang_weak_password_hash_md5
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_password_hash_md5
  cloud_code_suggestions: true
severity: high
