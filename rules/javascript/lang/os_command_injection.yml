imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      $<CHILD_PROCESS_PATTERN>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: CHILD_PROCESS_PATTERN
        values:
          - exec
          - execSync
          - spawn
          - spawnSync
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
languages:
  - javascript
severity: critical
metadata:
  description: "Unsanitized user input in OS command"
  remediation_message: |
    ## Description
    Using external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.

    ## Remediations

    Think twice if user input is really needed there.

    It might be possible to use dynamic hardcoded values:

    ```javascript
      let filePattern = "*.js"

      if req.params.graphql {
        filePattern = "*.gql"
      }

      cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) => {});
    ```

    ## Resources
    - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
  cwe_id:
    - 78
  id: "javascript_lang_os_command_injection"
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_os_command_injection
