patterns:
  - pattern: |
      const $<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
  - pattern: |
      $<_>.$<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
  - pattern: |
      { $<!>$<NAME>: $<STRING_LITERAL> }
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
  - pattern: crypto.$<METHOD>($<_>, $<STRING_LITERAL>$<...>)
    filters:
      - variable: METHOD
        values:
          - createCipher
          - createDecipher
          - createCipheriv
          - createDecipheriv
          - createHmac
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
  - pattern: crypto.createSecretKey($<STRING_LITERAL>$<...>)
    filters:
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
  - pattern: crypto.$<METHOD>($<CRYPTO_PRIVATE_KEY>$<...>)
    filters:
      - variable: METHOD
        values:
          - createPrivateKey
          - privateDecrypt
          - privateEncrypt
      - variable: CRYPTO_PRIVATE_KEY
        detection: javascript_lang_hardcoded_secret_crypto_private_key
        scope: cursor
  - pattern: $<SIGN>.sign($<CRYPTO_PRIVATE_KEY>$<...>)
    filters:
      - variable: SIGN
        detection: javascript_lang_hardcoded_secret_crypto_sign
      - variable: CRYPTO_PRIVATE_KEY
        detection: javascript_lang_hardcoded_secret_crypto_private_key
        scope: cursor
auxiliary:
  - id: javascript_lang_hardcoded_secret_crypto_sign
    patterns:
      - pattern: crypto.createSign()
  - id: javascript_lang_hardcoded_secret_crypto_private_key
    patterns:
      - pattern: $<STRING_LITERAL>
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            scope: cursor
      - pattern: |
          { key: $<STRING_LITERAL>}
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            scope: cursor
      - pattern: |
          { passphrase: $<STRING_LITERAL>}
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            scope: cursor
languages:
  - javascript
severity: high
metadata:
  description: "Hardcoded secret detected"
  remediation_message: |
    ## Description

    Code is not a safe place to store secrets. Use environment variables or a secret management system instead.

    ## Remediations

    ❌ Do not store plaintext secrets in your code

    ```javascript
      passport.use(new OAuth2Strategy({
          authorizationURL: 'https://www.example.com/oauth2/authorize',
          tokenURL: 'https://www.example.com/oauth2/token',
          clientID: 'my-id-123',
          clientSecret: 'shh-my-secret',
          callbackURL: 'http://localhost:3000/auth/example/callback'
        },
        function(accessToken, refreshToken, profile, cb) {
          User.findOrCreate({ exampleId: profile.id }, function (err, user) {
            return cb(err, user);
          });
        }
      ));
    ```

    ✅ Use environment variables

    ```javascript
      passport.use(new OAuth2Strategy({
          authorizationURL: 'https://www.example.com/oauth2/authorize',
          tokenURL: 'https://www.example.com/oauth2/token',
          clientID:  process.env.CLIENT_ID,
          clientSecret: process.env.CLIENT_SECRET,
          callbackURL: 'http://localhost:3000/auth/example/callback'
        },
        function(accessToken, refreshToken, profile, cb) {
          User.findOrCreate({ exampleId: profile.id }, function (err, user) {
            return cb(err, user);
          });
        }
      ));
    ```

    ✅ Use a secret management system or even better, a key management service (KMS) with encryption, to manage and access your secrets

    ## Resources
    - [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
    - [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
    - [AWS Key Management Service](https://aws.amazon.com/kms/)
  cwe_id:
    - 798
  id: javascript_lang_hardcoded_secret
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret
