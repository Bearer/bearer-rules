patterns:
  - pattern: |
      $<KEY1> == $<OTHER>
    filters:
      - variable: KEY1
        detection: javascript_lang_observable_timing_regex
        scope: cursor
      - not:
          variable: OTHER
          detection: javascript_lang_observable_timing_other
          scope: cursor

  - pattern: |
      $<OTHER> == $<KEY1>
    filters:
      - variable: KEY1
        detection: javascript_lang_observable_timing_regex
        scope: cursor
      - not:
          variable: OTHER
          detection: javascript_lang_observable_timing_other
          scope: cursor

  - pattern: |
      $<KEY1> != $<OTHER>
    filters:
      - variable: KEY1
        detection: javascript_lang_observable_timing_regex
        scope: cursor
      - not:
          variable: OTHER
          detection: javascript_lang_observable_timing_other
          scope: cursor

  - pattern: |
      $<OTHER> != $<KEY1>
    filters:
      - variable: KEY1
        detection: javascript_lang_observable_timing_regex
        scope: cursor
      - not:
          variable: OTHER
          detection: javascript_lang_observable_timing_other
          scope: cursor

  - pattern: |
      $<KEY1> === $<OTHER>
    filters:
      - variable: KEY1
        detection: javascript_lang_observable_timing_regex
        scope: cursor
      - not:
          variable: OTHER
          detection: javascript_lang_observable_timing_other
          scope: cursor

  - pattern: |
      $<OTHER> === $<KEY1>
    filters:
      - variable: KEY1
        detection: javascript_lang_observable_timing_regex
        scope: cursor
      - not:
          variable: OTHER
          detection: javascript_lang_observable_timing_other
          scope: cursor

  - pattern: |
      $<KEY1> !== $<OTHER>
    filters:
      - variable: KEY1
        detection: javascript_lang_observable_timing_regex
        scope: cursor
      - not:
          variable: OTHER
          detection: javascript_lang_observable_timing_other
          scope: cursor

  - pattern: |
      $<OTHER> !== $<KEY1>
    filters:
      - variable: KEY1
        detection: javascript_lang_observable_timing_regex
        scope: cursor
      - not:
          variable: OTHER
          detection: javascript_lang_observable_timing_other
          scope: cursor

auxiliary:
  - id: javascript_lang_observable_timing_regex
    patterns:
      - pattern: $<REGEX>
        filters:
          - variable: REGEX
            regex: (?i)\A(password)|hash|(api|auth)?.?(token|secret)\z

  - id: javascript_lang_observable_timing_other
    patterns:
      - pattern: $<OTHER>
        filters:
          - variable: OTHER
            regex: ^((null)|(undefined))

languages:
  - javascript
metadata:
  description: "Observable Timing Discrepancy"
  remediation_message: |-
    ## Description

    Observable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.

    ## Remediations

    - **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.
    - **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.
    - **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.
    ```javascript
      if (apiToken === "zDE9ET!TDq2uZx2oM!FD2") { // unsafe
        ...
      }
    ```
    - **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.

    ## References

    - [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)
    - [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)

  cwe_id:
    - 208
  id: javascript_lang_observable_timing
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_observable_timing
severity: medium
