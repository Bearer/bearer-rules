imports:
  - javascript_shared_third_parties_cryptojs_init
patterns:
  - pattern: |
      $<CRYPTOJS_INIT>.DES.encrypt($<OPTIONAL_DATA_TYPE>, $<_>)
    filters:
      - variable: CRYPTOJS_INIT
        detection: javascript_shared_third_parties_cryptojs_init
        scope: cursor
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: datatype
              scope: result
languages:
  - javascript
skip_data_types:
  - "Unique Identifier"
  - "Passwords" # see javascript_weak_password_encryption
metadata:
  description: "Weak encryption algorithm (DES) detected."
  remediation_message: |
    ## Description

    A weak encryption library can lead to data breaches and greater security risk.

    ## Remediations

    According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.

    âœ… Use stronger encryption algorithms when storing data.

    ```javascript
    const crypto = require("crypto");

    const cipher = crypto.createCipheriv("aes-256-cbc", key, iv);

    const encrypted = cipher.update("my secret message", "utf8");
    ```

    ## Resources
    - [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)
  cwe_id:
    - 327
  id: javascript_lang_weak_encryption_des
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_weak_encryption
