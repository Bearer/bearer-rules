imports:
  - javascript_shared_import_library
patterns:
  - pattern: |
      $<FS>.$<METHOD>($<INPUT>$<...>)
    filters:
      - variable: FS
        detection: javascript_lang_non_literal_fs_filename_fs_init
        scope: cursor
      - variable: METHOD
        values:
          - access
          - appendFile
          - chmod
          - chown
          - close
          - createReadStream
          - createWriteStream
          - exists
          - fchmod
          - fchown
          - fdatasync
          - fstat
          - fsync
          - ftruncate
          - futimes
          - lchmod
          - lchown
          - lutimes
          - lstat
          - mkdir
          - mkdtemp
          - open
          - openAsBlob
          - opendir
          - read
          - readdir
          - readFile
          - readlink
          - readv
          - realpath
          - rmdir
          - rm
          - stat
          - statfs
          - truncate
          - unlink
          - unwatchFile
          - utimes
          - watch
          - watchFile
          - write
          - writeFile
          - writev
          - accessSync
          - appendFileSync
          - chmodSync
          - chownSync
          - closeSync
          - existsSync
          - fchmodSync
          - fchownSync
          - fdatasyncSync
          - fstatSync
          - fsyncSync
          - ftruncateSync
          - futimesSync
          - lchmodSync
          - lchownSync
          - lutimesSync
          - lstatSync
          - mkdirSync
          - mkdtempSync
          - opendirSync
          - openSync
          - readdirSync
          - readFileSync
          - readlinkSync
          - readSync
          - readvSync
          - realpathSync
          - rmdirSync
          - rmSync
          - statSync
          - truncateSync
          - unlinkSync
          - utimesSync
          - writeFileSync
          - writeSync
          - writevSync
      - not:
          variable: INPUT
          detection: string_literal
          scope: result
  - pattern: |
      $<FS>.$<METHOD>($<INPUT_1>, $<INPUT_2>$<...>)
    filters:
      - variable: FS
        detection: javascript_lang_non_literal_fs_filename_fs_init
        scope: cursor
      - variable: METHOD
        values:
          - copyFile # copyFile(sourcePath, destPath)
          - cp # cp(sourcePath, destPath)
          - link #Â link(oldPath, newPath, ...)
          - rename # rename(oldPath, newPath, ...)
          - symlink # symlink(target, path)
          - copyFileSync
          - cpSync
          - linkSync
          - renameSync
          - symlinkSync
      - either:
          - not:
              variable: INPUT_1
              detection: string_literal
              scope: result
          - not:
              variable: INPUT_2
              detection: string_literal
              scope: result
auxiliary:
  - id: javascript_lang_non_literal_fs_filename_fs_init
    patterns:
      - pattern: $<LIBRARY>
        filters:
          - variable: LIBRARY
            detection: javascript_shared_import_library
            scope: cursor
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                string_regex: \A(?i)fs(\/promises)?\z
      - import $<!>$<_> from "fs"
      - import * as $<!>$<_> from "fs"
      - import $<!>$<_> from "fs/promises"
      - import * as $<!>$<_> from "fs/promises"
languages:
  - javascript
severity: high
metadata:
  description: Unsanitized dynamic input in file path
  remediation_message: |-
    ## Description

    Allowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.

    ## Remediations

    - **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.
    - **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.
      ```javascript
      function write(filename) {
        switch(filename) {
          case "hello.txt":
            fs.writeCreateFile("hello.txt");
            break;
          // Add more cases as necessary
        }
      }
      ```

    ## References

    - [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)
  cwe_id:
    - 73
  id: javascript_lang_non_literal_fs_filename
  documentation_url: https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename
