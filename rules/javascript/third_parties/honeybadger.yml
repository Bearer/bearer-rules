imports:
  - javascript_shared_common_datatype
patterns:
  - pattern: |
      $<HONEYBADGER>.$<METHOD>($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: HONEYBADGER
        values:
          - Honeybadger
          - honeybadger
      - variable: METHOD
        values:
          - setContext
          - notify
          - notifyAsync
      - variable: DATA_TYPE
        detection: javascript_shared_common_datatype
        scope: result
languages:
  - javascript
skip_data_types:
  - "Unique Identifier"
metadata:
  description: "Leakage of sensitive data to HoneyBadget"
  remediation_message: |
    ## Description

    Leaking sensitive data to third-party loggers like Honeybadger is a common cause of data leaks and can lead to data breaches.

    ## Remediations

    - **Do** ensure all sensitive data is removed when sending data to third-party loggers like Honeybadger.
    - **Do** use unique identifiers from the database if you really need to identify users.
    ```javascript
      const Honeybadger = require("@honeybadger-io/js");

      let context = { user: { uuid: "aacd05fd-8f5b-4bc6-aa8b-35e5fbf37325" } };

      Honeybadger.setContext(context);
    ```

    ## References
    - [Honeybadger Docs](https://docs.honeybadger.io/lib/javascript/)
    - [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)
  cwe_id:
    - 201
  id: javascript_third_parties_honeybadger
  documentation_url: https://docs.bearer.com/reference/rules/javascript_third_parties_honeybadger
  cloud_code_suggestions: true
severity: medium
