patterns:
  - pattern: |
      $<PASSPORT>($<STRATEGY>)
    filters:
      - variable: PASSPORT
        detection: javascript_third_parties_passport_hardcoded_secret_passport_usage
        scope: cursor
      - variable: STRATEGY
        detection: javascript_third_parties_passport_strategy
        scope: cursor
auxiliary:
  - id: javascript_third_parties_passport_strategy
    patterns:
      - pattern: |
          new $<METHOD>($<CONFIG>)
        filters:
          - variable: METHOD
            values:
              - Strategy
              - LocalStrategy
              - HTTPBearerStrategy
              - BearerStrategy
              - GoogleStrategy
              - GoogleOauthStrategy
              - TwitterStrategy
              - JwtStrategy
              - FacebookStrategy
              - CognitoStrategy
          - variable: CONFIG
            detection: javascript_third_parties_passport_hardcoded_secret_secret_usage
            scope: cursor
  - id: javascript_third_parties_passport_hardcoded_secret_secret_usage
    patterns:
      - pattern: |
          { clientSecret: $<STRING_LITERAL> }
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            scope: cursor
      - pattern: |
          { secretOrKey: $<STRING_LITERAL> }
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            scope: cursor
      - pattern: |
          { consumerSecret: $<STRING_LITERAL> }
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            scope: cursor
  - id: javascript_third_parties_passport_hardcoded_secret_passport_usage
    patterns:
      - passport.use
languages:
  - javascript
severity: critical
metadata:
  description: "Usage of hard-coded passport secret"
  remediation_message: |-
    ## Description

    Storing secrets directly in your code, such as a passport authentication secret, is insecure. This practice makes your application vulnerable to attacks if the codebase is exposed.

    ## Remediations

    - **Do not** hard-code secrets in your application code. Hard-coding makes sensitive information easily accessible to anyone who can view the code.
      ```javascript
      const strategy = new GoogleStrategy({ clientSecret: 'your_hardcoded_secret' }); // unsafe
      passport.use(strategy);
      ```
    - **Do** use environment variables to manage secrets securely. This method keeps sensitive information out of your codebase and makes it more difficult for unauthorized users to access.
      ```javascript
      const strategy = new GoogleStrategy({ clientSecret: process.env.GOOGLE_SECRET });
      passport.use(strategy);
      ```

    ## References

    - [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)

  cwe_id:
    - 798
  id: "javascript_third_parties_passport_hardcoded_secret"
  documentation_url: https://docs.bearer.com/reference/rules/javascript_third_parties_passport_hardcoded_secret
