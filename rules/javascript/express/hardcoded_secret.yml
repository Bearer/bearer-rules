imports:
  - javascript_shared_import_library
  - javascript_shared_import_member
patterns:
  - pattern: |
      $<MODULE>($<SECRET_IN_HASH>)
    filters:
      - variable: MODULE
        detection: javascript_express_hardcoded_secret_module
        scope: cursor
      - variable: SECRET_IN_HASH
        detection: javascript_express_hardcoded_secret_in_hash
        scope: cursor
  - pattern: |
      $<MODULE>.sign($<_>, $<STRING_LITERAL>$<...>)
    filters:
      - variable: MODULE
        detection: javascript_express_hardcoded_secret_jsonwebtoken
        scope: cursor
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
  - pattern: |
      $<FUNCTION>($<_>, $<STRING_LITERAL>$<...>)
    filters:
      - variable: FUNCTION
        detection: javascript_express_hardcoded_secret_jsonwebtoken_sign
        scope: cursor
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
languages:
  - javascript
auxiliary:
  - id: javascript_express_hardcoded_secret_in_hash
    patterns:
      - pattern: |
          { secret: $<STRING_LITERAL> }
        filters:
          - variable: STRING_LITERAL
            detection: string_literal
            scope: cursor
  - id: javascript_express_hardcoded_secret_module
    patterns:
      - pattern: $<LIBRARY>
        filters:
          - variable: LIBRARY
            detection: javascript_shared_import_library
            scope: cursor
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                string_regex: \A(expressjwt|session)\z
      - import $<!>$<_> from "expressjwt"
      - import * as $<!>$<_> from "expressjwt"
      - import $<!>$<_> from "session"
      - import * as $<!>$<_> from "session"
      # Fallback
      - jwt
      - expressjwt
      - session
  - id: javascript_express_hardcoded_secret_jsonwebtoken
    patterns:
      - pattern: $<LIBRARY>
        filters:
          - variable: LIBRARY
            detection: javascript_shared_import_library
            scope: cursor
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                string_regex: \Ajsonwebtoken\z
      - import $<!>$<_> from "jsonwebtoken"
      - import * as $<!>$<_> from "jsonwebtoken"
      # Fallback
      - jwt
      - jsonwebtoken
  - id: javascript_express_hardcoded_secret_jsonwebtoken_sign
    patterns:
      - pattern: $<SIGN>
        filters:
          - variable: SIGN
            detection: javascript_shared_import_member
            scope: cursor
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                string_regex: \Ajsonwebtoken\z
              - variable: JAVASCRIPT_SHARED_IMPORT_MEMBER_NAME
                regex: \Asign\z
      - import { $<!>sign } from "jsonwebtoken"
      - import { sign as $<!>$<_> } from "jsonwebtoken"
severity: critical
metadata:
  description: "Usage of hard-coded secret"
  remediation_message: |
    ## Description

    Code is not a safe place to store secrets. Use environment variables or a secret management system instead.

    ## Remediations

    ❌ Do not store plaintext secrets in your code

    ```javascript
     app.use(
      session({
        secret: "shh-my-secret",
        name: "my-custom-session-name",
      })
    )
    ```

    ✅ Use environment variables

    ```javascript
     app.use(
      session({
        secret: process.env.secret,
        name: "my-custom-session-name",
      })
    )
    ```

    ✅ Use a secret management system or even better, a key management service (KMS) with encryption

    ## Resources
    - [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
    - [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)
    - [AWS Key Management Service](https://aws.amazon.com/kms/)
  cwe_id:
    - 798
  id: "javascript_express_hardcoded_secret"
  documentation_url: https://docs.bearer.com/reference/rules/javascript_express_hardcoded_secret
