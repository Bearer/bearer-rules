imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      res.write($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_express_cross_site_scripting_user_input
        scope: result
  - pattern: |
      res.send($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_express_cross_site_scripting_user_input
        scope: result
languages:
  - javascript
auxiliary:
  - id: javascript_express_cross_site_scripting_sanitizer
    patterns:
      - pattern: |
          { $<_>: $<!>$<_> }
  - id: javascript_express_cross_site_scripting_user_input
    sanitizer: javascript_express_cross_site_scripting_sanitizer
    patterns:
      - pattern: $<UNSANITIZED_USER_INPUT>
        filters:
          - variable: UNSANITIZED_USER_INPUT
            detection: javascript_shared_common_user_input
            scope: cursor
severity: high
metadata:
  description: "Unsanitized user input in HTTP response (XSS)"
  remediation_message: |-
    ## Description

    Including unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.

    ## Remediations

    - **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.
    ```javascript
    res.send(req.body.data); // unsafe
    ```
    - **Do** sanitize user input before including it in a response. Use library functions or frameworks designed for input sanitization to ensure that user data cannot be interpreted as executable code.

    ## References

    - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 79
  id: javascript_express_cross_site_scripting
  documentation_url: https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting
