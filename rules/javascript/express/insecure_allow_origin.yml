imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      res.$<METHOD>($<ORIGIN>, $<USER_INPUT>)
    filters:
      - variable: METHOD
        values:
          - set
          - header
          - setHeader
      - variable: ORIGIN
        regex: (?i)['"]access-control-allow-origin["']
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
  - pattern: |
      res.writeHead($<_>, $<INSECURE_CORS_HASH>)
    filters:
      - variable: INSECURE_CORS_HASH
        detection: javascript_express_insecure_allow_origin_insecure_cors_hash
        scope: cursor
languages:
  - javascript
auxiliary:
  - id: javascript_express_insecure_allow_origin_insecure_cors_hash
    patterns:
      - pattern: |
          { $<ORIGIN>: $<USER_INPUT> }
        filters:
          - variable: ORIGIN
            regex: (?i)['"]access-control-allow-origin["']
          - variable: USER_INPUT
            detection: javascript_shared_common_user_input
            scope: result
metadata:
  description: "Unsanitized user input in Access-Control-Allow-Origin"
  remediation_message: |
    ## Description
    Do not use unverified user-defined input to define Access-Control-Allow-Origin. This can lead to unintended user access to sensitive data.

    ## Remediations
    ❌ Avoid defining origins with user input wherever possible.

    ✅ If unavoidable, be sure to verify the input or to use a safe-list.

    ## Resources
    - [OWASP Origin & Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)
  cwe_id:
    - 346
  id: javascript_express_insecure_allow_origin
  documentation_url: https://docs.bearer.com/reference/rules/javascript_express_insecure_allow_origin
  cloud_code_suggestions: true
severity: medium
