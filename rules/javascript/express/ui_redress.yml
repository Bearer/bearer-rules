imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      res.set($<HEADERS>, $<USER_INPUT>)
    filters:
      - variable: HEADERS
        regex: (?i)['"](x-frame-options|content-security-policy)["']
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
languages:
  - javascript
metadata:
  description: "Unsanitized user input in UI"
  remediation_message: |-
    ## Description

    Incorporating unsanitized user input to configure X-Frame-Options or Content-Security-Policy HTTP headers exposes your application to UI redress attacks, commonly known as clickjacking. This vulnerability arises when attackers manipulate the appearance of a webpage to deceive users into performing unintended actions.

    ## Remediations

    - **Do** set the most secure values for these headers to enhance protection against clickjacking.
      ```javascript
      res.set('X-Frame-Options', 'DENY');
      res.set('Content-Security-Policy', "frame-ancestors 'none'");
      ```
    - **Do not** directly use user input to set these headers. Instead, implement a safelist approach to ensure only approved values are used.
      ```javascript
      if (req.query.options === 'same') {
        res.set('X-Frame-Options', 'SAME');
      }

      // Safelist
      if (['deny', 'sameorigin'].includes(req.query.options.toLowerCase())) {
        res.set('X-Frame-Options', req.query.options);
      }
      ```

    ## References

    - [OWASP Clickjacking attack explained](https://owasp.org/www-community/attacks/Clickjacking)
    - [OWASP Clickjacking defense cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html)
  cwe_id:
    - 1021
  id: "javascript_express_ui_redress"
  documentation_url: https://docs.bearer.com/reference/rules/javascript_express_ui_redress
  cloud_code_suggestions: true
severity: high
