imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      $<RES>.redirect($<USER_INPUT>$<...>)
    filters:
      - variable: RES
        detection: javascript_express_open_redirect_response
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
        scope: result
auxiliary:
  - id: javascript_express_open_redirect_response
    patterns:
      - res
      - response
      # typescript
      - |
        const $<_>: Response = $<!>$<_>
      - |
        ($<...>$<!>$<_>: Response$<...>) => {}
      - |
        ($<...>$<!>$<_>: Response$<...>) {}
      - |
        function ($<...>$<!>$<_>: Response$<...>) {}
      - |
        function $<_>($<...>$<!>$<_>: Response$<...>) {}
      - |
        class $<_> $<...>{ $<...>$<_>($<...>$<!>$<_>: Response$<...>) {} }
languages:
  - javascript
severity: medium
metadata:
  description: "Unsanitized user input in redirect"
  remediation_message: |
    ## Description
    A redirect using unsanitized user input is bad practice and puts your application at greater risk of phishing attacks.

    ## Remediations
    ❌ Do not use unsanitized user input when constructing URLs

    ✅ Instead, ensure the input is validated by using a safe list or a mapping when constructing URLs

    ```javascript
      var map = {
        "1": "/planes",
        "2": "/trains",
        "3": "/automobiles",
      }

      res.redirect(map[req.body.transport])
    ```
    ## Resources
    - [OWASP open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
  cwe_id:
    - 601
  id: "javascript_express_open_redirect"
  documentation_url: https://docs.bearer.com/reference/rules/javascript_express_open_redirect
