imports:
  - javascript_shared_common_user_input
patterns:
  - pattern: |
      $<LIB_METHOD>($<USER_INPUT>)
    filters:
      - variable: LIB_METHOD
        values:
          - deserializeError
          - deserialize_error
      - either:
          - variable: USER_INPUT
            detection: javascript_shared_common_user_input
            scope: result
          - variable: USER_INPUT
            detection: javascript_express_deserialization_buffer
            scope: result
  - pattern: |
      $<LIB>.unserialize($<USER_INPUT>)
    filters:
      - variable: LIB
        values:
          - nodeSerialize
          - node_serialize
      - either:
          - variable: USER_INPUT
            detection: javascript_shared_common_user_input
            scope: result
          - variable: USER_INPUT
            detection: javascript_express_deserialization_buffer
            scope: result
auxiliary:
  - id: javascript_express_deserialization_buffer
    patterns:
      - pattern: |
          Buffer.from($<BUFFER_USER_INPUT>).toString()
        filters:
          - variable: BUFFER_USER_INPUT
            detection: javascript_shared_common_user_input
            scope: result
languages:
  - javascript
severity: critical
metadata:
  description: "Unsanitized user input in deserialization method"
  remediation_message: |-
    ## Description

    Deserializing untrusted data exposes your application to security risks. This vulnerability occurs when data, especially from external sources like request objects, is deserialized without proper sanitization. Attackers can embed malicious code or payloads in serialized data, compromising your application's security upon deserialization.

    ## Remediations

    - **Do not** deserialize data from untrusted sources directly. This practice can lead to security vulnerabilities by executing malicious code embedded in the data.
    - **Do** use data-only and language-agnostic serialization formats such as JSON or XML for deserializing data. These formats are less susceptible to manipulation by attackers aiming to exploit the deserialization process.
    ```javascript
    JSON.parse(req.params);
    ```

    ## References

    - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  cwe_id:
    - 502
  id: "javascript_express_unsafe_deserialization"
  documentation_url: https://docs.bearer.com/reference/rules/javascript_express_unsafe_deserialization
