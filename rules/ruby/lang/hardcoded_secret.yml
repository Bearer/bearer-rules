patterns:
  - pattern: |
      $<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
      - not:
          filename_regex: (\A|config/)routes\.rb\z
  - pattern: |
      $<_>($<!>$<NAME>: $<STRING_LITERAL>)
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
      - not:
          filename_regex: (\A|config/)routes\.rb\z
  - pattern: |
      $<_>($<!>$<NAME> => $<STRING_LITERAL>)
    filters:
      - variable: NAME
        regex: (?i)['"](password|api_?key|secret)['"]
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
      - not:
          filename_regex: (\A|config/)routes\.rb\z
  - pattern: |
      { $<!>$<NAME>: $<STRING_LITERAL> }
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
      - not:
          filename_regex: (\A|config/)routes\.rb\z
  - pattern: |
      { $<!>$<NAME> => $<STRING_LITERAL> }
    filters:
      - variable: NAME
        regex: (?i)['"](password|api_?key|secret)['"]
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
      - not:
          filename_regex: (\A|config/)routes\.rb\z
languages:
  - ruby
severity: critical
metadata:
  description: "Usage of hard-coded secret"
  remediation_message: |-
    ## Description

    Storing secret values directly in the source code exposes them to unauthorized access and compromises security.

    ## Remediations

    - **Do not** embed secret values directly in your source code. This practice makes your application vulnerable to attacks if the source code is accessed.
    ```ruby
    SECRET_KEY = "hardcoded_secret_key" # unsafe
    ```
    - **Do** use environment variables to manage secrets securely. This method keeps sensitive information out of your codebase and makes it more difficult for unauthorized users to access.
    - **Do** retrieve secrets from a secure location at runtime to ensure they are not exposed in the source code.
    ```ruby
    SECRET_KEY = ENV['SECRET_KEY']
    ```
    - **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.

    ## References

    - [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
    - [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)
  cwe_id:
    - 798
  id: ruby_lang_hardcoded_secret
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_hardcoded_secret
