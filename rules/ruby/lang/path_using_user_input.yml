imports:
  - ruby_shared_common_user_input
patterns:
  - pattern: |
      Dir[$<...>$<USER_INPUT>$<...>]
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<MODULE>.$<_>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: MODULE
        values:
          - Dir
          - Pathname
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: File.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - not:
          variable: METHOD
          values:
            - basename
            - extname
            - fnmatch
            - fnmatch?
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      IO.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - binread
          - binwrite
          - foreach
          - read
          - readlines
          - sysopen
          - write
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Kernel.open($<OPEN_USER_INPUT>$<...>)$<...>
    filters:
      - variable: OPEN_USER_INPUT
        detection: ruby_lang_path_using_user_input_open_user_input
        scope: result
  - pattern: |
      open($<OPEN_USER_INPUT>$<...>)$<...>
    filters:
      - variable: OPEN_USER_INPUT
        detection: ruby_lang_path_using_user_input_open_user_input
        scope: result
  - pattern: |
      PStore.new($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Gem::Util.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - correct_for_windows_path
          - glob_files_in_dir
          - traverse_parents
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PATHNAME>.$<_>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: PATHNAME
        detection: ruby_lang_path_using_user_input_pathname
        scope: cursor
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PATHNAME> + $<USER_INPUT>
    filters:
      - variable: PATHNAME
        detection: ruby_lang_path_using_user_input_pathname
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PATHNAME> / $<USER_INPUT>
    filters:
      - variable: PATHNAME
        detection: ruby_lang_path_using_user_input_pathname
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Shell.cd($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Shell.new($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Shell.default_system_path = $<USER_INPUT>
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<SHELL>.$<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: SHELL
        detection: ruby_lang_path_using_user_input_shell
        scope: cursor
      - variable: METHOD
        values:
          - chdir
          - expand_path
          - pushdir
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PROCESSOR>.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: PROCESSOR
        detection: ruby_lang_path_using_user_input_shell_cmd_proc
        scope: cursor
      - variable: METHOD
        values:
          - cat
          - expand_path
          - foreach
          - glob
          - sort
          - mkdir
          - open
          - rmdir
          - tee
          - test
          - unlink
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PROCESSOR>[$<_>, $<...>$<USER_INPUT>$<...>]
    filters:
      - variable: PROCESSOR
        detection: ruby_lang_path_using_user_input_shell_cmd_proc
        scope: cursor
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PROCESSOR>.transact do
        $<!>$<PROCESSOR_TRANSACT_USER_INPUT>
      end
    filters:
      - variable: PROCESSOR
        detection: ruby_lang_path_using_user_input_shell_cmd_proc
        scope: cursor
      - variable: PROCESSOR_TRANSACT_USER_INPUT
        detection: ruby_lang_path_using_user_input_shell_cmd_trans_user_input
  - pattern: |
      $<METHOD>($<ARGUMENT>: $<USER_INPUT>)
    filters:
      - variable: METHOD
        values:
          - render
          - render_to_string
      - variable: ARGUMENT
        values:
          - action
          - file
          - partial
          - template
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: render($<USER_INPUT>$<...>)
    filters:
      - either:
          - variable: USER_INPUT
            detection: ruby_shared_common_user_input
            scope: result
          - variable: USER_INPUT
            detection: ruby_shared_common_user_input
      - not:
          variable: USER_INPUT
          detection: ruby_lang_path_using_user_input_render_first_arg_pair
          scope: cursor
  - pattern: |
      $<METHOD>({ $<ARGUMENT>: $<USER_INPUT> })
    filters:
      - variable: METHOD
        values:
          - render
          - render_to_string
      - variable: ARGUMENT
        values:
          - action
          - file
          - partial
          - template
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      send_file($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
auxiliary:
  - id: ruby_lang_path_using_user_input_open_user_input
    sanitizer: ruby_lang_path_using_user_input_open_sanitized
    patterns:
      - pattern: $<USER_INPUT>
        filters:
          - variable: USER_INPUT
            detection: ruby_shared_common_user_input
            scope: cursor
  - id: ruby_lang_path_using_user_input_open_sanitized
    patterns:
      - pattern: URI($<!>$<_>)
  - id: ruby_lang_path_using_user_input_pathname
    patterns:
      - Rails.root
      - Pathname.$<_>$<...>
  - id: ruby_lang_path_using_user_input_shell
    patterns:
      - |
        Shell.new$<...>
  - id: ruby_lang_path_using_user_input_shell_cmd_proc
    patterns:
      - pattern: |
          $<SHELL>.command_processor
        filters:
          - variable: SHELL
            detection: ruby_lang_path_using_user_input_shell
            scope: cursor
      - Shell::CommandProcessor.new$<...>
  - id: ruby_lang_path_using_user_input_shell_cmd_trans_user_input
    patterns:
      - pattern: $<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
        filters:
          - variable: METHOD
            values:
              - cat
              - expand_path
              - foreach
              - glob
              - sort
              - mkdir
              - open
              - rmdir
              - tee
              - test
              - unlink
          - variable: USER_INPUT
            detection: ruby_shared_common_user_input
            scope: result
  - id: ruby_lang_path_using_user_input_render_first_arg_pair
    patterns:
      - pattern: |
          render($<!>$<_>: $<_>)
languages:
  - ruby
severity: high
metadata:
  description: "Unsanitized user input detected in file path."
  remediation_message: |
    ## Description
    Using raw unsanitized input when forming filenames or file paths is bad practice.
    It can lead to path manipulation, by which attackers can gain access to resources outside of the intended scope.

    ## Remediations
    ❌ Avoid wherever possible

    ✅ Validate expected file paths using `File` methods

    ```ruby
      path = File.expand("/home/" + params[:resource_name])
      if path.starts_with?("/home/")
        Dir.chdir(path)
      else
        # path is unexpected
      end
    ```

    ## Resources
    - [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)
  cwe_id:
    - 22
    - 73
  id: ruby_lang_path_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_path_using_user_input
