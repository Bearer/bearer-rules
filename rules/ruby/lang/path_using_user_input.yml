imports:
  - ruby_shared_common_user_input
patterns:
  - pattern: |
      Dir[$<...>$<USER_INPUT>$<...>]
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<MODULE>.$<_>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: MODULE
        values:
          - Dir
          - Pathname
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: File.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - not:
          variable: METHOD
          values:
            - basename
            - extname
            - fnmatch
            - fnmatch?
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      IO.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - binread
          - binwrite
          - foreach
          - read
          - readlines
          - sysopen
          - write
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Kernel.open($<OPEN_USER_INPUT>$<...>)$<...>
    filters:
      - variable: OPEN_USER_INPUT
        detection: ruby_lang_path_using_user_input_open_user_input
        scope: result
  - pattern: |
      open($<OPEN_USER_INPUT>$<...>)$<...>
    filters:
      - variable: OPEN_USER_INPUT
        detection: ruby_lang_path_using_user_input_open_user_input
        scope: result
  - pattern: |
      PStore.new($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Gem::Util.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - correct_for_windows_path
          - glob_files_in_dir
          - traverse_parents
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PATHNAME>.$<_>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: PATHNAME
        detection: ruby_lang_path_using_user_input_pathname
        scope: cursor
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PATHNAME> + $<USER_INPUT>
    filters:
      - variable: PATHNAME
        detection: ruby_lang_path_using_user_input_pathname
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PATHNAME> / $<USER_INPUT>
    filters:
      - variable: PATHNAME
        detection: ruby_lang_path_using_user_input_pathname
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Shell.cd($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Shell.new($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Shell.default_system_path = $<USER_INPUT>
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<SHELL>.$<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: SHELL
        detection: ruby_lang_path_using_user_input_shell
        scope: cursor
      - variable: METHOD
        values:
          - chdir
          - expand_path
          - pushdir
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PROCESSOR>.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: PROCESSOR
        detection: ruby_lang_path_using_user_input_shell_cmd_proc
        scope: cursor
      - variable: METHOD
        values:
          - cat
          - expand_path
          - foreach
          - glob
          - sort
          - mkdir
          - open
          - rmdir
          - tee
          - test
          - unlink
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PROCESSOR>[$<_>, $<...>$<USER_INPUT>$<...>]
    filters:
      - variable: PROCESSOR
        detection: ruby_lang_path_using_user_input_shell_cmd_proc
        scope: cursor
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PROCESSOR>.transact do
        $<!>$<PROCESSOR_TRANSACT_USER_INPUT>
      end
    filters:
      - variable: PROCESSOR
        detection: ruby_lang_path_using_user_input_shell_cmd_proc
        scope: cursor
      - variable: PROCESSOR_TRANSACT_USER_INPUT
        detection: ruby_lang_path_using_user_input_shell_cmd_trans_user_input
  - pattern: |
      $<METHOD>($<ARGUMENT>: $<USER_INPUT>)
    filters:
      - variable: METHOD
        values:
          - render
          - render_to_string
      - variable: ARGUMENT
        values:
          - action
          - file
          - partial
          - template
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: render($<USER_INPUT>$<...>)
    filters:
      - either:
          - variable: USER_INPUT
            detection: ruby_shared_common_user_input
            scope: result
          - variable: USER_INPUT
            detection: ruby_shared_common_user_input
      - not:
          variable: USER_INPUT
          detection: ruby_lang_path_using_user_input_render_first_arg_pair
          scope: cursor
  - pattern: |
      $<METHOD>({ $<ARGUMENT>: $<USER_INPUT> })
    filters:
      - variable: METHOD
        values:
          - render
          - render_to_string
      - variable: ARGUMENT
        values:
          - action
          - file
          - partial
          - template
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      send_file($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
auxiliary:
  - id: ruby_lang_path_using_user_input_open_user_input
    sanitizer: ruby_lang_path_using_user_input_open_sanitized
    patterns:
      - pattern: $<USER_INPUT>
        filters:
          - variable: USER_INPUT
            detection: ruby_shared_common_user_input
            scope: cursor
  - id: ruby_lang_path_using_user_input_open_sanitized
    patterns:
      - pattern: URI($<!>$<_>)
  - id: ruby_lang_path_using_user_input_pathname
    patterns:
      - Rails.root
      - Pathname.$<_>$<...>
  - id: ruby_lang_path_using_user_input_shell
    patterns:
      - |
        Shell.new$<...>
  - id: ruby_lang_path_using_user_input_shell_cmd_proc
    patterns:
      - pattern: |
          $<SHELL>.command_processor
        filters:
          - variable: SHELL
            detection: ruby_lang_path_using_user_input_shell
            scope: cursor
      - Shell::CommandProcessor.new$<...>
  - id: ruby_lang_path_using_user_input_shell_cmd_trans_user_input
    patterns:
      - pattern: $<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
        filters:
          - variable: METHOD
            values:
              - cat
              - expand_path
              - foreach
              - glob
              - sort
              - mkdir
              - open
              - rmdir
              - tee
              - test
              - unlink
          - variable: USER_INPUT
            detection: ruby_shared_common_user_input
            scope: result
  - id: ruby_lang_path_using_user_input_render_first_arg_pair
    patterns:
      - pattern: |
          render($<!>$<_>: $<_>)
languages:
  - ruby
severity: high
metadata:
  description: "Unsanitized user input in file path"
  remediation_message: |-
    ## Description

    Unsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.

    ## Remediations

    - **Do not** use unsanitized user input to construct file paths or filenames. This can open up your application to path manipulation attacks.
    - **Do** validate and sanitize user input before using it in file paths.
    - **Do** ensure that the constructed path is within the intended directory. For example, restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.
    - **Do** use file path manipulation methods to verify and constrain the path appropriately.
    ```ruby
    path = File.expand_path("/home/" + params[:resource_name])
    if path.starts_with?("/home/")
      Dir.chdir(path)
    else
      # Handle unexpected path
    end
    ```

    ## References

    - [OWASP Path Traversal Attack](https://owasp.org/www-community/attacks/Path_Traversal)
  cwe_id:
    - 73
  id: ruby_lang_path_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_path_using_user_input
