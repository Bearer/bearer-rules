imports:
  - ruby_shared_lang_openssl_digest_md_init
  - ruby_shared_common_datatype
patterns:
  - pattern: Digest::MD5.$<METHOD>($<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: OpenSSL::Digest.digest($<ALGORITHM>, $<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: ALGORITHM
        regex: (?i)['"]MD\d['"]
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: OpenSSL::Digest::$<ALGORITHM>.digest($<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: ALGORITHM
        regex: \AMD\d\z
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: |
      $<DIGEST>.update($<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_md_init
        scope: cursor
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: |
      $<DIGEST> << $<OPTIONAL_DATA_TYPE>
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_md_init
        scope: cursor
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: $<DIGEST>.$<METHOD>($<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_md_init
        scope: cursor
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
languages:
  - ruby
skip_data_types:
  - "Unique Identifier"
  - "Passwords" # see ruby_lang_weak_password_hash_md
metadata:
  description: "Usage of weak hashing library (MD5)"
  remediation_message: |-
    ## Description

    Using a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.

    ## Remediations

    - **Do not** use MD5 or other weak hash algorithms for hashing. These are not secure and can be easily compromised.
    ```ruby
    Digest::MD5.hexdigest('weak hash') # unsafe
    ```
    - **Do** use stronger hashing algorithms like bcrypt for securing data. Bcrypt is designed to be slow and computationally intensive, making it resistant to brute force attacks.
    ```ruby
    BCrypt::Password.create('iLOVEdogs123')
    ```

    ## References

    - [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)
  cwe_id:
    - 328
  id: ruby_lang_weak_hash_md
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_weak_hash_md
  cloud_code_suggestions: true
severity: medium
