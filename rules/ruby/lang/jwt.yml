imports:
  - ruby_shared_common_datatype
patterns:
  - pattern: |
      JWT.encode($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: DATA_TYPE
        detection: ruby_shared_common_datatype
        scope: result
languages:
  - ruby
metadata:
  description: "Leakage of sensitive data in JWT"
  remediation_message: |-
    ## Description

    Storing sensitive data in JWTs exposes it to potential security risks. JWTs are designed for transmitting data securely, not for storing confidential information. Guard against including sensitive data in a JWT payload.

    ## Remediations

    - **Do not** include sensitive data, such as email addresses or personal information, in JWT payloads. This practice can lead to unauthorized access to sensitive information.
    ```ruby
    payload = { data: 'data', email: user.email } #Â unsafe
    token = JWT.encode payload, hmac_secret, 'HS256'
    ```
    - **Do** use non-sensitive, unique identifiers, like a user's database UUID, in JWT payloads. This approach minimizes the risk of sensitive data exposure.
    ```ruby
    payload = { data: 'data', user_id: user.uuid }
    token = JWT.encode payload, hmac_secret, 'HS256'
    ```
  cwe_id:
    - 315
  id: ruby_lang_jwt
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_jwt
severity: high
