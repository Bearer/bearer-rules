imports:
  - ruby_shared_lang_openssl_digest_md_init
  - ruby_shared_common_datatype
patterns:
  - pattern: Digest::MD5.$<METHOD>($<PASSWORD>)
    filters:
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: OpenSSL::Digest.digest($<ALGORITHM>, $<PASSWORD>)
    filters:
      - variable: ALGORITHM
        regex: (?i)['"]MD\d['"]
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: OpenSSL::Digest::$<ALGORITHM>.digest($<PASSWORD>)
    filters:
      - variable: ALGORITHM
        regex: \AMD\d\z
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: |
      $<DIGEST>.update($<PASSWORD>)
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_md_init
        scope: cursor
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: |
      $<DIGEST> << $<PASSWORD>
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_md_init
        scope: cursor
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: $<DIGEST>.$<METHOD>($<PASSWORD>)
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_md_init
        scope: cursor
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
languages:
  - ruby
only_data_types:
  - "Passwords"
metadata:
  description: "Usage of weak hashing library on a password (MD5)"
  remediation_message: |-
    ## Description

    Using a weak hashing library like MD5 for password storage compromises security. MD5 is outdated and vulnerable, making it easier for attackers to crack passwords and gain unauthorized access.

    ## Remediations

    - **Do not** use MD5 or similar weak hashing algorithms for password storage. These methods are no longer secure and significantly increase the risk of your data being compromised.
    - **Do** use strong, recommended hashing libraries such as bcrypt or Argon2id for storing passwords. These libraries provide a higher level of security and are designed to protect against common attack vectors.
    ```ruby
    BCrypt::Password.create("password_123")
    ```
    ```ruby
    hasher = Argon2::Password.new()
    hasher.create("password_123")
    ```

    ## References

    - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
    - [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)
    - [ruby-argon2](https://github.com/technion/ruby-argon2)
  cwe_id:
    - 326
  id: ruby_lang_weak_password_hash_md
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_weak_password_hash_md
  cloud_code_suggestions: true
severity: high
