languages:
  - ruby
imports:
  - ruby_shared_common_user_input
patterns:
  - pattern: |
      Kernel.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - exec
          - spawn
          - system
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - exec
          - spawn
          - system
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      IO.popen($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Process.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - exec
          - spawn
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Open3.$<_>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Gem::Util.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - popen
          - silent_system
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      PTY.spawn($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      %x{$<...>$<USER_INPUT>$<...>}
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      `$<...>$<USER_INPUT>$<...>`
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Shell.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - alias_command
          - def_system_command
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      Shell::CommandProcessor.$<METHOD>($<...>$<USER_INPUT>$<...>)$<...>
    filters:
      - variable: METHOD
        values:
          - alias_command
          - def_system_command
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<PROCESSOR>.system($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: PROCESSOR
        detection: ruby_lang_exec_using_user_input_shell_cmd_proc
        scope: cursor
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
auxiliary:
  - id: ruby_lang_exec_using_user_input_shell
    patterns:
      - |
        Shell.new$<...>
  - id: ruby_lang_exec_using_user_input_shell_cmd_proc
    patterns:
      - pattern: |
          $<SHELL>.command_processor
        filters:
          - variable: SHELL
            detection: ruby_lang_exec_using_user_input_shell
            scope: cursor
      - Shell::CommandProcessor.new$<...>
severity: critical
metadata:
  description: "Unsanitized user input in OS command"
  remediation_message: |-
    ## Description

    Executing OS commands with user input can lead to command injection attacks. This vulnerability occurs when an application dynamically generates a command to the operating system using data supplied by the user without proper sanitization.

    ## Remediations

    - **Do not** directly use user input to form OS commands. This can allow attackers to execute arbitrary commands.
      ```ruby
      system(params[:command]) # unsafe
      ```
    - **Do** validate or sanitize user input before using it in OS commands. Prefer using static command strings where possible.
    - **Do** use indirect methods for incorporating user input into commands, such as selecting from predefined options.
      ```ruby
      command =
        case params[:action]
        when "option1"
          "command1"
        when "option2"
          "command2"
        end

      system(command)
      ```

    ## References

    - [OWASP Ruby command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Ruby_on_Rails_Cheat_Sheet.html#command-injection)
    - [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)
  cwe_id:
    - 78
  id: ruby_lang_exec_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_exec_using_user_input
