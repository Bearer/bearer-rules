imports:
  - ruby_shared_common_user_input
patterns:
  - pattern: |
      $<LIBRARY>.load($<USER_INPUT>$<...>)$<...>
    filters:
      - variable: LIBRARY
        values:
          - YAML
          - Psych
          - Syck
          - JSON
          - Oj
          - Marshal
      - variable: USER_INPUT
        detection: ruby_lang_deserialization_of_user_input_user_input
        scope: result
  - pattern: |
      Marshal.restore($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_deserialization_of_user_input_user_input
        scope: result
  - pattern: |
      Oj.object_load($<USER_INPUT>$<...>)$<...>
    filters:
      - variable: USER_INPUT
        detection: ruby_lang_deserialization_of_user_input_user_input
        scope: result
auxiliary:
  - id: ruby_lang_deserialization_of_user_input_sanitized
    patterns:
      - pattern: JSON.parse($<!>$<_>)
      - pattern: Nokogiri::XML($<!>$<_>)
  - id: ruby_lang_deserialization_of_user_input_user_input
    sanitizer: ruby_lang_deserialization_of_user_input_sanitized
    patterns:
      - pattern: $<DESERIALIZATION_USER_INPUT>
        filters:
          - variable: DESERIALIZATION_USER_INPUT
            detection: ruby_shared_common_user_input
            scope: cursor
languages:
  - ruby
severity: high
metadata:
  description: "Unsanitized user input in deserialization method"
  remediation_message: |
    ## Description
    It is bad practice to deserialize untrusted data, such as data that comes from params or cookies, without sufficient verification.
    Attackers can transfer payloads or malicious code via serialized data, and deserializing such data puts your application at risk.

    ## Remediations
    ❌ Do not deserialize untrusted data

    ✅ Prefer pure (data-only) and language-agnostic (de)serialization formats such as JSON or XML

    Avoiding language-specific (de)serialization formats reduces the risk of attackers manipulating the deserialization process for malicious purposes.

    ```ruby
      user_data = JSON.parse(params[:user])
      # handle any parsing errors

      JSON.load(user)
    ```

    ## Resources
    - [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
  cwe_id:
    - 502
  id: ruby_lang_deserialization_of_user_input
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_deserialization_of_user_input
