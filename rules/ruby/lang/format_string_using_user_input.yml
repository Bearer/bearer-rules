languages:
  - ruby
imports:
  - ruby_shared_common_user_input
patterns:
  - pattern: $<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - format
          - sprintf
          - printf
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: Kernel.$<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - format
          - sprintf
          - printf
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: $<USER_INPUT> % []
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  # Unsupported:
  #   printf(io, format, ...) - can't distinguish arg types
  #   user_input % single_value - could confuse with number mod
severity: low
metadata:
  description: "Unsanitized user input in format string"
  remediation_message: |
    ## Description

    If an application includes user input directly in a format string, an
    attacker can use format specifiers in the user input to produce misleading
    or fabricated messages.

    ## Remediations

    ❌ Avoid format strings containing user input:

    ```ruby
    sprintf("The value was #{params[:value]}")
    ```

    ✅ Use a literal format string with additional arguments:

    ```ruby
    sprintf("The value was %s", params[:value])
    ```
  cwe_id:
    - 134
  id: ruby_lang_format_string_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_format_string_using_user_input
