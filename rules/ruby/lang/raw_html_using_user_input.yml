languages:
  - ruby
imports:
  - ruby_shared_common_html_user_input
patterns:
  - pattern: $<STRING>
    filters:
      - variable: STRING
        string_regex: <\w+(\s[^>]*)?>
      - variable: STRING
        detection: ruby_shared_common_html_user_input
        scope: result
  - pattern: $<STRING>.html_safe
    filters:
      - variable: STRING
        detection: ruby_shared_common_html_user_input
        scope: result
  - pattern: raw($<STRING>)
    filters:
      - variable: STRING
        detection: ruby_shared_common_html_user_input
        scope: result
  - pattern: ERB.new($<STRING>$<...>)
    filters:
      - variable: STRING
        detection: ruby_shared_common_html_user_input
        scope: result
severity: high
metadata:
  description: "Unsanitized user input in raw HTML strings (XSS)"
  remediation_message: |-
    ## Description

    Including unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.

    ## Remediations

    - **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.
    ```ruby
    html = "<h1>#{params[:title]}</h1>"
    ```
    - **Do** use a templating language, such as ERB, and keep the template in a separate file to safely incorporate user input.
    - **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.
    ```ruby
    html = "<h1>#{strip_tags(params[:title])}</h1>"
    ```

    ## References

    - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 79
  id: ruby_lang_raw_html_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_raw_html_using_user_input
