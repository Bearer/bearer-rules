imports:
  - ruby_shared_lang_blowfish_init
  - ruby_shared_common_datatype
patterns:
  - pattern: |
      $<VAR>.$<METHOD>($<PASSWORD>)
    filters:
      - variable: VAR
        detection: ruby_shared_lang_blowfish_init
        scope: cursor
      - variable: METHOD
        values:
          - encrypt_string
          - decrypt_string
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: |
      $<VAR>.$<METHOD>($<_>, $<PASSWORD>)
    filters:
      - variable: VAR
        detection: ruby_shared_lang_blowfish_init
        scope: cursor
      - variable: METHOD
        values:
          - encrypt_pair
          - decrypt_pair
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: |
      $<VAR>.$<METHOD> do
        $<PASSWORD>
      end
    filters:
      - variable: VAR
        detection: ruby_shared_lang_blowfish_init
        scope: cursor
      - variable: METHOD
        values:
          - encrypt_block
          - decrypt_block
      - variable: PASSWORD
        detection: ruby_shared_common_datatype
        scope: result
languages:
  - ruby
only_data_types:
  - Passwords
metadata:
  description: "Usage of weak encryption algorithm on a password (Blowfish)"
  remediation_message: |-
    ## Description

    Using a weak encryption algorithm like Blowfish for passwords increases the risk of data breaches. Encryption, being reversible, is not suitable for password storage because it allows the original password to be retrieved. Passwords should instead be hashed, an irreversible process that transforms them into a fixed-size string of characters.

    ## Remediations

    - **Do not** use encryption algorithms for storing passwords. Encryption is not secure enough for password management because it can be reversed to reveal the original password.
    - **Do** use strong hashing algorithms specifically designed for password storage, such as bcrypt or Argon2id. These algorithms are more secure because they are designed to be slow and computationally expensive to reverse, making password cracking much harder.
      ```ruby
      BCrypt::Password.create("password_123")
      ```

      ```ruby
      hasher = Argon2::Password.new()
      hasher.create("password_123")
      ```

    ## References

    - [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)
    - [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)
    - [ruby-argon2](https://github.com/technion/ruby-argon2)
  cwe_id:
    - 326
  id: ruby_lang_weak_password_encryption_blowfish
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_weak_password_encryption_blowfish
  cloud_code_suggestions: true
severity: high
