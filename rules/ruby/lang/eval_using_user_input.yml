imports:
  - ruby_shared_common_user_input
patterns:
  - pattern: |
      RubyVM::InstructionSequence.compile($<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<_>.$<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - eval
          - instance_eval
          - class_eval
          - module_eval
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
  - pattern: |
      $<METHOD>($<USER_INPUT>$<...>)
    filters:
      - variable: METHOD
        values:
          - eval
          - instance_eval
          - class_eval
          - module_eval
      - variable: USER_INPUT
        detection: ruby_shared_common_user_input
        scope: result
languages:
  - ruby
severity: high
metadata:
  description: "Potential command injection with user input detected."
  remediation_message: |
    ## Description
    It is dangerous to use eval with user input, or to compile code with user-supplied data. Such practices can lead to code injection.

    ## Remediations
    ‚ùå Avoid using code execution methods with unsanitized user input.

    It might be possible to use dynamic hardcoded values, instead of user input directly.

    ```ruby
    get_total_str = if params["include_vat"]
      "def get_total(a,b,c); a + b + c; end"
    else
      "def get_total(a,b); a + b; end"
    end

    cart.instance_eval(get_total_str)
    ```

    ## Resources
    - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
  cwe_id:
    - 94
    - 95
  id: ruby_lang_eval_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_using_user_input
