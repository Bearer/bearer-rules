imports:
  - ruby_shared_lang_openssl_digest_dss_init
  - ruby_shared_common_datatype
patterns:
  - pattern: OpenSSL::Digest.digest($<ALGORITHM>, $<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: ALGORITHM
        regex: (?i)['"]DSS1?['"]
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: OpenSSL::Digest::$<ALGORITHM>.digest($<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: ALGORITHM
        regex: \ADSS1?\z
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: |
      $<DIGEST>.update($<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_dss_init
        scope: cursor
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: |
      $<DIGEST> << $<OPTIONAL_DATA_TYPE>
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_dss_init
        scope: cursor
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
  - pattern: $<DIGEST>.$<METHOD>($<OPTIONAL_DATA_TYPE>)
    filters:
      - variable: DIGEST
        detection: ruby_shared_lang_openssl_digest_dss_init
        scope: cursor
      - variable: METHOD
        values:
          - digest
          - hexdigest
          - base64digest
      - either:
          - variable: OPTIONAL_DATA_TYPE
            detection: ruby_shared_common_datatype
            scope: result
          - not:
              variable: OPTIONAL_DATA_TYPE
              detection: ruby_shared_common_datatype
              scope: result
languages:
  - ruby
skip_data_types:
  - "Unique Identifier"
  - "Passwords" # see ruby_lang_weak_password_hash_dss
metadata:
  description: "Usage of weak hashing library (DSS)"
  remediation_message: |
    ## Description

    A weak hashing library can lead to data breaches and greater security risk.

    ## Remediations
    According to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DSS is considered a weak hash algorithm and therefore shouldn't be used.

    ❌ Avoid libraries and algorithms with known weaknesses:

    ```ruby
    OpenSSL::Digest.new("dss").digest("weak")
    ```

    ✅ Instead, we recommend using bcrypt:

    ```ruby
    BCrypt::Password.create('iLOVEdogs123')
    ```

    ## Resources
    - [BCrypt Explained](https://dev.to/sylviapap/bcrypt-explained-4k5c)
  cwe_id:
    - 328
  id: ruby_lang_weak_hash_dss
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_weak_hash_dss
  cloud_code_suggestions: true
severity: medium
