imports:
  - ruby_shared_common_user_input
patterns:
  - pattern: |
      eval($<INPUT>$<...>)
    filters:
      - not:
          variable: INPUT
          detection: ruby_shared_common_user_input
          scope: result
  - pattern: |
      binding.eval($<INPUT>$<...>)
    filters:
      - not:
          variable: INPUT
          detection: ruby_shared_common_user_input
          scope: result
languages:
  - ruby
severity: critical
metadata:
  description: "Usage of dangerous 'eval' function"
  remediation_message: |-
    ## Description

    The use of the `eval` function, which dynamically executes code represented as strings, poses a high security risk in any programming environment. This is primarily because it can be exploited to run arbitrary and potentially harmful code, making the application vulnerable to code injection attacks.

    ## Remediations

    - **Do not** use the `eval` function. Its ability to execute code that can be manipulated by an attacker introduces various injection vulnerabilities.
    ```ruby
    eval("def hello_world; puts 'Hello world!'; end")
    ```
    - **Do** explore safer alternatives to `eval`. Use language features or libraries specifically designed for the task you're trying to accomplish with `eval`.
    - **Do** validate and sanitize all inputs if you must use dynamic code execution. This reduces the risk of executing malicious code.
    - **Do** use restricted execution environments for running code dynamically if absolutely necessary. This minimizes the potential impact of malicious code execution by isolating it from the main application environment.

    ## References

    - [OWASP: Eval Injection](https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection)
    - [MDN Web Docs: Never use eval!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)
  cwe_id:
    - 95
  id: ruby_lang_eval_linter
  documentation_url: https://docs.bearer.com/reference/rules/ruby_lang_eval_linter
