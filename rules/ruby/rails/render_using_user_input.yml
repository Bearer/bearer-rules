languages:
  - ruby
imports:
  - ruby_shared_common_html_user_input
patterns:
  - pattern: |
      render(inline: $<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_html_user_input
        scope: result
  - pattern: |
      render(html: $<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_html_user_input
        scope: result
  - pattern: |
      send_data($<USER_INPUT>, disposition: $<DISPOSITION>)
    filters:
      - variable: USER_INPUT
        detection: ruby_shared_common_html_user_input
        scope: result
      - not:
          variable: DISPOSITION
          detection: ruby_rails_render_using_user_input_attachment
          scope: cursor
auxiliary:
  - id: ruby_rails_render_using_user_input_attachment
    patterns:
      - pattern: $<VALUE>
        filters:
          - variable: VALUE
            string_regex: \Aattachment\z
severity: high
metadata:
  description: "Unsanitized user input in raw HTML strings (XSS)"
  remediation_message: |-
    ## Description

    Including unsanitized user input in HTML responses can lead to cross-site scripting (XSS) attacks. This vulnerability exposes your application to malicious scripts injected by attackers, compromising user data and browser security.

    ## Remediations

    - **Do not** include unsanitized user input directly in HTML responses. This practice makes your application vulnerable to XSS attacks.
    ```ruby
    render html: "<h1>#{params[:title]}</h1>"
    ```

    - **Do** sanitize user input before including it in an HTML response to prevent XSS attacks.
    ```ruby
    render html: "<h1>#{strip_tags(params[:title])}</h1>"
    ```

    ## References

    - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 79
  id: ruby_rails_render_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/ruby_rails_render_using_user_input
