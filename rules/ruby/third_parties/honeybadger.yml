imports:
  - ruby_shared_common_datatype
patterns:
  - pattern: |
      Honeybadger.notify($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: DATA_TYPE
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: |
      Honeybadger.context($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: DATA_TYPE
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: |
      def to_honeybadger_context
        $<DATA_TYPE>
      end
    filters:
      - variable: DATA_TYPE
        detection: ruby_shared_common_datatype
        scope: result
  - pattern: |
      Honeybadger.add_breadcrumb($<...>$<DATA_TYPE>$<...>)
    filters:
      - variable: DATA_TYPE
        detection: ruby_shared_common_datatype
        scope: result
languages:
  - ruby
skip_data_types:
  - "Unique Identifier"
metadata:
  description: "Sensitive data sent to Honeybadger detected."
  remediation_message: |
    ## Description
    Leaking sensitive data to third-party loggers is a common cause of data leaks and can lead to data breaches. This rule looks for instances of sensitive data sent to Honeybadger.

    ## Remediations

    When logging errors or events, ensure all sensitive data is removed.

    ## Resources
    - [Honeybadger Docs](https://docs.honeybadger.io/lib/ruby/integration-guides/rails-exception-tracking/)
  cwe_id:
    - 201
  associated_recipe: Honeybadger
  id: ruby_third_parties_honeybadger
  documentation_url: https://docs.bearer.com/reference/rules/ruby_third_parties_honeybadger
