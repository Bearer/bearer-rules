imports:
  - go_shared_lang_dynamic_input_combined
  - go_shared_lang_instance
patterns:
  - pattern: fmt.Fprintf($<RESPONSE_WRITER>, $<...>$<USER_INPUT>$<...>)
    filters:
      - variable: RESPONSE_WRITER
        detection: go_shared_lang_instance
        scope: result
        filters:
          - variable: PACKAGE
            detection: go_lang_cross_site_scripting_http_package
            scope: cursor
          - variable: TYPE
            values:
              - ResponseWriter
      - variable: USER_INPUT
        detection: go_shared_lang_dynamic_input_combined
        scope: result
auxiliary:
  - id: go_lang_cross_site_scripting_http_package
    patterns:
      - import $<!>"net/http"
      - import ($<...>$<!>"net/http"$<...>)
      - http
languages:
  - go
severity: high
metadata:
  description: Unsanitized user input in HTTP response (XSS)
  remediation_message: |
    ## Description

    Including unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.

    ## Remediations

    - **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.
    ```golang
      func bad(w http.ResponseWriter, r *http.Request) {
        userInput := r.URL.Query().Get("input")
        fmt.Fprintf(w, "<html><body>%s</body></html>", userInput)
      }
    ```

    ## References

    - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)

  cwe_id:
    - 79
  id: go_lang_cross_site_scripting
  documentation_url: https://docs.bearer.com/reference/rules/go_lang_cross_site_scripting
