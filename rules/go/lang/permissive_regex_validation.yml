patterns:
  - pattern: |
      $<REGEXP>.$<METHOD>($<PATTERN>$<...>)
    filters:
      - variable: REGEXP
        detection: go_lang_permissive_regex_validation_regexp
      - variable: METHOD
        values:
          - Compile
          - MustCompile
      - not:
          variable: PATTERN
          string_regex: \A.\\A.*\\[zZ].\z
auxiliary:
  - id: go_lang_permissive_regex_validation_regexp
    patterns:
      - import $<!>"regexp"
      - |
        import (
          $<!>"regexp"
        )
languages:
  - go
metadata:
  description: "Missing validation for regular expression"
  remediation_message: |-
    ## Description

    When using regular expressions for validation, it's crucial to specify the start and end of the text boundaries. This ensures the entire text is validated, not just parts of it. Use \A and \z (or \Z) over ^ and $ to specify text boundaries, because these accurately mark the beginning and end of the text, even in multiline mode.

    ## Remediations

    - **Do not** use regular expressions without specifying start and end boundaries. This can lead to incomplete validation.
      ```go
      regexp.MustCompile("foo") // unsafe
      ```
    - **Do not** use line-based boundaries (^ and $) for validation as they may not secure the entire text.
      ```go
      regexp.MustCompile("^foo$") // unsafe
      ```
    - **Do** use whole-text boundaries (\A and \z or \Z) in your regular expressions to ensure comprehensive validation.
      ```go
      regexp.MustCompile("\Afoo\z")
      ```

  cwe_id:
    - 625
  id: go_lang_permissive_regex_validation
  documentation_url: https://docs.bearer.com/reference/rules/go_lang_permissive_regex_validation
severity: medium
