imports:
  - go_shared_lang_datatype
patterns:
  - pattern: |
      $<CALLER>.$<METHOD>($<DATA_TYPE>);
    filters:
      - either:
          - variable: CALLER
            detection: go_lang_logger_log
          - variable: CALLER
            detection: go_lang_logger_zerolog
      - variable: METHOD
        regex: \A(Fatal|Panic|Print)(f|ln)?\z
      - variable: DATA_TYPE
        detection: go_shared_lang_datatype
        scope: result
  - pattern: |
      $<CALLER>.$<EVENT>().$<METHOD>($<DATA_TYPE>);
    filters:
      - either:
        - variable: CALLER
          detection: go_lang_logger_log
        - variable: CALLER
          detection: go_lang_logger_zerolog
      - variable: EVENT
        regex: \A(Info|Debug|Error|Trace|Fatal|Panic|Warn)\z
      - variable: METHOD
        values:
          - Msg
          - Msgf
      - variable: DATA_TYPE
        detection: go_shared_lang_datatype
        scope: result
  - pattern: |
      $<CALLER>.$<METHOD>($<DATA_TYPE>);
    filters:
      - either:
          - variable: CALLER
            detection: go_lang_logger_logrus
          - variable: CALLER
            detection: go_lang_logger_seelog
      - variable: METHOD
        regex: \A(WithFields\.)?(Info|Debug|Error|Trace|Fatal|Panic|Warn)\z
      - variable: DATA_TYPE
        detection: go_shared_lang_datatype
        scope: result
  - pattern: |
      $<CALLER>.$<METHOD>($<DATA_TYPE>);
    filters:
      - variable: CALLER
        detection: go_lang_logger_glog
      - variable: METHOD
        regex: \A(Info|Warning|Error|Fatal)(Contex)?(Depth)?(f)?\z
      - variable: DATA_TYPE
        detection: go_shared_lang_datatype
        scope: result
  - pattern: |
      $<ZAP>.$<METHOD>($<DATA_TYPE>);
    filters:
      - variable: ZAP
        detection: go_lang_logger_zap
      - variable: METHOD
        regex: \A(WithFields\.)?(Info|Log|Error|Fatal|DPanic|Warn)\z
      - variable: DATA_TYPE
        detection: go_shared_lang_datatype
        scope: result
auxiliary:
  - id: go_lang_logger_log
    patterns:
      - log
      - log.New();
      - log.Default();
      - import $<!>"log"
      - |
        import (
          $<!>"log"
        )
  - id: go_lang_logger_zerolog
    patterns:
      - import $<!>"github.com/rs/zerolog"
      - |
        import (
          $<!>"github.com/rs/zerolog"
        )
  - id: go_lang_logger_logrus
    patterns:
      - logrus.New();
      - import $<!>"github.com/sirupsen/logrus"
      - |
        import (
          $<!>"github.com/sirupsen/logrus"
        )
  - id: go_lang_logger_zap
    patterns:
      - zap.$<_>().Sugar()
      - zap.$<_>()
  - id: go_lang_logger_seelog
    patterns:
      - import $<!>"github.com/cihub/seelog"
      - |
        import (
          $<!>"github.com/cihub/seelog"
        )
  - id: go_lang_logger_glog
    patterns:
      - import $<!>"github.com/golang/glog"
      - |
        import (
          $<!>"github.com/golang/glog"
        )
languages:
  - go
skip_data_types:
  - "Unique Identifier"
metadata:
  description: "Leakage of sensitive data in logger message"
  remediation_message: |
    ## Description

    Leaking sensitive data to loggers is a common cause of data leaks and can lead to data breaches. This rule looks for instances of sensitive data sent to loggers.

    ## Remediations

    ❌ Avoid using sensitive data in logger messages:

    ```go
    logger.info(f"User is: '{user.email}'")
    ```

    ✅ If you need to identify a user, ensure to use their unique identifier instead of their personal identifiable information:

    ```go
    logger.info(f"User is: '{user.uuid}'")
    ```

    ## Resources
    - [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)
  cwe_id:
    - 532
  id: go_lang_logger
  documentation_url: https://docs.bearer.com/reference/rules/go_lang_logger
  cloud_code_suggestions: true
severity: high
