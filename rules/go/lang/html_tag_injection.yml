imports:
  - go_shared_lang_dynamic_request_input
patterns:
  - pattern: $<TEMPLATE_INSTANCE>.Parse($<INPUT>)
    filters:
      - variable: TEMPLATE_INSTANCE
        detection: go_lang_html_tag_injection_text_template_instance
      - variable: INPUT
        detection: go_lang_html_tag_injection_unsanitized_input
  - pattern: $<TEMPLATE>.$<TYPE>($<INPUT>)
    filters:
      - variable: TYPE
        values:
          - HTML
          - HTMLAttr
      - variable: TEMPLATE
        detection: go_lang_html_tag_injection_html_template
      - variable: INPUT
        detection: go_lang_html_tag_injection_unsanitized_input
auxiliary:
  - id: go_lang_html_tag_injection_text_template_instance
    patterns:
      - pattern: $<TEXT_TEMPLATE>.New()
        filters:
          - variable: TEXT_TEMPLATE
            detection: go_lang_html_tag_injection_text_template
  - id: go_lang_html_tag_injection_text_template
    patterns:
      - import $<!>"text/template"
      - |
        import (
          $<!>"text/template"
        )
  - id: go_lang_html_tag_injection_html_template
    patterns:
      - import $<!>"html/template"
      - |
        import (
          $<!>"html/template"
        )
  - id: go_lang_html_tag_injection_unsanitized_input
    sanitizer: go_lang_html_tag_injection_sanitizer
    patterns:
      - pattern: $<INPUT>
        filters:
          - variable: INPUT
            detection: go_shared_lang_dynamic_request_input
            scope: cursor
  - id: go_lang_html_tag_injection_sanitizer
    patterns:
      - pattern: $<TEMPLATE>.HTMLEscapeString()
        filters:
          - either:
              - variable: TEMPLATE
                detection: go_lang_html_tag_injection_text_template
              - variable: TEMPLATE
                detection: go_lang_html_tag_injection_html_template
languages:
  - go
metadata:
  description: "Missing sanitization of HTML template tags"
  remediation_message: |-
    ## Description

    When user input is not sanitized, attackers can inject HTML tags, such as `<script>` tags, into templates. This unsanitized input can lead to Cross-Site Scripting (XSS) attacks when the malicious scripts are executed.

    ## Remediations

    - **Do** sanitize user input before incorporating it into a template. This step is crucial to prevent XSS attacks.
      ```go
      safe := template.HTMLEscapeString(r.FormValue("xyz"))
      ```
    - **Do** use `html/template` instead of `text/template` for parsing and rendering templates. The `html/template` package automatically escapes inputs, providing an additional layer of security.
      ```go
      import "html/template"

      func good(w http.ResponseWriter, r *http.Request) {
        t, _ := template.New("something").Parse(r.FormValue("xyz"))
        t.Execute(w, nil)
      }
      ```

    ## References

    - [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 80
  id: go_lang_html_tag_injection
  documentation_url: https://docs.bearer.com/reference/rules/go_lang_missing_script_tag_sanitization
severity: high
