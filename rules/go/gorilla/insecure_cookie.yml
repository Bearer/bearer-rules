patterns:
  - pattern: $<SESSION>
    filters:
      - variable: SESSION
        detection: go_gorilla_insecure_cookie_session
        scope: cursor_strict
      - not:
          variable: SESSION
          detection: go_gorilla_insecure_cookie_secure_true
          scope: cursor_strict
auxiliary:
  - id: go_gorilla_insecure_cookie_sessions_init
    patterns:
      - import $<!>"github.com/gorilla/sessions"
      - |
        import (
          $<!>"github.com/gorilla/sessions"
        )
  - id: go_gorilla_insecure_cookie_true
    patterns:
      - "true"
  - id: go_gorilla_insecure_cookie_secure_true
    patterns:
      - pattern: "$<_>{ Secure: $<TRUE> }"
        filters:
          - variable: "TRUE"
            detection: go_gorilla_insecure_cookie_true
            scope: cursor
  - id: go_gorilla_insecure_cookie_session
    patterns:
      - pattern: $<SESSION>.Options{}
        filters:
          - variable: SESSION
            detection: go_gorilla_insecure_cookie_sessions_init
            scope: cursor
languages:
  - go
metadata:
  description: "Missing 'Secure' option in cookie configuration."
  remediation_message: |
    ## Description

    When set to "true", the "Secure" attribute ensures that a client will only send the cookie to the server when HTTPS is being used.
    This prevents the cookie from being observed by unauthorized third parties.

    It's essential to configure cookie security options properly, especially when using session management libraries like Gorilla Sessions in Go.

    ## Remediations

    To ensure that cookies, particularly session cookies, are secure:

    ✅ Set Secure Flag

    If your site is served over HTTPS, also set the `Secure` flag on the cookie to ensure it's transmitted over secure channels only.

    ✅ Leverage Gorilla SecureCookie

    Utilize the encoding/decoding capabilities of Gorilla's SecureCookie to securely store session data.

    ✅ Implement Strong Session Management

    Use Gorilla's session management features to create, renew, and expire sessions in a secure manner, preventing session fixation and other session-related attacks.

    ## Resources

    - [Gorilla Sessions Documentation](http://www.gorillatoolkit.org/pkg/sessions)
    - [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)
    - [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)

  cwe_id:
    - 614
  id: go_gorilla_insecure_cookie
  documentation_url: https://docs.bearer.com/reference/rules/go_gorilla_insecure_cookie
  cloud_code_suggestions: true
