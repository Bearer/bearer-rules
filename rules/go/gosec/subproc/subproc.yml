imports:
  - go_shared_lang_dynamic_input_combined
patterns:
  - pattern: $<CLIENT>.Call($<...>$<INPUT>$<...>)
    filters:
      - variable: CLIENT
        detection: go_gosec_subproc_subproc_net_rpc_client
      - variable: INPUT
        detection: go_shared_lang_dynamic_input_combined
  - pattern: $<VALUE>.$<METHOD>($<...>$<INPUT>$<...>)
    filters:
      - variable: VALUE
        detection: go_gosec_subproc_subproc_net_value
      - variable: METHOD
        values:
          - FieldByName
          - FieldByNameFunc
      - variable: INPUT
        detection: go_shared_lang_dynamic_input_combined
auxiliary:
  - id: go_gosec_subproc_subproc_net_rpc_client
    patterns:
      - pattern: $<NET_RPC>.$<METHOD>()
        filters:
          - variable: NET_RPC
            detection: go_gosec_subproc_subproc_net_rpc_import
          - variable: METHOD
            values:
              - Dial
              - DialHTTP
              - DialHTTPPath
              - NewClient
              - NewClientWithCodec
  - id: go_gosec_subproc_subproc_net_rpc_import
    patterns:
      - import $<!>"net/rpc"
      - |
        import (
          $<!>"net/rpc"
        )
  - id: go_gosec_subproc_subproc_net_value
    patterns:
      - pattern: $<VALUE>.ValueOf()
        filters:
          - variable: VALUE
            detection: go_gosec_subproc_subproc_net_rpc_reflect_import
  - id: go_gosec_subproc_subproc_net_rpc_reflect_import
    patterns:
      - import $<!>"reflect"
      - |
        import (
          $<!>"reflect"
        )
languages:
  - go
severity: critical
metadata:
  description: Unsanitized external input in code execution
  remediation_message: |
    ## Description

    Code injection is a security vulnerability where untrusted (external or user) data is injected into a program or interpreted as part of its execution flow, leading to unintended and potentially harmful consequences.

    ## Remediations

    Prevent code injection by adhering to the following practices:

    ❌ Never pass raw external input to

    Do not use externally supplied values when executing remote code, as this can lead to code injection vulnerabilities.

    ✅ Implement Input Validation

    Ensure that any external input is validated against a set of strict rules to ensure it does not contain malicious characters or patterns.

    ## Resources

    - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
  cwe_id:
    - 94
  id: go_gosec_subproc_subproc
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_subproc_subproc
