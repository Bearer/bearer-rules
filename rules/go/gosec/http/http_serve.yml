patterns:
  - pattern: $<HTTP_INIT>.$<METHOD>()
    filters:
      - variable: METHOD
        values:
          - ListenAndServe
          - ListenAndServeTLS
          - Serve
          - ServeTLS
      - variable: HTTP_INIT
        detection: go_gosec_http_http_serve_http_init
        scope: result
auxiliary:
  - id: go_gosec_http_http_serve_http_init
    patterns:
      - import $<!>"net"
      - import $<!>"net/http"
      - pattern: |
          import (
            $<!>"net"
          )
      - pattern: |
          import (
            $<!>"net/http"
          )
languages:
  - go
metadata:
  description: "Usage of vulnerable 'serve' function"
  remediation_message: |
    ## Description

    The `net/http` serve functions in Go, when used with default settings, are vulnerable to resource consumption attacks. Attackers can exploit this by creating numerous connections to the server, intentionally not completing data transfers or leaving connections open, which can exhaust the server's resources and prevent it from accepting new legitimate connections.

    ## Remediations

    To mitigate such attacks, specific server configurations are necessary:

    ❌ Avoid Default Serve Functions for Production

    Functions like `http.ListenAndServe` and `http.Serve` should not be used in a production setting as they do not allow for timeout configurations.

    ✅ Configure Timeouts on Custom `http.Server` Object

    Create a custom `http.Server` object and set appropriate timeouts to prevent resource exhaustion.

    ```go
    import (
        "net/http"
        "time"
        "log"
    )

    func main() {
        srv := &http.Server{
            Addr:             "localhost:8000",
            ReadHeaderTimeout: 15 * time.Second,
            ReadTimeout:      15 * time.Second,
            WriteTimeout:     10 * time.Second,
            IdleTimeout:      30 * time.Second,
        }

        if err := srv.ListenAndServe(); err != nil {
            log.Fatal(err)
        }
    }
    ```

    ✅ Use `http.TimeoutHandler` for Per Request Timeouts

    To set timeouts for individual requests, use the `http.TimeoutHandler` wrapper on your handlers. This ensures that the server does not wait indefinitely for a request to complete.

    ## Resources

    - [http.Server Timeouts Documentation](https://pkg.go.dev/net/http#Server)
    - [Guide to Setting Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)
    - [Understanding the Slowloris Attack](https://en.wikipedia.org/wiki/Slowloris_(computer_security))

  cwe_id:
    - 400
  id: go_gosec_http_http_serve
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_http_http_serve
severity: low
