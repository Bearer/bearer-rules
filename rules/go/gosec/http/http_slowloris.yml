patterns:
  - pattern: $<HTTP_INIT>.ListenAndServe()
    filters:
      - variable: HTTP_INIT
        detection: go_gosec_http_http_slowloris_http_init
        scope: cursor
      - not:
          either:
            - variable: HTTP_INIT
              detection: go_gosec_http_http_slowloris_http_slowloris_read_timeout
              scope: cursor
            - variable: HTTP_INIT
              detection: go_gosec_http_http_slowloris_http_slowloris_read_header_timeout
              scope: cursor
auxiliary:
  - id: go_gosec_http_http_slowloris_http_slowloris_read_timeout
    patterns:
      - pattern: |
          &http.Server{$<...>$<!>ReadTimeout: $<_>$<...>}
  - id: go_gosec_http_http_slowloris_http_slowloris_read_header_timeout
    patterns:
      - pattern: |
          &http.Server{$<...>$<!>ReadHeaderTimeout: $<_>$<...>}
  - id: go_gosec_http_http_slowloris_http_init
    patterns:
      - pattern: |
          &http.Server{}
languages:
  - go
metadata:
  description: "Uncontrolled resource consumption (Slowloris)"
  remediation_message: |
    ## Description

    Potential Slowloris Attack because `ReadHeaderTimeout` is not configured in the `http.Server`.

    ## Remediations

    ❌ Avoid Using Default Serve Functions in Production

    The default `http.ListenAndServe` and `http.Serve` functions should not be utilized in a production environment as they lack the provision to set timeouts.

    ✅ Use Custom `http.Server` Object with Configured Timeouts

    Create and employ a custom `http.Server` object with the necessary timeouts set.

      ```go
      srv := &http.Server{
          Addr: "localhost:8000",
          ReadHeaderTimeout: 15 * time.Second,
          ReadTimeout: 15 * time.Second,
          WriteTimeout: 10 * time.Second,
          IdleTimeout: 30 * time.Second,
      }

      if err := srv.ListenAndServe(); err != nil {
          log.Fatal(err)
      }
      ```

    ✅ Implement Per Request Timeouts

    For timeouts on individual requests, wrap all `http.HandlerFunc(...)` in `http.TimeoutHandler` and set a timeout. Remember, the TimeoutHandler doesn't start ticking until all headers are read.

    ## Resources

    - [http.Server Timeouts](https://pkg.go.dev/net/http#Server)
    - [Setting Request Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)
    - [Slowloris Attack Details](https://en.wikipedia.org/wiki/Slowloris_(computer_security))

  cwe_id:
    - 400
  id: go_gosec_http_http_slowloris
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_http_http_slowloris
