patterns:
  - pattern: |
      tls.Config{$<...>CipherSuites: []$<_>{$<...>$<CIPHERS>$<...>}$<...>}
    filters:
      - variable: CIPHERS
        values:
          - tls.TLS_AES_128_GCM_SHA256
          - tls.TLS_AES_256_GCM_SHA384
          - tls.TLS_CHACHA20_POLY1305_SHA256
          - tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
          - tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          - tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
          - tls.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
          - tls.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
  - pattern: |
      tls.CipherSuite{$<...>ID: $<CIPHERS>$<...>}
    filters:
      - variable: CIPHERS
        values:
          - tls.TLS_AES_128_GCM_SHA256
          - tls.TLS_AES_256_GCM_SHA384
          - tls.TLS_CHACHA20_POLY1305_SHA256
          - tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
          - tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          - tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
          - tls.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
          - tls.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
languages:
  - go
metadata:
  description: "Use of a broken or risky cryptographic algorithm"
  remediation_message: |
    ## Description

    Usage of a cryptographically insecure cipher suite has been detected.

    ## Remediations

    ✅ It is recommended that alternative ciphers be used instead.

    ✅ It is strongly recommended that all TLS connections use TLS 1.3

    Go will automatically choose the most secure cipher when negotiating the TLS handshake with client or servers. TLS 1.3 cipher suites are configured to require Perfect
    Forward Secrecy (PFS).
    PFS is an important property as it will ensure that past encrypted transmissions could not be
    decrypted if the TLS certificate was compromised.

    ```go
    cert, err := tls.LoadX509KeyPair("server.crt", "server.key")
    if err != nil {
      log.Fatal(err)
    }

    cfg := &tls.Config{Certificates: []tls.Certificate{cert}, MinVersion: tls.VersionTLS13}
    srv := &http.Server{
      Addr:         ":8999",
      TLSConfig:    cfg,
      ReadTimeout:  time.Minute,
      WriteTimeout: time.Minute,
    }
    log.Fatal(srv.ListenAndServeTLS("", ""))
    ```

    If TLS 1.0-1.2 must be used, then the following list of ciphers should be chosen as they
    support
    Perfect Forward Secrecy (PFS):

    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305


    Example `tls.Config` using the recommended cipher suites:

    ```go
    cfg := &tls.Config{
        MinVersion: tls.VersionTLS12,
        CipherSuites: []uint16{
            tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
            tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
            tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
            tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
            tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,
            tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,
        },
    }
    ```

  cwe_id:
    - 327
  id: go_gosec_crypto_bad_tls_settings
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_crypto_bad_tls_settings
