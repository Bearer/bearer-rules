imports:
  - go_shared_lang_dynamic_input_combined
patterns:
  - pattern: |
      $<DB>.$<METHOD>($<INPUT>)
    filters:
      - variable: METHOD
        values:
          - Query
          - QueryRow
          - Prepare
          - Exec
      - variable: INPUT
        detection: go_gosec_sql_concat_sqli_unsanitized_input
      - not:
          variable: INPUT
          detection: go_gosec_sql_concat_sqli_input_sprintf_sanitizer
      - either:
          - variable: DB
            detection: go_gosec_sql_concat_sqli_sql_db_init
            scope: cursor
          - variable: DB
            detection: go_gosec_sql_concat_sqli_sql_open
            scope: cursor
          - variable: DB
            detection: go_gosec_sql_concat_sqli_sql_db_begin
            scope: cursor
          - variable: DB
            regex: (?i).*(db|database|client)
  - pattern: |
      $<DB>.$<METHOD>($<_>, $<INPUT>)
    filters:
      - variable: METHOD
        values:
          - QueryContext
          - PrepareContext
          - ExecContext
      - variable: INPUT
        detection: go_gosec_sql_concat_sqli_unsanitized_input
      - not:
          variable: INPUT
          detection: go_gosec_sql_concat_sqli_input_sprintf_sanitizer
      - either:
          - variable: DB
            detection: go_gosec_sql_concat_sqli_sql_open
            scope: cursor
          - variable: DB
            detection: go_gosec_sql_concat_sqli_sql_db_begin
            scope: cursor
          - variable: DB
            regex: (?i).*(db|database|client)
  - pattern: |
      $<DB>.$<METHOD>($<_>, $<_>, $<INPUT>)
    filters:
      - variable: METHOD
        values:
          - QueryContext
          - ExecContext
      - variable: INPUT
        detection: go_gosec_sql_concat_sqli_unsanitized_input
      - not:
          variable: INPUT
          detection: go_gosec_sql_concat_sqli_input_sprintf_sanitizer
      - either:
          - variable: DB
            detection: go_gosec_sql_concat_sqli_sql_open
            scope: cursor
          - variable: DB
            detection: go_gosec_sql_concat_sqli_sql_db_begin
            scope: cursor
          - variable: DB
            regex: (?i).*(db|database|client)
auxiliary:
  - id: go_gosec_sql_concat_sqli_input_sprintf_sanitizer
    patterns:
      - pattern: fmt.Sprintf($<STRING>$<...>)
        filters:
          - variable: STRING
            string_regex: (SELECT|DELETE|INSERT|UPDATE|INTO|FROM|WHERE).*%[bdoxXfFp].*
  - id: go_gosec_sql_concat_sqli_input_sanitizer
    patterns:
      - pattern: $<_>.QuoteIdentifier($<!>$<_>)
  - id: go_gosec_sql_concat_sqli_unsanitized_input
    sanitizer: go_gosec_sql_concat_sqli_input_sanitizer
    patterns:
      - pattern: $<INPUT>
        filters:
          - variable: INPUT
            detection: go_shared_lang_dynamic_input_combined
            scope: cursor
  - id: go_gosec_sql_concat_sqli_sql_db_init
    patterns:
      - pattern: var $<!>$<_> $<SQL>.DB
        filters:
          - variable: SQL
            detection: go_gosec_sql_concat_sqli_sql_init
            scope: cursor
      - pattern: var $<!>$<_> *$<SQL>.DB
        filters:
          - variable: SQL
            detection: go_gosec_sql_concat_sqli_sql_init
            scope: cursor
  - id: go_gosec_sql_concat_sqli_sql_db_begin
    patterns:
      - pattern: $<SQL>.Begin()
        filters:
          - variable: SQL
            detection: go_gosec_sql_concat_sqli_sql_open
            scope: cursor
  - id: go_gosec_sql_concat_sqli_sql_open
    patterns:
      - pattern: $<SQL>.Open()
        filters:
          - variable: SQL
            detection: go_gosec_sql_concat_sqli_sql_init
            scope: cursor
  - id: go_gosec_sql_concat_sqli_sql_init
    patterns:
      - pattern: import $<!>"database/sql"
      - pattern: |
          import (
            $<!>"database/sql"
          )
languages:
  - go
severity: critical
metadata:
  description: "Unsanitized user input in SQL query"
  remediation_message: |-
    ## Description

    SQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.

    ## Remediations

    - **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.
      ```go
      db.Query("SELECT * FROM users WHERE userName = ?", userName)
      ```
    - **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.

    ## References

    - [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 89
  id: go_gosec_sql_concat_sqli
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli
