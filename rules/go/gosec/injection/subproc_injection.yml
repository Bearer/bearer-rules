imports:
  - go_shared_lang_dynamic_input
patterns:
  - pattern: exec.CommandContext($<_>, $<EXE>$<...>)
    filters:
      - variable: EXE
        detection: go_shared_lang_dynamic_input
  - pattern: exec.Command($<EXE>$<...>)
    filters:
      - variable: EXE
        detection: go_shared_lang_dynamic_input
  - pattern: syscall.ForkExec($<EXE>$<...>)
    filters:
      - variable: EXE
        detection: go_shared_lang_dynamic_input
  - pattern: syscall.StartProcess($<EXE>$<...>)
    filters:
      - variable: EXE
        detection: go_shared_lang_dynamic_input
languages:
  - go
metadata:
  description: Unsanitized user input in code generation
  remediation_message: |
    ## Description

    Processing unsanitized user-controlled input as code puts your application at risk of Code Injection
    attacks, whereby attackers execute arbitrary commands or manipulate application behaviour,
    potentially leading to security breaches or data manipulation.

    ## Remediations

    ✅ Avoid User Input in Commands

    Always steer clear of incorporating user input when formulating commands or their arguments.

    ✅ Hardcoded Argument Set

    Ensure your application exclusively uses a hardcoded set of arguments when executing code.

    ## Resources

    - [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)
  cwe_id:
    - 94
  id: go_gosec_injection_subproc_injection
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection
