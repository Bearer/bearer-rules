patterns:
  - pattern: $<RAT>.SetString()
    filters:
      - variable: RAT
        detection: go_gosec_memory_math_big_rat_init
        scope: cursor
auxiliary:
  - id: go_gosec_memory_math_big_rat_init
    patterns:
      - pattern: $<BIG_INIT>.Rat{}
        filters:
          - variable: BIG_INIT
            detection: go_gosec_memory_math_big_init
            scope: result
  - id: go_gosec_memory_math_big_init
    patterns:
      - import $<!>"math/big"
      - |
        import (
          $<!>"math/big"
        )
languages:
  - go
metadata:
  description: "Possible integer overflow when converting strings"
  remediation_message: |
    ## Description

    When converting strings to integers using `strconv.Atoi` in Go, there's a risk of integer overflow if the result is assigned to a smaller integer type such as `int16` or `int32`. The size of the default `int` type in Go is platform-dependent—64 bits on a 64-bit system and 32 bits on a 32-bit system. Overflow can occur when the value returned from `strconv.Atoi` exceeds the range of the target integer type.

    ## Remediations

    ✅ Check Before Conversion

    Always verify that the value returned from `strconv.Atoi` is within the range of the target type before conversion.

    ```go
    if intValue, err := strconv.Atoi(stringValue); err == nil {
        if intValue >= math.MinInt16 && intValue <= math.MaxInt16 {
            int16Value := int16(intValue)
            // Use int16Value safely
        }
    }
    ```

    ✅ Use Specific Type Conversion Functions

    Use type-specific parsing functions such as `strconv.ParseInt` with the appropriate bit size to directly obtain the desired type.

    ```go
    if int64Value, err := strconv.ParseInt(stringValue, 10, 16); err == nil {
        int16Value := int16(int64Value)
        // Use int16Value safely
    }
    ```

    ❌ Avoid Blind Type Casting

    Do not cast the result of `strconv.Atoi` to a smaller integer type without validating that the value fits within the smaller type's range.

    ❌ Don't Ignore Errors

    Never ignore the error returned by `strconv.Atoi`. Always handle it to catch conversion issues, including potential overflows.

    ## Resources

    - [Go strconv package](https://pkg.go.dev/strconv)
    - [Go math package for min/max constants](https://pkg.go.dev/math#pkg-constants)
  cwe_id:
    - 190
  id: go_gosec_memory_math_big_rat
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_memory_math_big_rat
