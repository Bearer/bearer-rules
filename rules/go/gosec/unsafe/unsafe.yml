patterns:
  - unsafe.Alignof()
  - unsafe.Offsetof()
  - unsafe.Sizeof()
  - unsafe.Pointer()
languages:
  - go
metadata:
  description: "Usage of vulnerable 'unsafe' package"
  remediation_message: |-
    ## Description

    The `unsafe` package in Go allows for low-level memory management, including direct memory access and pointer manipulation. While `unsafe` is a powerful library, using it bypasses Go's type safety checks and opens the door to security vulnerabilities and unpredictable behavior in your application.

    ## Remediations

    - **Do not** use the `unsafe` package unless it is absolutely necessary. If you must use it, ensure you fully understand the implications and thoroughly test your code.
    - **Do** ensure buffer boundaries are respected to avoid buffer overflows. This precaution helps prevent unauthorized code execution.
    ```go
    buffer := make([]byte, 10)
    ```
    - **Do not** access memory after it has been freed to avoid use-after-free vulnerabilities, which can lead to unintended code execution or unpredictable system behavior.
    ```go
    unsafePointer := unsafe.Pointer(&data)
    C.free(unsafePointer)
    // now unsafe to access
    ```
    - **Do** regularly review and audit your code to prevent memory or information leaks that could compromise security or lead to system failures due to exhausted memory.

    ## References

    - [Buffer Overflows - OWASP](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)
    - [Using Freed Memory - OWASP](https://owasp.org/www-community/vulnerabilities/Using_freed_memory)
    - [Memory Leaks - OWASP](https://owasp.org/www-community/vulnerabilities/Memory_leak)
  cwe_id:
    - 242
  id: go_gosec_unsafe_unsafe
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_unsafe_unsafe
severity: high
