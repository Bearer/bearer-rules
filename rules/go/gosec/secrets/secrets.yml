patterns:
  - pattern: |
      $<NAME> := $<STRING_LITERAL>
    filters:
      - variable: NAME
        detection: go_gosec_secrets_secrets_name
        scope: cursor_strict
      - variable: STRING_LITERAL
        detection: go_gosec_secrets_secrets_literal
        scope: cursor
  - pattern: |
      var $<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        detection: go_gosec_secrets_secrets_name
        scope: cursor_strict
      - variable: STRING_LITERAL
        detection: go_gosec_secrets_secrets_literal
        scope: cursor
  - pattern: |
      $<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        detection: go_gosec_secrets_secrets_name
        scope: cursor_strict
      - variable: STRING_LITERAL
        detection: go_gosec_secrets_secrets_literal
        scope: cursor
auxiliary:
  - id: go_gosec_secrets_secrets_name
    patterns:
      - pattern: $<NAME>
        filters:
          - variable: NAME
            regex: (?i)(password|api_?key|secret)\b
  - id: go_gosec_secrets_secrets_literal
    patterns:
      - pattern: $<STRING>
        filters:
          - variable: STRING
            detection: string_literal
            scope: cursor_strict
          - not:
              variable: STRING
              string_regex: \A[*]+\z
          - variable: STRING
            entropy_greater_than: 3.5
languages:
  - go
severity: high
metadata:
  description: Usage of hard-coded secret
  remediation_message: |
    ## Description

    Storing sensitive information such as secret keys, passwords, or API tokens directly in source code can lead to security vulnerabilities. This practice makes it easy for malicious actors to access these secrets if the codebase is exposed or improperly accessed.

    ## Remediations

    To protect sensitive information:

    ✅ Dynamic Secret Retrieval

    Implement mechanisms to retrieve secrets dynamically at runtime from a secure source rather than hardcoding them in the source files.

    ✅ Environment Variables

    Use environment variables to inject secrets into the application at runtime, keeping them out of the codebase.

    ✅ Secrets Management Systems

    Utilize dedicated secrets management tools and services that securely store and manage sensitive information.

    ✅ Encrypted Configuration Files

    Store secrets in configuration files that are encrypted and decrypt them at runtime within the application.

    ✅ Access Control

    Ensure that the storage location for secrets has strict access controls to prevent unauthorized access.

    ✅ Audit and Rotate Secrets

    Regularly audit access to secrets and rotate them to minimize the risk if they are compromised.

    ## Resources

    - [OWASP: Use of Hard-coded Passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
    - [OWASP: Secrets Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)
  cwe_id:
    - 798
  id: go_gosec_secrets_secrets
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_secrets_secrets
