patterns:
  - pattern: |
      $<NAME> := $<STRING_LITERAL>
    filters:
      - variable: NAME
        detection: go_gosec_secrets_secrets_name
        scope: cursor_strict
      - variable: STRING_LITERAL
        detection: go_gosec_secrets_secrets_literal
        scope: cursor
  - pattern: |
      var $<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        detection: go_gosec_secrets_secrets_name
        scope: cursor_strict
      - variable: STRING_LITERAL
        detection: go_gosec_secrets_secrets_literal
        scope: cursor
  - pattern: |
      $<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        detection: go_gosec_secrets_secrets_name
        scope: cursor_strict
      - variable: STRING_LITERAL
        detection: go_gosec_secrets_secrets_literal
        scope: cursor
auxiliary:
  - id: go_gosec_secrets_secrets_name
    patterns:
      - pattern: $<NAME>
        filters:
          - variable: NAME
            regex: (?i)(password|api_?key|secret)\b
  - id: go_gosec_secrets_secrets_literal
    patterns:
      - pattern: $<STRING>
        filters:
          - variable: STRING
            detection: string_literal
            scope: cursor_strict
          - not:
              variable: STRING
              string_regex: \A[*]+\z
          - variable: STRING
            entropy_greater_than: 3.5
languages:
  - go
severity: critical
metadata:
  description: Usage of hard-coded secret
  remediation_message: |-
    ## Description

    Storing secrets like keys, passwords, or API tokens in your source code introduces a significant security risk. If your code is exposed or accessed improperly, these secrets can be easily obtained by attackers.

    ## Remediations

    - **Do** implement dynamic secret retrieval. Fetch secrets at runtime from a secure source instead of embedding them in your source files.
    - **Do** use environment variables to provide secrets to your application at runtime, keeping them out of your source code.
    - **Do** utilize secrets management systems. These tools securely store and handle sensitive information away from your codebase.
    - **Do** store secrets in encrypted configuration files. Decrypt these secrets only within the application at runtime.
    - **Do** ensure strict access control for the storage locations of your secrets to prevent unauthorized access.
    - **Do** regularly audit and rotate secrets to reduce risks in case they are compromised.

    ## References

    - [OWASP: Use of Hard-coded Passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
    - [OWASP: Secrets Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)
  cwe_id:
    - 798
  id: go_gosec_secrets_secrets
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_secrets_secrets
