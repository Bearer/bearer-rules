imports:
  - go_shared_lang_dynamic_input_combined
patterns:
  - pattern: |
      os.OpenFile($<INPUT>$<...>)
    filters:
      - variable: INPUT
        detection: go_gosec_filesystem_filereadtaint_input
        scope: result
  - pattern: |
      os.Open($<INPUT>$<...>)
    filters:
      - variable: INPUT
        detection: go_gosec_filesystem_filereadtaint_input
        scope: result
  - pattern: |
      ioutil.ReadFile($<INPUT>$<...>)
    filters:
      - variable: INPUT
        detection: go_gosec_filesystem_filereadtaint_input
        scope: result
  - pattern: |
      os.ReadFile($<INPUT>$<...>)
    filters:
      - variable: INPUT
        detection: go_gosec_filesystem_filereadtaint_input
        scope: result
auxiliary:
  - id: go_gosec_filesystem_filereadtaint_input
    sanitizer: go_gosec_filesystem_filereadtaint_input_sanitizer
    patterns:
      - pattern: $<INIT>
        filters:
          - variable: INIT
            detection: go_shared_lang_dynamic_input_combined
            scope: cursor
  - id: go_gosec_filesystem_filereadtaint_input_sanitizer
    patterns:
      - pattern: filepath.Clean()
      - pattern: filepath.Rel()
      - pattern: strconv.Itoa()
languages:
  - go
metadata:
  description: "Unsanitized user input in file path"
  remediation_message: |-
    ## Description

    Using user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.

    ## Remediations

    - **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.
    - **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.
    - **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.
      ```go
      safeFilename := filepath.Base(userInput)
      ```
    - **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.

    ## References

    - [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)
  cwe_id:
    - 73
  id: go_gosec_filesystem_filereadtaint
  documentation_url: https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint
severity: high
