imports:
  - java_shared_lang_instance
patterns:
  - pattern: $<COOKIE>.setHttpOnly($<TRUE>);
    filters:
      - variable: COOKIE
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A((javax|jakarta)\.servlet\.http\.)?Cookie\z
      - variable: "TRUE"
        detection: java_lang_cookie_missing_http_only_true
        scope: cursor
trigger:
  match_on: absence
  required_detection: java_lang_cookie_missing_http_only_init
auxiliary:
  - id: java_lang_cookie_missing_http_only_init
    patterns:
      - pattern: new $<COOKIE_TYPE>();
        filters:
          - variable: COOKIE_TYPE
            regex: \A((javax|jakarta)\.servlet\.http\.)?Cookie\z
  - id: java_lang_cookie_missing_http_only_true
    patterns:
      - "true;"
languages:
  - java
metadata:
  description: Missing HTTP Only option in cookie configuration
  remediation_message: |-
    ## Description

    Not setting the HTTP Only attribute to "true" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.

    ## Remediations

    - **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.
      ```java
      cookie.setHttpOnly(true);
      ```
  cwe_id:
    - 1004
  id: java_lang_cookie_missing_http_only
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only
  cloud_code_suggestions: true
severity: medium
