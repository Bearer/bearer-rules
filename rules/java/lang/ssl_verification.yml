imports:
  - java_shared_lang_instance
patterns:
  - pattern: |
      $<DEFAULT_HTTP_CLIENT>;
    filters:
      - variable: DEFAULT_HTTP_CLIENT
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(org\.apache\.http\.impl\.client\.)?DefaultHttpClient\z
  - pattern: |
      $<SSL_CONTEXT>.getInstance($<SSL_STRING>);
    filters:
      - variable: SSL_CONTEXT
        regex: \A(javax\.net\.ssl\.)?SSLContext\z
      - variable: SSL_STRING
        string_regex: (?i)\ASSL\z
languages:
  - java
severity: high
metadata:
  description: Missing TLS validation
  remediation_message: |-
    ## Description

    Your code is vulnerable to Man-in-the-Middle attacks if it doesn't validate TLS certificates. This issue arises when your application establishes a connection without verifying the server's hostname, making it susceptible to data interception and other security risks.  Using deprecated elements like `DefaultHttpClient`, which lacks hostname verification, or the SSL protocol, known for its security flaws, exacerbates these vulnerabilities.

    ## Remediations

    - **Do** use newer HTTP Clients such as `java.net.http.HttpClient` that automatically include TLS validation.
    - **Do** opt for the newer TLS protocol over SSL, wherever possible, to secure connections. Ensure your application explicitly requests TLS to avoid the vulnerabilities associated with SSL.
    ```java
    SSLContext.getInstance("TLS");
    ```
    - **Do not** rely on deprecated HTTP clients, such as `DefaultHttpClient`, for your application's networking needs. These clients do not perform necessary security checks like TLS validation, putting your application at risk.
  cwe_id:
    - 295
  id: java_lang_ssl_verification
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_ssl_verification
