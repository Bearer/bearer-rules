imports:
  - java_shared_lang_instance
patterns:
  - pattern: $<COOKIE>.setHttpOnly($<FALSE>)
    filters:
      - variable: COOKIE
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(javax\.servlet\.http\.)?Cookie\z
      - variable: "FALSE"
        detection: java_lang_insecure_cookie_false
        scope: cursor
  - pattern: $<COOKIE>.setSecure($<FALSE>)
    filters:
      - variable: COOKIE
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(javax\.servlet\.http\.)?Cookie\z
      - variable: "FALSE"
        detection: java_lang_insecure_cookie_false
        scope: cursor
auxiliary:
  - id: java_lang_insecure_cookie_false
    patterns:
      - "false;"
languages:
  - java
metadata:
  description: "Missing secure options for cookie detected."
  remediation_message: |
    ## Description

    To make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.

    ## Remediations

    ✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS
    ✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript

    ```java
    cookie.setSecure(true);
    cookie.setHttpOnly(true);
    ```
  cwe_id:
    - 614
  id: java_lang_insecure_cookie
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_insecure_cookie
  cloud_code_suggestions: true
