imports:
  - java_shared_lang_message_digest_buffer
patterns:
  - pattern: |
      Integer.toHexString($<MESSAGE_DIGEST_BUFFER_BYTE>)
    filters:
      - variable: MESSAGE_DIGEST_BUFFER_BYTE
        detection: java_lang_bad_hex_conversion_digest_buffer_byte
        scope: result
auxiliary:
  - id: java_lang_bad_hex_conversion_digest_buffer_byte
    patterns:
      - pattern: $<MESSAGE_DIGEST_BUFFER>;
        filters:
          - variable: MESSAGE_DIGEST_BUFFER
            detection: java_shared_lang_message_digest_buffer
            scope: cursor
languages:
  - java
severity: medium
metadata:
  description: Usage of bad hex conversion on digest array
  remediation_message: |
    ## Description
    The application currently utilizes Integer.toHexString on a digest array buffer, potentially resulting in inaccurate values.

    ## Remediations
    ❌ Avoid using Integer.toHexString for hexadecimal representation due to potential inaccuracies.

    ✅ For Java 17 and above, leverage the java.util.HexFormat object for improved handling of hexadecimal representation

    ```java
    MessageDigest sha256Digest = MessageDigest.getInstance("SHA-256");
    sha256Digest.update("hello world".getBytes(StandardCharsets.UTF_8));
    byte[] output = sha256Digest.digest();

    HexFormat hex = HexFormat.of();
    String hexString = hex.formatHex(output);
    ```

    For older Java applications, consider using javax.xml.bind.DatatypeConverter as an alternative.

    ## Resources

    - [DatatypeConverter](https://docs.oracle.com/javase/9/docs/api/javax/xml/bind/DatatypeConverter.html#printHexBinary-byte:A-)

  cwe_id:
    - 704
  id: java_lang_bad_hex_conversion
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_bad_hex_conversion
  cloud_code_suggestions: true
