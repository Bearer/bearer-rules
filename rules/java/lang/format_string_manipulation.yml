imports:
  - java_shared_lang_instance
  - java_shared_lang_user_input
patterns:
  - pattern: String.format($<USER_INPUT>$<...>);
    filters:
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
  - pattern: String.format($<FORMAT_STRING>, $<USER_INPUT>$<...>);
    filters:
      - not:
          variable: FORMAT_STRING
          detection: java_lang_format_string_manipulation_format_string
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
  - pattern: System.out.$<METHOD>($<USER_INPUT>$<...>);
    filters:
      - variable: METHOD
        values:
          - format
          - printf
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
  - pattern: System.out.$<METHOD>($<FORMAT_STRING>, $<USER_INPUT>$<...>);
    filters:
      - not:
          variable: FORMAT_STRING
          detection: java_lang_format_string_manipulation_format_string
      - variable: METHOD
        values:
          - format
          - printf
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
  - pattern: $<JAVA_FORMATTER>.format($<USER_INPUT>$<...>);
    filters:
      - variable: JAVA_FORMATTER
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(java\.util\.)?Formatter\z
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
  - pattern: $<JAVA_FORMATTER>.format($<FORMAT_STRING>, $<USER_INPUT>$<...>);
    filters:
      - not:
          variable: FORMAT_STRING
          detection: java_lang_format_string_manipulation_format_string
      - variable: JAVA_FORMATTER
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(java\.util\.)?Formatter\z
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
  - pattern: $<JAVA_PRINT_STREAM>.$<METHOD>($<USER_INPUT>$<...>);
    filters:
      - variable: JAVA_PRINT_STREAM
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(java\.io\.)?PrintStream\z
      - variable: METHOD
        values:
          - format
          - printf
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
  - pattern: $<JAVA_PRINT_STREAM>.$<METHOD>($<FORMAT_STRING>, $<USER_INPUT>$<...>);
    filters:
      - not:
          variable: FORMAT_STRING
          detection: java_lang_format_string_manipulation_format_string
      - variable: JAVA_PRINT_STREAM
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(java\.io\.)?PrintStream\z
      - variable: METHOD
        values:
          - format
          - printf
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
auxiliary:
  - id: java_lang_format_string_manipulation_format_string
    patterns:
      - pattern: $<FORMAT_STRING>;
        filters:
          - variable: FORMAT_STRING
            string_regex: (%s)+
languages:
  - java
metadata:
  description: "Externally controlled format string detected."
  remediation_message: |
    ## Description

    For format functions, the first argument (or second if a locale is specified) is the format string itself.
    If unsanitized user input is passed as this format string argument, this puts the application at risk of attack. Malicious agents could pass format strings that result in data leaks or cause the application to throw exceptions, for example.

    ## Remediations

    ❌ Do not allow user input to be used as the format string
    For most Java formatting functions, this means never passing an externally-controlled string as the first argument (or second if a locale is specified) to the format function.

    ```java
    // bad
    String.format(request.getParameter("foo"), "bar");
    String.format(Locale.US, request.getParameter("foo"), "bar");

    // okay
    String.format("Strings: %s", request.getParameter("foo"), "bar");
    String.format(Locale.US, "Strings: %s", request.getParameter("foo"), "bar");
    ```

    ✅ Use hard-coded format strings instead

    ## Resources
    - [OWASP Testing for Format String Injection](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection)
  cwe_id:
    - 134
  id: java_lang_format_string_manipulation
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_format_string_manipulation
