patterns:
  - pattern: $<CIPHER>.getInstance($<PADDING_ORACLE>)
    filters:
      - variable: CIPHER
        regex: \A(javax\.crypto\.)?Cipher\z
      - variable: PADDING_ORACLE
        string_regex: \/CBC\/PKCS5Padding\z
      - not:
          variable: PADDING_ORACLE
          string_regex: \A(RSA|ECIES)
languages:
  - java
metadata:
  description: "Usage of CBC (Cipher Block Chaining) mode with padding"
  remediation_message: |-
    ## Description

    Using a block cipher algorithm mode, such as CBC (Cipher Block Chaining), together with a padding scheme is vulnerable to Padding Oracle attacks. This vulnerability arises because attackers can exploit the padding scheme to decrypt messages.

    ## Remediations

    - **Do not** use CBC mode with padding for encryption. This combination is susceptible to security breaches.
    ```java
    Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding"); // unsafe
    ```
    - **Do** opt for GCM (Galois/Counter Mode) when implementing encryption. GCM is a more secure alternative that mitigates the risks associated with CBC mode.
    ```java
    Cipher c = Cipher.getInstance("AES/GCM/PKCS5Padding");
    ```

    ## References

    - [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)
    - [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)
  cwe_id:
    - 327
  id: java_lang_padding_oracle_encryption_vulnerability
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability
severity: high
