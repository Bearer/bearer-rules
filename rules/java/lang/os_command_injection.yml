imports:
  - java_shared_lang_user_input
  - java_shared_lang_instance
patterns:
  - pattern: |
      $<RUNTIME_INIT>.exec($<...>$<USER_INPUT>$<...>);
    filters:
      - variable: RUNTIME_INIT
        detection: java_lang_os_command_injection_runtime
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
        scope: result
  - pattern: |
      new $<PROCESS_BUILDER>($<...>$<USER_INPUT>$<...>);
    filters:
      - variable: PROCESS_BUILDER
        regex: \A(java\.lang\.)?ProcessBuilder\z
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
        scope: result
  - pattern: |
      $<PROCESS_BUILDER_INIT>.command($<...>$<USER_INPUT>$<...>);
    filters:
      - variable: PROCESS_BUILDER_INIT
        detection: java_shared_lang_instance
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(java\.lang\.)?ProcessBuilder\z
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
        scope: result
auxiliary:
  - id: java_lang_os_command_injection_runtime
    patterns:
      - pattern: $<JAVA_LANG_RUNTIME>.getRuntime();
        filters:
          - variable: JAVA_LANG_RUNTIME
            regex: \A(java\.lang\.)?Runtime\z
      - pattern: $<JAVA_LANG_RUNTIME>;
        filters:
          - variable: JAVA_LANG_RUNTIME
            detection: java_shared_lang_instance
            scope: cursor
            filters:
              - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
                regex: \A(java\.lang\.)?Runtime\z
  - id: java_lang_os_command_injection_process_builder
    patterns:
      - pattern: $<JAVA_LANG_PROCESS_BUILDER_INIT>;
        filters:
          - variable: JAVA_LANG_PROCESS_BUILDER_INIT
            detection: java_shared_lang_instance
            scope: cursor
            filters:
              - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
                regex: \A(java\.lang\.)?ProcessBuilder\z
languages:
  - java
severity: critical
metadata:
  description: "Unsanitized user input in OS command"
  remediation_message: |-
    ## Description

    Directly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.

    ## Remediations

    - **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands.
    - **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands.
    ```java
    String filePattern = "*.json";
    if ("xml".equals(request.getParameter("format"))) {
      filePattern = "*.xml";
    }

    Process process = Runtime.getRuntime().exec("ls /myDir/" + filePattern);
    ```

    ## References

    - [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)
  cwe_id:
    - 78
  id: java_lang_os_command_injection
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_os_command_injection
