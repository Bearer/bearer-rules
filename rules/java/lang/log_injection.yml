imports:
  - java_shared_lang_user_input
  - java_shared_lang_logger_methods
patterns:
  - pattern: |
      $<LOG>.$<METHOD>($<...>$<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
        scope: result
      - variable: METHOD
        detection: java_shared_lang_logger_methods
      - variable: LOG
        values:
          - log
          - logger
languages:
  - java

metadata:
  description: "Unsanitized user input in logger message"
  remediation_message: |
    ## Description
    Writing invalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs. This rule looks for instances of user input sent to loggers.
    ## Remediations
    ❌ Avoid using unsanitized user input in logger messages:
    ```java
     String username = request.getParameter("username");
     log.warn("Username is" + username);
    ```
    ✅ If you need to identify a user, use their unique identifier instead of their personal identifiable information:
    ```java
     String username = sanitized(request.getParameter("username"));
     log.warn("Username is" + username);
    ```
    ## Resources
    - [OWASP Log Injection] (https://owasp.org/www-community/attacks/Log_Injection)
    - [OWASP logging cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)

  cwe_id:
    - 117

  id: "java_lang_log_injection"
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_logger
