imports:
  - java_shared_lang_user_input
patterns:
  - pattern: $<PATHS_GET>.normalize();
    filters:
      - variable: PATHS_GET
        detection: java_lang_path_traversal_paths_with_user_input
        scope: result
trigger:
  match_on: absence
  required_detection: java_lang_path_traversal_paths_with_user_input
auxiliary:
  - id: java_lang_path_traversal_paths_with_user_input
    patterns:
      - pattern: $<PATHS>.get($<USER_INPUT>);
        filters:
          - variable: PATHS
            regex: \A(java\.nio\.file\.)?Paths\z
          - variable: USER_INPUT
            detection: java_shared_lang_user_input
languages:
  - java
metadata:
  description: Missing protection against path traversal
  remediation_message: |
    ## Description

    Allowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope (path traversal).

    ## Remediations
    ❌ Wherever possible, avoid constructing filepaths with user input

    ✅ Use Paths helpers to normalize filepaths. This removes unwanted patterns in the path such as `\..\..` that could lead to path traversal attacks

    ```java
      public class Cls extends HttpServlet
      {

          public void handleRequest(HttpServletRequest request, HttpServletResponse response)
          {
              String image = request.getParameter("user_profile_picture");

              // normalize path
              Path imagePath = Paths.get("user/profile/" + FilenameUtils.getName(image)).normalize();
              File file = new File(imagePath.toString());
          }
      }
    ```

    ## Resources
    - [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)
  cwe_id:
    - 73
  id: java_lang_path_traversal
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_path_traversal
