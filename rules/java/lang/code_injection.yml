imports:
  - java_shared_lang_user_input
  - java_shared_lang_instance
patterns:
  - pattern: |
      $<INVOCATION>.invokeFunction($<_>, $<USER_INPUT>);
    filters:
      - variable: INVOCATION
        detection: java_lang_code_injection_invocation_instance
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
        scope: result
  - pattern: |
      $<INVOCATION>.invokeMethod($<_>, $<_>, $<USER_INPUT>);
    filters:
      - variable: INVOCATION
        detection: java_lang_code_injection_invocation_instance
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
        scope: result
auxiliary:
  - id: java_lang_code_injection_invocation_instance
    patterns:
      - pattern: $<INVOCATION>;
        filters:
          - variable: INVOCATION
            detection: java_shared_lang_instance
            scope: cursor
            filters:
              - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
                regex: \A(javax\.script\.)?Invocable\z
languages:
  - java
metadata:
  description: Unsanitized user input in code generation
  remediation_message: |-
    ## Description

    Allowing user input to directly influence code generation or scripting functions without proper sanitization can lead to code injection vulnerabilities. This occurs when an attacker is able to insert malicious code into your application, which is then executed, potentially leading to unauthorized actions or data access.

    ## Remediations

    - **Do not** pass unsanitized user input to functions or methods that dynamically execute code.
    - **Do** always validate or sanitize input to ensure it does not contain harmful code before using it in such contexts.

    ## References

    - [OWASP Code injection](https://owasp.org/www-community/attacks/Code_Injection)
  cwe_id:
    - 94
  id: java_lang_code_injection
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_code_injection
severity: critical
