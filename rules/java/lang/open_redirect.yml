imports:
  - java_shared_lang_instance
  - java_shared_lang_user_input
patterns:
  - pattern: |
      $<SERVLET_RESPONSE>.sendRedirect($<USER_INPUT>);
    filters:
      - variable: SERVLET_RESPONSE
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(javax\.servlet\.http\.)?HttpServletResponse\z
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
  - pattern: |
      $<SERVLET_RESPONSE>.addHeader($<LOCATION>, $<USER_INPUT>);
    filters:
      - variable: SERVLET_RESPONSE
        detection: java_shared_lang_instance
        scope: cursor
        filters:
          - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
            regex: \A(javax\.servlet\.http\.)?HttpServletResponse\z
      - variable: LOCATION
        string_regex: (?i)\Alocation\z
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
languages:
  - java
severity: medium
metadata:
  description: "Unsanitized user input in redirect"
  remediation_message: |-
    ## Description

    Using unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.

    ## Remediations

    - **Do not** use unsanitized user input to construct URLs for redirects. This can lead to phishing attacks and compromise user security.
    - **Do** validate user input by employing a safe list or a mapping strategy when constructing URLs for redirects. This ensures that only pre-approved destinations are used, significantly reducing the risk of malicious redirects.
    ```java
    private static final Map<String, String> URL_MAPPING = new HashMap<>();
    static {
      URL_MAPPING.put("google", "https://www.google.com");
      URL_MAPPING.put("openai", "https://www.openai.com");
      URL_MAPPING.put("github", "https://www.github.com");
      URL_MAPPING.put("root", "https://www.example.com");
    }

    String redirectUrl = URL_MAPPING.getOrDefault(request.getParameter("redirectTo"), "root");
    response.addHeader("Location", redirectUrl);
    ```

    ## References

    - [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)
  cwe_id:
    - 601
  id: java_lang_open_redirect
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_open_redirect
