imports:
  - java_shared_lang_user_input
  - java_shared_lang_instance
patterns:
  - pattern: |
      $<XPATH>.$<METHOD>($<USER_INPUT>$<...>);
    filters:
      - variable: XPATH
        detection: java_lang_xpath_injection_instance
        scope: cursor
      - variable: METHOD
        values:
          - compile
          - evaluate
      - variable: USER_INPUT
        detection: java_shared_lang_user_input
        scope: result
auxiliary:
  - id: java_lang_xpath_injection_instance
    patterns:
      - $<_>.newXPath();
      - pattern: $<XPATH_INSTANCE>;
        filters:
          - variable: XPATH_INSTANCE
            detection: java_shared_lang_instance
            scope: cursor
            filters:
              - variable: JAVA_SHARED_LANG_INSTANCE_TYPE
                regex: \A(javax\.xml\.xpath\.)?XPath\z
      # fallback
      - xp;
languages:
  - java
metadata:
  description: "Unsanitized user input in XPath"
  remediation_message: |-
    ## Description

    Using unsanitized user input in XPath expressions can lead to XPath injection, whereby attackers can gain unauthorized access to sensitive information in XML documents. Ensure all variables passed into XPath `evaluate` or `compile` commands are properly sanitized.

    ## Remediations

    - **Do** sanitize user input before incorporating it into XPath queries. This prevents XPath injection by ensuring that input values cannot manipulate the query structure.
      ```java
      public class Cls extends HttpServlet
      {
          public void handleRequest(HttpServletRequest request, HttpServletResponse response)
          {
              String userID = request.getParameter("userID");
              String sanitizedUserID = sanitize(userID); // Ensure sanitization

              javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();
              javax.xml.xpath.XPath xp = xpf.newXPath();

              String expression = "/Users/User[@userID='" + sanitizedUserID + "']";
              String result = xp.evaluate(expression, xmlDocument);
          }
      }
      ```
    - **Do not** directly concatenate or embed unsanitized user inputs into XPath expressions. This practice can lead to XPath injection vulnerabilities.

    ## References

    - [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)
  cwe_id:
    - 643
  id: "java_lang_xpath_injection"
  documentation_url: https://docs.bearer.com/reference/rules/java_lang_xpath_injection
severity: medium
