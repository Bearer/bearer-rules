languages:
  - php
patterns:
  - pattern: |
      class $<_> {
        #[$<ATTRIBUTE>(pattern: $<PATTERN>)]
        public $<_>;
      }
    focus: ATTRIBUTE
    filters:
      - variable: ATTRIBUTE
        regex: \A((Symfony\\Component\\Validator\\)?Constraints|Assert)\\Regex
      - not:
          variable: PATTERN
          string_regex: \A.\\A.*\\[zZ].\z
  - pattern: |
      class $<_> {
        #[$<ATTRIBUTE>($<PATTERN>$<...>)]
        public $<_>;
      }
    focus: ATTRIBUTE
    filters:
      - variable: ATTRIBUTE
        regex: \A((Symfony\\Component\\Validator\\)?Constraints|Assert)\\Regex
      - not:
          variable: PATTERN
          string_regex: \A.\\A.*\\[zZ].\z
  - pattern: new $<CLASS>($<OPTIONS>)
    filters:
      - variable: CLASS
        regex: \A(\\?(Symfony\\Component\\Validator\\)?Constraints|Assert)\\Regex
      - variable: OPTIONS
        detection: php_symfony_permissive_regex_validation_options
        scope: cursor
  - pattern: new $<CLASS>($<PATTERN>$<...>)
    filters:
      - variable: CLASS
        regex: \A(\\?(Symfony\\Component\\Validator\\)?Constraints|Assert)\\Regex
      - variable: PATTERN
        string_regex: ""
      - not:
          variable: PATTERN
          string_regex: \A.\\A.*\\[zZ].\z
auxiliary:
  - id: php_symfony_permissive_regex_validation_options
    patterns:
      - pattern: array('pattern' => $<PATTERN>)
        filters:
          - not:
              variable: PATTERN
              string_regex: \A.\\A.*\\[zZ].\z
metadata:
  description: "Missing validation for regular expression"
  remediation_message: |-
    ## Description

    When validating data with regular expressions, it's crucial to match the entire text. Failing to specify the start and end of the text can lead to incomplete validation, making your application vulnerable to malicious input. Regular expressions should always specify the start of text (\A) and end of text (\z or \Z) boundaries to ensure that the entire string is evaluated, not just portions of it. Note: it is best security practice to prefer the boundary expressions \A and \z or \Z over ^ and $, because ^ and $ operate as line-based boundaries when multiline mode is enabled.

    ## Remediations

    - **Do not** use regular expressions without specifying start and end text boundaries. This approach can result in partial matches, which may not fully validate the data.
    ```php
    #[Assert\Regex('/foo/')]
    protected string $attribute; // unsafe
    ```
    - **Do not** rely on line-based boundaries (^ and $).
    ```php
    #[Assert\Regex('/^foo$/')]
    protected string $attribute; // unsafe
    ```
    - **Do** use \A and \z or \Z as boundaries in your regular expressions to ensure that the entire text is validated from start to end.
    ```php
    #[Assert\Regex('/\Afoo\z/')]
    protected string $attribute;
    ```

    ## References

    - [Symfony validation](https://symfony.com/doc/current/validation.html)
  cwe_id:
    - 625
  id: php_symfony_permissive_regex_validation
  documentation_url: https://docs.bearer.com/reference/rules/php_symfony_permissive_regex_validation
  cloud_code_suggestions: true
severity: medium
