imports:
  - php_shared_lang_external_input
patterns:
  - pattern: $<_>->$<METHOD>($<UNSANITIZED_INPUT>)
    filters:
      - variable: METHOD
        values:
          - select
          - addSelect
          - delete
          - update
          - set
          - from
          - join
          - innerJoin
          - leftJoin
          - where
          - andWhere
          - orWhere
          - groupBy
          - addGroupBy
          - having
          - andHaving
          - orHaving
          - orderBy
          - addOrderBy
      - variable: UNSANITIZED_INPUT
        detection: php_symfony_sql_injection_input_unsanitized
        scope: result
  - pattern: $<_>->$<METHOD>($<UNSANITIZED_INPUT>)
    filters:
      - variable: METHOD
        values:
          - prepare
          - createQuery
      - either:
          - variable: UNSANITIZED_INPUT
            detection: php_symfony_sql_injection_input_unsanitized
            scope: result
auxiliary:
  - id: php_symfony_sql_injection_input_unsanitized
    sanitizer: php_symfony_sql_injection_input_sanitizer
    patterns:
      - pattern: $<EXTERNAL_INPUT>;
        filters:
          - variable: EXTERNAL_INPUT
            detection: php_shared_lang_external_input
            scope: cursor
  - id: php_symfony_sql_injection_input_sanitizer
    patterns:
      - pattern: $<_>->quote($<!>$<_>)
      - pattern: $<_>->createNamedParameter($<!>$<_>$<...>)
      - pattern: $<_>->setParameter($<!>$<_>$<...>)
languages:
  - php
severity: critical
metadata:
  description: Unsanitized external input in SQL query
  remediation_message: |-
    ## Description

    Using unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.

    ## Remediations

    - **Do not** include raw input in SQL queries. This practice can lead to SQL injection vulnerabilities.
      ```php
      $sql = "SELECT * FROM foo WHERE foo.bar > " . $_GET['untrusted']. " ORDER BY foo.bar ASC";
      ```
    - **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.
      ```php
      $sql = "SELECT * FROM foo WHERE bar = '" . $conn->quote($_GET['bar']) . "'";
      ```
    - **Do** use safe lists to validate external input, if dynamic input is required.
      ```php
      private function validatedTableName($table_name)
      {
        if in_array($table_name, $ALLOWED_TABLE_NAMES) {
          return $table_name
        }
        // handle invalid table name
      }
      ```
    - **Do** use prepared statements with bound parameters to safely include external data in SQL queries. This method ensures that external input is treated as data and not as part of the SQL command.
      ```php
      $sql = "SELECT * FROM users WHERE username = :user";
      $stmt = $connection->prepare($sql);
      $stmt->bindValue("user", $_GET['username']);
      ```
    - **Do** employ an Object-Relational Mapping (ORM) tool or a database abstraction layer that automatically handles input sanitization and prepared statements.
      ```php
      $dql = "SELECT * FROM Foo WHERE bar = :bar";
      $query = $em->createQuery($dql);
      $query->setParameter("bar", $_GET['bar']);
      ```

    ## References

    - [Doctrine DBAL Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html)
    - [Doctrine SQL Query Builder Security](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection)
    - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
    - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 89
  id: php_symfony_sql_injection
  documentation_url: https://docs.bearer.com/reference/rules/php_symfony_sql_injection
