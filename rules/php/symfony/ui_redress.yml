imports:
  - php_shared_lang_user_input
patterns:
  - pattern: $<HEADERS>->set($<NAME>, $<VALUE>)
    filters:
      - variable: HEADERS
        detection: php_symfony_ui_redress_headers
        scope: cursor
      - variable: NAME
        string_regex: (?i)\A(x-frame-options|content-security-policy)\z
      - variable: VALUE
        detection: php_shared_lang_user_input
        scope: result
  - pattern: new $<CLASS>($<_>, $<_>, $<HEADERS>)
    filters:
      - variable: HEADERS
        detection: php_symfony_ui_redress_array
        scope: cursor
auxiliary:
  - id: php_symfony_ui_redress_headers
    patterns:
      - $<_>->headers
  - id: php_symfony_ui_redress_array
    patterns:
      - pattern: array($<NAME> => $<VALUE>)
        filters:
          - variable: NAME
            string_regex: (?i)\A(x-frame-options|content-security-policy)\z
          - variable: VALUE
            detection: php_shared_lang_user_input
            scope: result
languages:
  - php
metadata:
  description: "Unsanitized user input in UI"
  remediation_message: |
    ## Description
    Using unsanitized user input to set X-Frame-Options or Content-Security-Policy
    HTTP headers puts your application at risk for UI redress attacks (clickjacking).

    ## Remediations
    âœ… Prefer the most secure values when setting these headers

    ```php
    $response->headers->set("X-Frame-Options", "DENY");
    $response->headers->set("Content-Security-Policy", "frame-ancestors 'none'");
    ```

    ## Resources
    - [OWASP Clickjacking attack explained](https://owasp.org/www-community/attacks/Clickjacking)
    - [OWASP Clickjacking defense cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html)
  cwe_id:
    - 1021
  id: "php_symfony_ui_redress"
  documentation_url: https://docs.bearer.com/reference/rules/php_symfony_ui_redress
  cloud_code_suggestions: true
