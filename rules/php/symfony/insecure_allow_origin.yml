imports:
  - php_shared_lang_user_input
patterns:
  - pattern: $<HEADERS>->set($<NAME>, $<VALUE>)
    filters:
      - variable: HEADERS
        detection: php_symfony_insecure_allow_origin_headers
        scope: cursor
      - variable: NAME
        string_regex: (?i)\Aaccess-control-allow-origin\z
      - variable: VALUE
        detection: php_shared_lang_user_input
        scope: result
  - pattern: new $<CLASS>($<_>, $<_>, $<HEADERS>)
    filters:
      - variable: HEADERS
        detection: php_symfony_insecure_allow_origin_array
        scope: cursor
auxiliary:
  - id: php_symfony_insecure_allow_origin_headers
    patterns:
      - $<_>->headers
  - id: php_symfony_insecure_allow_origin_array
    patterns:
      - pattern: array($<NAME> => $<VALUE>)
        filters:
          - variable: NAME
            string_regex: (?i)\Aaccess-control-allow-origin\z
          - variable: VALUE
            detection: php_shared_lang_user_input
            scope: result
languages:
  - php
metadata:
  description: "Insecure Access-Control-Allow-Origin detected."
  remediation_message: |
    ## Description
    Do not use unverified user-defined input to define Access-Control-Allow-Origin.
    This can lead to unintended user access to sensitive data.

    ## Remediations
    ❌ Avoid defining origins with user input wherever possible.

    ✅ If unavoidable, be sure to verify the input or to use a safe-list.

    ## Resources
    - [OWASP Origin & Access-Control-Allow-Origin](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing)
  cwe_id:
    - 346
  id: php_symfony_insecure_allow_origin
  documentation_url: https://docs.bearer.com/reference/rules/php_symfony_insecure_allow_origin
