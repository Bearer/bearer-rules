languages:
  - php
imports:
  - php_shared_lang_user_input
patterns:
  - pattern: $<STRING>;
    filters:
      - variable: STRING
        string_regex: <\w+(\s[^>]*)?>
      - variable: STRING
        detection: php_lang_raw_html_using_user_input_html_user_input
        scope: result
auxiliary:
  - id: php_lang_raw_html_using_user_input_html_user_input
    sanitizer: php_lang_raw_html_using_user_input_html_sanitizer
    patterns:
      - pattern: $<USER_INPUT>;
        filters:
          - variable: USER_INPUT
            detection: php_shared_lang_user_input
            scope: cursor
  - id: php_lang_raw_html_using_user_input_html_sanitizer
    patterns:
      - pattern: $<FUNCTION>($<!>$<_>$<...>)
        filters:
          - variable: FUNCTION
            values:
              - htmlspecialchars
              - htmlentities
              - strip_tags
severity: high
metadata:
  description: "Unsanitized user input detected in raw HTML string."
  remediation_message: |
    ## Description

    Applications should not include unsanitized user input in HTML. This
    can allow cross-site scripting (XSS) attacks.

    ## Remediations

    ❌ Avoid including user input directly in HTML strings:

    ```php
    $html = "<h1>{$_GET["title"]}</h1>";
    ```

    ✅ Use a templating language such as Twig, and place the template in a separate file.

    ✅ When HTML strings must be used, sanitize user input:

    ```php
    $html = "<h1>${htmlspecialchars($_GET["title"])}</h1>";
    ```

    ## Resources
    - [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 79
  id: php_lang_raw_html_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input
