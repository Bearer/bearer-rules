imports:
  - php_shared_lang_external_input
patterns:
  - pattern: $<ODBC_METHOD>($<_>, $<UNSANITIZED_INPUT>)
    filters:
      - variable: ODBC_METHOD
        values:
          - pg_query
          - odbc_exec
          - mssql_query
          - mysqli_query
      - variable: UNSANITIZED_INPUT
        detection: php_lang_sql_injection_external_input_unsanitized
        scope: result
auxiliary:
  - id: php_lang_sql_injection_external_input_unsanitized
    sanitizer: php_lang_sql_injection_external_input_sanitizer
    patterns:
      - pattern: $<INPUT>;
        filters:
          - variable: INPUT
            detection: php_shared_lang_external_input
            scope: cursor
  - id: php_lang_sql_injection_external_input_sanitizer
    patterns:
      - pattern: $<ESCAPE_METHOD>($<_>, $<!>$<INPUT>)
        filters:
          - variable: ESCAPE_METHOD
            values:
              - mysqli_real_escape_string
              - pg_escape_string
              - mysql_escape_string
              - db2_escape_string
languages:
  - php
severity: critical
metadata:
  description: Unsanitized external input in SQL query
  remediation_message: |-
    ## Description

    Using unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.

    ## Remediations

    - **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.
    ```php
    $sortingOrder = $_GET['untrusted'];
    $query  = "SELECT id, name FROM products ORDER BY name LIMIT 20 $sortingOrder;"; // unsafe
    ```
    - **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.
    ```php
    $sortingOrder = $_GET['sortingOrder'] === 'DESC' ? 'DESC' : 'ASC';
    ```
    - **Do** use prepared statements for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.
    ```php
    $stmt = $pdo->prepare("SELECT * FROM products WHERE id LIKE ? ORDER BY price {$sortingOrder}");
    $stmt->execute(["%{$productId}%"]);
    ```
    - **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.
    ```php
    $ok = mysqli_real_escape_string($conn, $_GET['ok']);
    ```

    ## References

    - [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)
    - [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)
  cwe_id:
    - 89
  id: php_lang_sql_injection
  documentation_url: https://docs.bearer.com/reference/rules/php_lang_sql_injection
