patterns:
  - pattern: |
      $$<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
  - pattern: |
      const $<NAME> = $<STRING_LITERAL>
    filters:
      - variable: NAME
        regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
  - pattern: |
      array($<NAME> => $<STRING_LITERAL>)
    filters:
      - variable: NAME
        string_regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
  - pattern: |
      define($<NAME>, $<STRING_LITERAL>);
    filters:
      - variable: NAME
        string_regex: (?i)(password|api_?key|secret)\b
      - variable: STRING_LITERAL
        detection: string_literal
        scope: cursor
      - not:
          variable: STRING_LITERAL
          string_regex: \A[*•]+\z
languages:
  - php
severity: high
metadata:
  description: "Hard-coded secret detected."
  remediation_message: |
    ## Description

    Applications should store secret values securely and not as literal values
    in the source code.

    ## Remediations

    ✅ Retrieve secrets from a secure location at runtime

    ## Resources
    - [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)
    - [OWASP secrets management cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html#21-high-availability)
  cwe_id:
    - 798
  id: php_lang_hardcoded_secret
  documentation_url: https://docs.bearer.com/reference/rules/php_lang_hardcoded_secret
