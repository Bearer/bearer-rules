imports:
  - php_shared_lang_user_input
patterns:
  - pattern: eval($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: php_shared_lang_user_input
        scope: result
  - pattern: create_function($<_>, $<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: php_shared_lang_user_input
        scope: result
  - pattern: $<FUNCTION>($<USER_INPUT>$<...>)
    filters:
      - variable: FUNCTION
        values:
          - call_user_func
          - call_user_func_array
          - assert
          - array_map
          - extract
      - variable: USER_INPUT
        detection: php_shared_lang_user_input
        scope: result
languages:
  - php
severity: critical
metadata:
  description: "Unsanitized user input in 'eval' type function"
  remediation_message: |-
    ## Description

    Executing code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.

    ## Remediations

    - **Do not** use 'eval' or similar functions with user-supplied data. This can open your application to severe security risks.
      ```php
      eval("echo " . $_GET["untrusted"]);  // unsafe
      ```
    - **Do** validate and sanitize all user input before using it in your code. Ensure that the input does not contain malicious code or commands.
    - **Do** use safer alternatives to 'eval' for dynamic code execution. Consider using functions that limit the scope and capabilities of executed code to reduce risk.

    ## References

    - [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)
  cwe_id:
    - 95
  id: php_lang_eval_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/php_lang_eval_using_user_input
