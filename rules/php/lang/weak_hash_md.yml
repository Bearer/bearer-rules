imports:
  - php_shared_lang_datatype
patterns:
  - pattern: |
      md5($<DATA_TYPE>$<...>)
    filters:
      - either:
          - variable: DATA_TYPE
            detection: php_shared_lang_datatype
            scope: result
          - not:
              variable: DATA_TYPE
              detection: php_shared_lang_datatype
              scope: result
  - pattern: |
      $<FUNCTION>($<ALGORITHM>, $<DATA_TYPE>$<...>)
    filters:
      - variable: FUNCTION
        values:
          - hash
          - hash_hmac
      - variable: ALGORITHM
        string_regex: md\d
      - either:
          - variable: DATA_TYPE
            detection: php_shared_lang_datatype
            scope: result
          - not:
              variable: DATA_TYPE
              detection: php_shared_lang_datatype
              scope: result
  - pattern: md5_file();
  - pattern: hash_update($<CONTEXT>, $<DATA_TYPE>)
    filters:
      - variable: CONTEXT
        detection: php_lang_weak_hash_md_context
        scope: cursor
      - either:
          - variable: DATA_TYPE
            detection: php_shared_lang_datatype
            scope: result
          - not:
              variable: DATA_TYPE
              detection: php_shared_lang_datatype
              scope: result
  - pattern: $<FUNCTION>($<CONTEXT>$<...>)
    filters:
      - variable: FUNCTION
        values:
          - hash_update_file
          - hash_update_stream
      - variable: CONTEXT
        detection: php_lang_weak_hash_md_context
        scope: cursor
auxiliary:
  - id: php_lang_weak_hash_md_context
    patterns:
      - pattern: hash_init($<ALGORITHM>$<...>)
        filters:
          - variable: ALGORITHM
            string_regex: md\d
languages:
  - php
skip_data_types:
  - "Unique Identifier"
  - Passwords # see php_lang_weak_password_hash_md5
metadata:
  description: "Usage of weak hashing library (MDx)"
  remediation_message: |-
    ## Description

    Using a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.

    ## Remediations

    - **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.
      ```php
      $encrypted = md5($input); // unsafe
      ```
    - **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.
      ```php
      $encrypted = hash('sha256', $input);
      ```
  cwe_id:
    - 328
  id: php_lang_weak_hash_md
  documentation_url: https://docs.bearer.com/reference/rules/php_lang_weak_hash_md
  cloud_code_suggestions: true
severity: medium
