imports:
  - php_shared_lang_user_input
patterns:
  - pattern: $<FUNCTION>($<USER_INPUT>$<...>)
    filters:
      - variable: FUNCTION
        values:
          - preg_filter
          - preg_grep
          - preg_match_all
          - preg_match
          - preg_replace_callback
          - preg_replace
          - preg_split
          - mb_ereg_match
          - mb_ereg_replace_callback
          - mb_ereg_replace
          - mb_ereg_search_pos
          - mb_ereg_search_regs
          - mb_ereg_search
          - mb_ereg
          - mb_eregi_replace
          - mb_eregi
          - mb_split
      - variable: USER_INPUT
        detection: php_shared_lang_user_input
        scope: result
  - pattern: preg_replace_callback_array($<PATTERN_ARRAY>$<...>)
    filters:
      - variable: PATTERN_ARRAY
        detection: php_lang_regex_using_user_input_pattern_array
        scope: cursor
  - pattern: mb_ereg_search_init($<_>, $<USER_INPUT>$<...>)
    filters:
      - variable: USER_INPUT
        detection: php_shared_lang_user_input
        scope: result
auxiliary:
  - id: php_lang_regex_using_user_input_pattern_array
    patterns:
      - pattern: array($<USER_INPUT> => $<_>)
        filters:
          - variable: USER_INPUT
            detection: php_shared_lang_user_input
            scope: result
languages:
  - php
metadata:
  description: "Unsanitized user input in regular expression"
  remediation_message: |-
    ## Description

    Constructing regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This occurs because certain regular expressions can be processed with exponential time complexity, leading to excessive CPU usage and potentially crashing the system when handling malicious input.

    ## Remediations

    - **Do not** use user input directly in regular expressions. This can prevent attackers from exploiting complex patterns to cause a denial of service.
    ```php
    $user_input = $_GET["name"] . ".php";
    preg_grep($user_input, $array); // unsafe
    ```
    - **Do** sanitize or validate user input before incorporating it into regular expressions. This reduces the risk of ReDoS attacks by ensuring only safe patterns are used.

    ## References

    - [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)
  cwe_id:
    - 1287
  id: php_lang_regex_using_user_input
  documentation_url: https://docs.bearer.com/reference/rules/php_lang_regex_using_user_input
severity: medium
